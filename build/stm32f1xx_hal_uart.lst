ARM GAS  /tmp/ccKkagmp.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_hal_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_UART_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_UART_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	HAL_UART_Init:
  25              	.LFB65:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @file    stm32f1xx_hal_uart.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @verbatim
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                         ##### How to use this driver #####
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) UART pins configuration:
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the UART TX/RX pins as alternate function pull-up.
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
ARM GAS  /tmp/ccKkagmp.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   Tx/Rx parameters.
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_UART_Init() API.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             and receive process.
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ##### Callback registration #####
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ==================================
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and a pointer to the user callback function.
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     weak (surcharged) function.
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and the Callback ID.
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function allows to reset following callbacks:
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     For specific callback RxEventCallback, use dedicated registration/reset functions:
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     respectively @ref HAL_UART_RegisterRxEventCallback() , @ref HAL_UART_UnRegisterRxEventCallback(
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     not defined, the callback registration feature is not available
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Three operation modes are available within this driver :
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Polling mode IO operation ***
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =================================
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ===================================
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
ARM GAS  /tmp/ccKkagmp.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** DMA mode IO operation ***
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ==============================
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     services to user. (For example, these functions allow application to handle use cases
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     where number of data to be received is unknown).
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Compared to standard reception services which only consider number of received
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         data elements as reception completion criteria, these functions also consider additional ev
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         as triggers for updating reception status to caller :
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                for 1 frame time, after last received byte.
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two mode of transfer:
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            are returned by function after finishing transfer.
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            These API's return the HAL status.
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API:
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with Interrupt:
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
ARM GAS  /tmp/ccKkagmp.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with DMA:
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =============================================
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @endverbatim
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) Additional remark: If the parity is enabled, then the MSB bit of the data written
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @attention
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * All rights reserved.</center></h2>
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #include "stm32f1xx_hal.h"
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup STM32F1xx_HAL_Driver
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
ARM GAS  /tmp/ccKkagmp.s 			page 6


 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART UART
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief HAL UART module driver
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
ARM GAS  /tmp/ccKkagmp.s 			page 7


 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in asynchronous mode.
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Baud Rate
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Word Length
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Stop Bit
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Hardware flow control
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Over Sampling Method
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     procedures (details for the procedures are available in reference manuals
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  27              		.loc 1 353 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
  43              		.loc 1 355 6
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccKkagmp.s 			page 8


  46 000c 01D1     		bne	.L2
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
  47              		.loc 1 357 12
  48 000e 0123     		movs	r3, #1
  49 0010 3FE0     		b	.L3
  50              	.L2:
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2 and USART3 */
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  51              		.loc 1 376 12
  52 0012 7B68     		ldr	r3, [r7, #4]
  53 0014 93F83D30 		ldrb	r3, [r3, #61]
  54 0018 DBB2     		uxtb	r3, r3
  55              		.loc 1 376 6
  56 001a 002B     		cmp	r3, #0
  57 001c 06D1     		bne	.L4
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  58              		.loc 1 379 17
  59 001e 7B68     		ldr	r3, [r7, #4]
  60 0020 0022     		movs	r2, #0
  61 0022 83F83C20 		strb	r2, [r3, #60]
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  62              		.loc 1 393 5
  63 0026 7868     		ldr	r0, [r7, #4]
  64 0028 FFF7FEFF 		bl	HAL_UART_MspInit
ARM GAS  /tmp/ccKkagmp.s 			page 9


  65              	.L4:
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  66              		.loc 1 397 17
  67 002c 7B68     		ldr	r3, [r7, #4]
  68 002e 2422     		movs	r2, #36
  69 0030 83F83D20 		strb	r2, [r3, #61]
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  70              		.loc 1 400 3
  71 0034 7B68     		ldr	r3, [r7, #4]
  72 0036 1B68     		ldr	r3, [r3]
  73 0038 DA68     		ldr	r2, [r3, #12]
  74 003a 7B68     		ldr	r3, [r7, #4]
  75 003c 1B68     		ldr	r3, [r3]
  76 003e 22F40052 		bic	r2, r2, #8192
  77 0042 DA60     		str	r2, [r3, #12]
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
  78              		.loc 1 403 3
  79 0044 7868     		ldr	r0, [r7, #4]
  80 0046 FFF7FEFF 		bl	UART_SetConfig
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  81              		.loc 1 408 3
  82 004a 7B68     		ldr	r3, [r7, #4]
  83 004c 1B68     		ldr	r3, [r3]
  84 004e 1A69     		ldr	r2, [r3, #16]
  85 0050 7B68     		ldr	r3, [r7, #4]
  86 0052 1B68     		ldr	r3, [r3]
  87 0054 22F49042 		bic	r2, r2, #18432
  88 0058 1A61     		str	r2, [r3, #16]
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  89              		.loc 1 409 3
  90 005a 7B68     		ldr	r3, [r7, #4]
  91 005c 1B68     		ldr	r3, [r3]
  92 005e 5A69     		ldr	r2, [r3, #20]
  93 0060 7B68     		ldr	r3, [r7, #4]
  94 0062 1B68     		ldr	r3, [r3]
  95 0064 22F02A02 		bic	r2, r2, #42
  96 0068 5A61     		str	r2, [r3, #20]
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  97              		.loc 1 412 3
  98 006a 7B68     		ldr	r3, [r7, #4]
  99 006c 1B68     		ldr	r3, [r3]
 100 006e DA68     		ldr	r2, [r3, #12]
 101 0070 7B68     		ldr	r3, [r7, #4]
 102 0072 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 10


 103 0074 42F40052 		orr	r2, r2, #8192
 104 0078 DA60     		str	r2, [r3, #12]
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 105              		.loc 1 415 20
 106 007a 7B68     		ldr	r3, [r7, #4]
 107 007c 0022     		movs	r2, #0
 108 007e 1A64     		str	r2, [r3, #64]
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 109              		.loc 1 416 17
 110 0080 7B68     		ldr	r3, [r7, #4]
 111 0082 2022     		movs	r2, #32
 112 0084 83F83D20 		strb	r2, [r3, #61]
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 113              		.loc 1 417 18
 114 0088 7B68     		ldr	r3, [r7, #4]
 115 008a 2022     		movs	r2, #32
 116 008c 83F83E20 		strb	r2, [r3, #62]
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 117              		.loc 1 419 10
 118 0090 0023     		movs	r3, #0
 119              	.L3:
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 120              		.loc 1 420 1
 121 0092 1846     		mov	r0, r3
 122 0094 0837     		adds	r7, r7, #8
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 8
 125 0096 BD46     		mov	sp, r7
 126              	.LCFI4:
 127              		.cfi_def_cfa_register 13
 128              		@ sp needed
 129 0098 80BD     		pop	{r7, pc}
 130              		.cfi_endproc
 131              	.LFE65:
 133              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 134              		.align	1
 135              		.global	HAL_HalfDuplex_Init
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 140              	HAL_HalfDuplex_Init:
 141              	.LFB66:
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 142              		.loc 1 430 1
 143              		.cfi_startproc
ARM GAS  /tmp/ccKkagmp.s 			page 11


 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              	.LCFI5:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
 151 0002 82B0     		sub	sp, sp, #8
 152              	.LCFI6:
 153              		.cfi_def_cfa_offset 16
 154 0004 00AF     		add	r7, sp, #0
 155              	.LCFI7:
 156              		.cfi_def_cfa_register 7
 157 0006 7860     		str	r0, [r7, #4]
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 158              		.loc 1 432 6
 159 0008 7B68     		ldr	r3, [r7, #4]
 160 000a 002B     		cmp	r3, #0
 161 000c 01D1     		bne	.L6
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 162              		.loc 1 434 12
 163 000e 0123     		movs	r3, #1
 164 0010 47E0     		b	.L7
 165              	.L6:
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 166              		.loc 1 444 12
 167 0012 7B68     		ldr	r3, [r7, #4]
 168 0014 93F83D30 		ldrb	r3, [r3, #61]
 169 0018 DBB2     		uxtb	r3, r3
 170              		.loc 1 444 6
 171 001a 002B     		cmp	r3, #0
 172 001c 06D1     		bne	.L8
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 173              		.loc 1 447 17
 174 001e 7B68     		ldr	r3, [r7, #4]
 175 0020 0022     		movs	r2, #0
 176 0022 83F83C20 		strb	r2, [r3, #60]
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
ARM GAS  /tmp/ccKkagmp.s 			page 12


 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 177              		.loc 1 461 5
 178 0026 7868     		ldr	r0, [r7, #4]
 179 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 180              	.L8:
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 181              		.loc 1 465 17
 182 002c 7B68     		ldr	r3, [r7, #4]
 183 002e 2422     		movs	r2, #36
 184 0030 83F83D20 		strb	r2, [r3, #61]
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 185              		.loc 1 468 3
 186 0034 7B68     		ldr	r3, [r7, #4]
 187 0036 1B68     		ldr	r3, [r3]
 188 0038 DA68     		ldr	r2, [r3, #12]
 189 003a 7B68     		ldr	r3, [r7, #4]
 190 003c 1B68     		ldr	r3, [r3]
 191 003e 22F40052 		bic	r2, r2, #8192
 192 0042 DA60     		str	r2, [r3, #12]
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 193              		.loc 1 471 3
 194 0044 7868     		ldr	r0, [r7, #4]
 195 0046 FFF7FEFF 		bl	UART_SetConfig
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 196              		.loc 1 476 3
 197 004a 7B68     		ldr	r3, [r7, #4]
 198 004c 1B68     		ldr	r3, [r3]
 199 004e 1A69     		ldr	r2, [r3, #16]
 200 0050 7B68     		ldr	r3, [r7, #4]
 201 0052 1B68     		ldr	r3, [r3]
 202 0054 22F49042 		bic	r2, r2, #18432
 203 0058 1A61     		str	r2, [r3, #16]
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 204              		.loc 1 477 3
 205 005a 7B68     		ldr	r3, [r7, #4]
 206 005c 1B68     		ldr	r3, [r3]
 207 005e 5A69     		ldr	r2, [r3, #20]
 208 0060 7B68     		ldr	r3, [r7, #4]
 209 0062 1B68     		ldr	r3, [r3]
 210 0064 22F02202 		bic	r2, r2, #34
ARM GAS  /tmp/ccKkagmp.s 			page 13


 211 0068 5A61     		str	r2, [r3, #20]
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 212              		.loc 1 480 3
 213 006a 7B68     		ldr	r3, [r7, #4]
 214 006c 1B68     		ldr	r3, [r3]
 215 006e 5A69     		ldr	r2, [r3, #20]
 216 0070 7B68     		ldr	r3, [r7, #4]
 217 0072 1B68     		ldr	r3, [r3]
 218 0074 42F00802 		orr	r2, r2, #8
 219 0078 5A61     		str	r2, [r3, #20]
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 220              		.loc 1 483 3
 221 007a 7B68     		ldr	r3, [r7, #4]
 222 007c 1B68     		ldr	r3, [r3]
 223 007e DA68     		ldr	r2, [r3, #12]
 224 0080 7B68     		ldr	r3, [r7, #4]
 225 0082 1B68     		ldr	r3, [r3]
 226 0084 42F40052 		orr	r2, r2, #8192
 227 0088 DA60     		str	r2, [r3, #12]
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 228              		.loc 1 486 20
 229 008a 7B68     		ldr	r3, [r7, #4]
 230 008c 0022     		movs	r2, #0
 231 008e 1A64     		str	r2, [r3, #64]
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 232              		.loc 1 487 17
 233 0090 7B68     		ldr	r3, [r7, #4]
 234 0092 2022     		movs	r2, #32
 235 0094 83F83D20 		strb	r2, [r3, #61]
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 236              		.loc 1 488 18
 237 0098 7B68     		ldr	r3, [r7, #4]
 238 009a 2022     		movs	r2, #32
 239 009c 83F83E20 		strb	r2, [r3, #62]
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 240              		.loc 1 490 10
 241 00a0 0023     		movs	r3, #0
 242              	.L7:
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 243              		.loc 1 491 1
 244 00a2 1846     		mov	r0, r3
 245 00a4 0837     		adds	r7, r7, #8
 246              	.LCFI8:
 247              		.cfi_def_cfa_offset 8
 248 00a6 BD46     		mov	sp, r7
 249              	.LCFI9:
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 00a8 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
ARM GAS  /tmp/ccKkagmp.s 			page 14


 254              	.LFE66:
 256              		.section	.text.HAL_LIN_Init,"ax",%progbits
 257              		.align	1
 258              		.global	HAL_LIN_Init
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 263              	HAL_LIN_Init:
 264              	.LFB67:
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 265              		.loc 1 505 1
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              	.LCFI10:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
 274 0002 82B0     		sub	sp, sp, #8
 275              	.LCFI11:
 276              		.cfi_def_cfa_offset 16
 277 0004 00AF     		add	r7, sp, #0
 278              	.LCFI12:
 279              		.cfi_def_cfa_register 7
 280 0006 7860     		str	r0, [r7, #4]
 281 0008 3960     		str	r1, [r7]
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 282              		.loc 1 507 6
 283 000a 7B68     		ldr	r3, [r7, #4]
 284 000c 002B     		cmp	r3, #0
 285 000e 01D1     		bne	.L10
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 286              		.loc 1 509 12
 287 0010 0123     		movs	r3, #1
 288 0012 57E0     		b	.L11
 289              	.L10:
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the LIN UART instance */
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 15


 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Break detection length parameter */
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 290              		.loc 1 522 12
 291 0014 7B68     		ldr	r3, [r7, #4]
 292 0016 93F83D30 		ldrb	r3, [r3, #61]
 293 001a DBB2     		uxtb	r3, r3
 294              		.loc 1 522 6
 295 001c 002B     		cmp	r3, #0
 296 001e 06D1     		bne	.L12
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 297              		.loc 1 525 17
 298 0020 7B68     		ldr	r3, [r7, #4]
 299 0022 0022     		movs	r2, #0
 300 0024 83F83C20 		strb	r2, [r3, #60]
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 301              		.loc 1 539 5
 302 0028 7868     		ldr	r0, [r7, #4]
 303 002a FFF7FEFF 		bl	HAL_UART_MspInit
 304              	.L12:
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 305              		.loc 1 543 17
 306 002e 7B68     		ldr	r3, [r7, #4]
 307 0030 2422     		movs	r2, #36
 308 0032 83F83D20 		strb	r2, [r3, #61]
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 309              		.loc 1 546 3
 310 0036 7B68     		ldr	r3, [r7, #4]
 311 0038 1B68     		ldr	r3, [r3]
 312 003a DA68     		ldr	r2, [r3, #12]
 313 003c 7B68     		ldr	r3, [r7, #4]
 314 003e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 16


 315 0040 22F40052 		bic	r2, r2, #8192
 316 0044 DA60     		str	r2, [r3, #12]
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 317              		.loc 1 549 3
 318 0046 7868     		ldr	r0, [r7, #4]
 319 0048 FFF7FEFF 		bl	UART_SetConfig
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 320              		.loc 1 554 3
 321 004c 7B68     		ldr	r3, [r7, #4]
 322 004e 1B68     		ldr	r3, [r3]
 323 0050 1A69     		ldr	r2, [r3, #16]
 324 0052 7B68     		ldr	r3, [r7, #4]
 325 0054 1B68     		ldr	r3, [r3]
 326 0056 22F40062 		bic	r2, r2, #2048
 327 005a 1A61     		str	r2, [r3, #16]
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 328              		.loc 1 555 3
 329 005c 7B68     		ldr	r3, [r7, #4]
 330 005e 1B68     		ldr	r3, [r3]
 331 0060 5A69     		ldr	r2, [r3, #20]
 332 0062 7B68     		ldr	r3, [r7, #4]
 333 0064 1B68     		ldr	r3, [r3]
 334 0066 22F02A02 		bic	r2, r2, #42
 335 006a 5A61     		str	r2, [r3, #20]
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 336              		.loc 1 558 3
 337 006c 7B68     		ldr	r3, [r7, #4]
 338 006e 1B68     		ldr	r3, [r3]
 339 0070 1A69     		ldr	r2, [r3, #16]
 340 0072 7B68     		ldr	r3, [r7, #4]
 341 0074 1B68     		ldr	r3, [r3]
 342 0076 42F48042 		orr	r2, r2, #16384
 343 007a 1A61     		str	r2, [r3, #16]
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 344              		.loc 1 561 3
 345 007c 7B68     		ldr	r3, [r7, #4]
 346 007e 1B68     		ldr	r3, [r3]
 347 0080 1A69     		ldr	r2, [r3, #16]
 348 0082 7B68     		ldr	r3, [r7, #4]
 349 0084 1B68     		ldr	r3, [r3]
 350 0086 22F02002 		bic	r2, r2, #32
 351 008a 1A61     		str	r2, [r3, #16]
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 352              		.loc 1 562 3
 353 008c 7B68     		ldr	r3, [r7, #4]
 354 008e 1B68     		ldr	r3, [r3]
 355 0090 1969     		ldr	r1, [r3, #16]
ARM GAS  /tmp/ccKkagmp.s 			page 17


 356 0092 7B68     		ldr	r3, [r7, #4]
 357 0094 1B68     		ldr	r3, [r3]
 358 0096 3A68     		ldr	r2, [r7]
 359 0098 0A43     		orrs	r2, r2, r1
 360 009a 1A61     		str	r2, [r3, #16]
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 361              		.loc 1 565 3
 362 009c 7B68     		ldr	r3, [r7, #4]
 363 009e 1B68     		ldr	r3, [r3]
 364 00a0 DA68     		ldr	r2, [r3, #12]
 365 00a2 7B68     		ldr	r3, [r7, #4]
 366 00a4 1B68     		ldr	r3, [r3]
 367 00a6 42F40052 		orr	r2, r2, #8192
 368 00aa DA60     		str	r2, [r3, #12]
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 369              		.loc 1 568 20
 370 00ac 7B68     		ldr	r3, [r7, #4]
 371 00ae 0022     		movs	r2, #0
 372 00b0 1A64     		str	r2, [r3, #64]
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 373              		.loc 1 569 17
 374 00b2 7B68     		ldr	r3, [r7, #4]
 375 00b4 2022     		movs	r2, #32
 376 00b6 83F83D20 		strb	r2, [r3, #61]
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 377              		.loc 1 570 18
 378 00ba 7B68     		ldr	r3, [r7, #4]
 379 00bc 2022     		movs	r2, #32
 380 00be 83F83E20 		strb	r2, [r3, #62]
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 381              		.loc 1 572 10
 382 00c2 0023     		movs	r3, #0
 383              	.L11:
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 384              		.loc 1 573 1
 385 00c4 1846     		mov	r0, r3
 386 00c6 0837     		adds	r7, r7, #8
 387              	.LCFI13:
 388              		.cfi_def_cfa_offset 8
 389 00c8 BD46     		mov	sp, r7
 390              	.LCFI14:
 391              		.cfi_def_cfa_register 13
 392              		@ sp needed
 393 00ca 80BD     		pop	{r7, pc}
 394              		.cfi_endproc
 395              	.LFE67:
 397              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 398              		.align	1
 399              		.global	HAL_MultiProcessor_Init
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
ARM GAS  /tmp/ccKkagmp.s 			page 18


 404              	HAL_MultiProcessor_Init:
 405              	.LFB68:
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Address USART address
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 406              		.loc 1 588 1
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 16
 409              		@ frame_needed = 1, uses_anonymous_args = 0
 410 0000 80B5     		push	{r7, lr}
 411              	.LCFI15:
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 7, -8
 414              		.cfi_offset 14, -4
 415 0002 84B0     		sub	sp, sp, #16
 416              	.LCFI16:
 417              		.cfi_def_cfa_offset 24
 418 0004 00AF     		add	r7, sp, #0
 419              	.LCFI17:
 420              		.cfi_def_cfa_register 7
 421 0006 F860     		str	r0, [r7, #12]
 422 0008 0B46     		mov	r3, r1
 423 000a 7A60     		str	r2, [r7, #4]
 424 000c FB72     		strb	r3, [r7, #11]
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 425              		.loc 1 590 6
 426 000e FB68     		ldr	r3, [r7, #12]
 427 0010 002B     		cmp	r3, #0
 428 0012 01D1     		bne	.L14
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 429              		.loc 1 592 12
 430 0014 0123     		movs	r3, #1
 431 0016 5FE0     		b	.L15
 432              	.L14:
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
ARM GAS  /tmp/ccKkagmp.s 			page 19


 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 433              		.loc 1 606 12
 434 0018 FB68     		ldr	r3, [r7, #12]
 435 001a 93F83D30 		ldrb	r3, [r3, #61]
 436 001e DBB2     		uxtb	r3, r3
 437              		.loc 1 606 6
 438 0020 002B     		cmp	r3, #0
 439 0022 06D1     		bne	.L16
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 440              		.loc 1 609 17
 441 0024 FB68     		ldr	r3, [r7, #12]
 442 0026 0022     		movs	r2, #0
 443 0028 83F83C20 		strb	r2, [r3, #60]
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 444              		.loc 1 623 5
 445 002c F868     		ldr	r0, [r7, #12]
 446 002e FFF7FEFF 		bl	HAL_UART_MspInit
 447              	.L16:
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 448              		.loc 1 627 17
 449 0032 FB68     		ldr	r3, [r7, #12]
 450 0034 2422     		movs	r2, #36
 451 0036 83F83D20 		strb	r2, [r3, #61]
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 452              		.loc 1 630 3
 453 003a FB68     		ldr	r3, [r7, #12]
 454 003c 1B68     		ldr	r3, [r3]
 455 003e DA68     		ldr	r2, [r3, #12]
 456 0040 FB68     		ldr	r3, [r7, #12]
 457 0042 1B68     		ldr	r3, [r3]
 458 0044 22F40052 		bic	r2, r2, #8192
 459 0048 DA60     		str	r2, [r3, #12]
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 20


 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 460              		.loc 1 633 3
 461 004a F868     		ldr	r0, [r7, #12]
 462 004c FFF7FEFF 		bl	UART_SetConfig
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 463              		.loc 1 638 3
 464 0050 FB68     		ldr	r3, [r7, #12]
 465 0052 1B68     		ldr	r3, [r3]
 466 0054 1A69     		ldr	r2, [r3, #16]
 467 0056 FB68     		ldr	r3, [r7, #12]
 468 0058 1B68     		ldr	r3, [r3]
 469 005a 22F49042 		bic	r2, r2, #18432
 470 005e 1A61     		str	r2, [r3, #16]
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 471              		.loc 1 639 3
 472 0060 FB68     		ldr	r3, [r7, #12]
 473 0062 1B68     		ldr	r3, [r3]
 474 0064 5A69     		ldr	r2, [r3, #20]
 475 0066 FB68     		ldr	r3, [r7, #12]
 476 0068 1B68     		ldr	r3, [r3]
 477 006a 22F02A02 		bic	r2, r2, #42
 478 006e 5A61     		str	r2, [r3, #20]
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART address node */
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 479              		.loc 1 642 3
 480 0070 FB68     		ldr	r3, [r7, #12]
 481 0072 1B68     		ldr	r3, [r3]
 482 0074 1A69     		ldr	r2, [r3, #16]
 483 0076 FB68     		ldr	r3, [r7, #12]
 484 0078 1B68     		ldr	r3, [r3]
 485 007a 22F00F02 		bic	r2, r2, #15
 486 007e 1A61     		str	r2, [r3, #16]
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 487              		.loc 1 643 3
 488 0080 FB68     		ldr	r3, [r7, #12]
 489 0082 1B68     		ldr	r3, [r3]
 490 0084 1969     		ldr	r1, [r3, #16]
 491 0086 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 492 0088 FB68     		ldr	r3, [r7, #12]
 493 008a 1B68     		ldr	r3, [r3]
 494 008c 0A43     		orrs	r2, r2, r1
 495 008e 1A61     		str	r2, [r3, #16]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 496              		.loc 1 646 3
 497 0090 FB68     		ldr	r3, [r7, #12]
 498 0092 1B68     		ldr	r3, [r3]
 499 0094 DA68     		ldr	r2, [r3, #12]
 500 0096 FB68     		ldr	r3, [r7, #12]
 501 0098 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 21


 502 009a 22F40062 		bic	r2, r2, #2048
 503 009e DA60     		str	r2, [r3, #12]
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 504              		.loc 1 647 3
 505 00a0 FB68     		ldr	r3, [r7, #12]
 506 00a2 1B68     		ldr	r3, [r3]
 507 00a4 D968     		ldr	r1, [r3, #12]
 508 00a6 FB68     		ldr	r3, [r7, #12]
 509 00a8 1B68     		ldr	r3, [r3]
 510 00aa 7A68     		ldr	r2, [r7, #4]
 511 00ac 0A43     		orrs	r2, r2, r1
 512 00ae DA60     		str	r2, [r3, #12]
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 513              		.loc 1 650 3
 514 00b0 FB68     		ldr	r3, [r7, #12]
 515 00b2 1B68     		ldr	r3, [r3]
 516 00b4 DA68     		ldr	r2, [r3, #12]
 517 00b6 FB68     		ldr	r3, [r7, #12]
 518 00b8 1B68     		ldr	r3, [r3]
 519 00ba 42F40052 		orr	r2, r2, #8192
 520 00be DA60     		str	r2, [r3, #12]
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 521              		.loc 1 653 20
 522 00c0 FB68     		ldr	r3, [r7, #12]
 523 00c2 0022     		movs	r2, #0
 524 00c4 1A64     		str	r2, [r3, #64]
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 525              		.loc 1 654 17
 526 00c6 FB68     		ldr	r3, [r7, #12]
 527 00c8 2022     		movs	r2, #32
 528 00ca 83F83D20 		strb	r2, [r3, #61]
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 529              		.loc 1 655 18
 530 00ce FB68     		ldr	r3, [r7, #12]
 531 00d0 2022     		movs	r2, #32
 532 00d2 83F83E20 		strb	r2, [r3, #62]
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 533              		.loc 1 657 10
 534 00d6 0023     		movs	r3, #0
 535              	.L15:
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 536              		.loc 1 658 1
 537 00d8 1846     		mov	r0, r3
 538 00da 1037     		adds	r7, r7, #16
 539              	.LCFI18:
 540              		.cfi_def_cfa_offset 8
 541 00dc BD46     		mov	sp, r7
 542              	.LCFI19:
 543              		.cfi_def_cfa_register 13
 544              		@ sp needed
 545 00de 80BD     		pop	{r7, pc}
 546              		.cfi_endproc
ARM GAS  /tmp/ccKkagmp.s 			page 22


 547              	.LFE68:
 549              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 550              		.align	1
 551              		.global	HAL_UART_DeInit
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 556              	HAL_UART_DeInit:
 557              	.LFB69:
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 558              		.loc 1 667 1
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 8
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562 0000 80B5     		push	{r7, lr}
 563              	.LCFI20:
 564              		.cfi_def_cfa_offset 8
 565              		.cfi_offset 7, -8
 566              		.cfi_offset 14, -4
 567 0002 82B0     		sub	sp, sp, #8
 568              	.LCFI21:
 569              		.cfi_def_cfa_offset 16
 570 0004 00AF     		add	r7, sp, #0
 571              	.LCFI22:
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 574              		.loc 1 669 6
 575 0008 7B68     		ldr	r3, [r7, #4]
 576 000a 002B     		cmp	r3, #0
 577 000c 01D1     		bne	.L18
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 578              		.loc 1 671 12
 579 000e 0123     		movs	r3, #1
 580 0010 21E0     		b	.L19
 581              	.L18:
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 582              		.loc 1 677 17
 583 0012 7B68     		ldr	r3, [r7, #4]
 584 0014 2422     		movs	r2, #36
 585 0016 83F83D20 		strb	r2, [r3, #61]
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 23


 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the Peripheral */
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 586              		.loc 1 680 3
 587 001a 7B68     		ldr	r3, [r7, #4]
 588 001c 1B68     		ldr	r3, [r3]
 589 001e DA68     		ldr	r2, [r3, #12]
 590 0020 7B68     		ldr	r3, [r7, #4]
 591 0022 1B68     		ldr	r3, [r3]
 592 0024 22F40052 		bic	r2, r2, #8192
 593 0028 DA60     		str	r2, [r3, #12]
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 594              		.loc 1 691 3
 595 002a 7868     		ldr	r0, [r7, #4]
 596 002c FFF7FEFF 		bl	HAL_UART_MspDeInit
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 597              		.loc 1 694 20
 598 0030 7B68     		ldr	r3, [r7, #4]
 599 0032 0022     		movs	r2, #0
 600 0034 1A64     		str	r2, [r3, #64]
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 601              		.loc 1 695 17
 602 0036 7B68     		ldr	r3, [r7, #4]
 603 0038 0022     		movs	r2, #0
 604 003a 83F83D20 		strb	r2, [r3, #61]
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 605              		.loc 1 696 18
 606 003e 7B68     		ldr	r3, [r7, #4]
 607 0040 0022     		movs	r2, #0
 608 0042 83F83E20 		strb	r2, [r3, #62]
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 609              		.loc 1 697 24
 610 0046 7B68     		ldr	r3, [r7, #4]
 611 0048 0022     		movs	r2, #0
 612 004a 1A63     		str	r2, [r3, #48]
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlock */
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 613              		.loc 1 700 3
 614 004c 7B68     		ldr	r3, [r7, #4]
 615 004e 0022     		movs	r2, #0
 616 0050 83F83C20 		strb	r2, [r3, #60]
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 617              		.loc 1 702 10
 618 0054 0023     		movs	r3, #0
ARM GAS  /tmp/ccKkagmp.s 			page 24


 619              	.L19:
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 620              		.loc 1 703 1
 621 0056 1846     		mov	r0, r3
 622 0058 0837     		adds	r7, r7, #8
 623              	.LCFI23:
 624              		.cfi_def_cfa_offset 8
 625 005a BD46     		mov	sp, r7
 626              	.LCFI24:
 627              		.cfi_def_cfa_register 13
 628              		@ sp needed
 629 005c 80BD     		pop	{r7, pc}
 630              		.cfi_endproc
 631              	.LFE69:
 633              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 634              		.align	1
 635              		.weak	HAL_UART_MspInit
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 640              	HAL_UART_MspInit:
 641              	.LFB70:
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP Init.
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 642              		.loc 1 712 1
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 8
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647 0000 80B4     		push	{r7}
 648              	.LCFI25:
 649              		.cfi_def_cfa_offset 4
 650              		.cfi_offset 7, -4
 651 0002 83B0     		sub	sp, sp, #12
 652              	.LCFI26:
 653              		.cfi_def_cfa_offset 16
 654 0004 00AF     		add	r7, sp, #0
 655              	.LCFI27:
 656              		.cfi_def_cfa_register 7
 657 0006 7860     		str	r0, [r7, #4]
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 658              		.loc 1 718 1
 659 0008 00BF     		nop
 660 000a 0C37     		adds	r7, r7, #12
 661              	.LCFI28:
ARM GAS  /tmp/ccKkagmp.s 			page 25


 662              		.cfi_def_cfa_offset 4
 663 000c BD46     		mov	sp, r7
 664              	.LCFI29:
 665              		.cfi_def_cfa_register 13
 666              		@ sp needed
 667 000e 80BC     		pop	{r7}
 668              	.LCFI30:
 669              		.cfi_restore 7
 670              		.cfi_def_cfa_offset 0
 671 0010 7047     		bx	lr
 672              		.cfi_endproc
 673              	.LFE70:
 675              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 676              		.align	1
 677              		.weak	HAL_UART_MspDeInit
 678              		.syntax unified
 679              		.thumb
 680              		.thumb_func
 682              	HAL_UART_MspDeInit:
 683              	.LFB71:
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 684              		.loc 1 727 1
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 8
 687              		@ frame_needed = 1, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 689 0000 80B4     		push	{r7}
 690              	.LCFI31:
 691              		.cfi_def_cfa_offset 4
 692              		.cfi_offset 7, -4
 693 0002 83B0     		sub	sp, sp, #12
 694              	.LCFI32:
 695              		.cfi_def_cfa_offset 16
 696 0004 00AF     		add	r7, sp, #0
 697              	.LCFI33:
 698              		.cfi_def_cfa_register 7
 699 0006 7860     		str	r0, [r7, #4]
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 700              		.loc 1 733 1
 701 0008 00BF     		nop
 702 000a 0C37     		adds	r7, r7, #12
 703              	.LCFI34:
 704              		.cfi_def_cfa_offset 4
 705 000c BD46     		mov	sp, r7
ARM GAS  /tmp/ccKkagmp.s 			page 26


 706              	.LCFI35:
 707              		.cfi_def_cfa_register 13
 708              		@ sp needed
 709 000e 80BC     		pop	{r7}
 710              	.LCFI36:
 711              		.cfi_restore 7
 712              		.cfi_def_cfa_offset 0
 713 0010 7047     		bx	lr
 714              		.cfi_endproc
 715              	.LFE71:
 717              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 718              		.align	1
 719              		.global	HAL_UART_Transmit
 720              		.syntax unified
 721              		.thumb
 722              		.thumb_func
 724              	HAL_UART_Transmit:
 725              	.LFB72:
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Callback
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
ARM GAS  /tmp/ccKkagmp.s 			page 27


 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 28


 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
ARM GAS  /tmp/ccKkagmp.s 			page 29


 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 30


 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Rx Event Callback
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback Pointer to the Rx Event Callback function
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallback
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = pCallback;
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 31


1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UnRegister the UART Rx Event Callback
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Rx Event Callback is redirected to the weak HAL_UARTEx_RxEventCallback() predefine
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterRxEventCallback(UART_HandleTypeDef *huart)
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### IO operation functions #####
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and Half duplex data transfers.
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two modes of transfer:
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            after finishing transfer.
ARM GAS  /tmp/ccKkagmp.s 			page 32


1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or DMA, these API's return the HAL status.
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            using DMA mode.
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API's are :
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive()
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort()
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A Rx Event Reception Callback (Rx event notification) is available for Non_Blocking modes o
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_RxEventCallback()
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Errors are handled as follows :
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
ARM GAS  /tmp/ccKkagmp.s 			page 33


1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 726              		.loc 1 1137 1
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 32
 729              		@ frame_needed = 1, uses_anonymous_args = 0
 730 0000 80B5     		push	{r7, lr}
 731              	.LCFI37:
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 7, -8
 734              		.cfi_offset 14, -4
 735 0002 8AB0     		sub	sp, sp, #40
 736              	.LCFI38:
 737              		.cfi_def_cfa_offset 48
 738 0004 02AF     		add	r7, sp, #8
 739              	.LCFI39:
 740              		.cfi_def_cfa 7, 40
 741 0006 F860     		str	r0, [r7, #12]
 742 0008 B960     		str	r1, [r7, #8]
 743 000a 3B60     		str	r3, [r7]
 744 000c 1346     		mov	r3, r2	@ movhi
 745 000e FB80     		strh	r3, [r7, #6]	@ movhi
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 746              		.loc 1 1140 12
 747 0010 0023     		movs	r3, #0
 748 0012 7B61     		str	r3, [r7, #20]
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 749              		.loc 1 1143 12
 750 0014 FB68     		ldr	r3, [r7, #12]
 751 0016 93F83D30 		ldrb	r3, [r3, #61]
 752 001a DBB2     		uxtb	r3, r3
 753              		.loc 1 1143 6
ARM GAS  /tmp/ccKkagmp.s 			page 34


 754 001c 202B     		cmp	r3, #32
 755 001e 7CD1     		bne	.L23
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 756              		.loc 1 1145 8
 757 0020 BB68     		ldr	r3, [r7, #8]
 758 0022 002B     		cmp	r3, #0
 759 0024 02D0     		beq	.L24
 760              		.loc 1 1145 25 discriminator 1
 761 0026 FB88     		ldrh	r3, [r7, #6]
 762 0028 002B     		cmp	r3, #0
 763 002a 01D1     		bne	.L25
 764              	.L24:
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 765              		.loc 1 1147 15
 766 002c 0123     		movs	r3, #1
 767 002e 75E0     		b	.L26
 768              	.L25:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 769              		.loc 1 1151 5
 770 0030 FB68     		ldr	r3, [r7, #12]
 771 0032 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 772 0036 012B     		cmp	r3, #1
 773 0038 01D1     		bne	.L27
 774              		.loc 1 1151 5 is_stmt 0 discriminator 1
 775 003a 0223     		movs	r3, #2
 776 003c 6EE0     		b	.L26
 777              	.L27:
 778              		.loc 1 1151 5 discriminator 2
 779 003e FB68     		ldr	r3, [r7, #12]
 780 0040 0122     		movs	r2, #1
 781 0042 83F83C20 		strb	r2, [r3, #60]
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 782              		.loc 1 1153 22 is_stmt 1 discriminator 2
 783 0046 FB68     		ldr	r3, [r7, #12]
 784 0048 0022     		movs	r2, #0
 785 004a 1A64     		str	r2, [r3, #64]
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 786              		.loc 1 1154 19 discriminator 2
 787 004c FB68     		ldr	r3, [r7, #12]
 788 004e 2122     		movs	r2, #33
 789 0050 83F83D20 		strb	r2, [r3, #61]
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 790              		.loc 1 1157 17 discriminator 2
 791 0054 FFF7FEFF 		bl	HAL_GetTick
 792 0058 7861     		str	r0, [r7, #20]
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 793              		.loc 1 1159 23 discriminator 2
 794 005a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 35


 795 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 796 005e 9A84     		strh	r2, [r3, #36]	@ movhi
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 797              		.loc 1 1160 24 discriminator 2
 798 0060 FB68     		ldr	r3, [r7, #12]
 799 0062 FA88     		ldrh	r2, [r7, #6]	@ movhi
 800 0064 DA84     		strh	r2, [r3, #38]	@ movhi
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801              		.loc 1 1163 21 discriminator 2
 802 0066 FB68     		ldr	r3, [r7, #12]
 803 0068 9B68     		ldr	r3, [r3, #8]
 804              		.loc 1 1163 8 discriminator 2
 805 006a B3F5805F 		cmp	r3, #4096
 806 006e 08D1     		bne	.L28
 807              		.loc 1 1163 71 discriminator 1
 808 0070 FB68     		ldr	r3, [r7, #12]
 809 0072 1B69     		ldr	r3, [r3, #16]
 810              		.loc 1 1163 56 discriminator 1
 811 0074 002B     		cmp	r3, #0
 812 0076 04D1     		bne	.L28
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 813              		.loc 1 1165 19
 814 0078 0023     		movs	r3, #0
 815 007a FB61     		str	r3, [r7, #28]
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 816              		.loc 1 1166 19
 817 007c BB68     		ldr	r3, [r7, #8]
 818 007e BB61     		str	r3, [r7, #24]
 819 0080 03E0     		b	.L29
 820              	.L28:
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 821              		.loc 1 1170 19
 822 0082 BB68     		ldr	r3, [r7, #8]
 823 0084 FB61     		str	r3, [r7, #28]
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 824              		.loc 1 1171 19
 825 0086 0023     		movs	r3, #0
 826 0088 BB61     		str	r3, [r7, #24]
 827              	.L29:
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 828              		.loc 1 1175 5
 829 008a FB68     		ldr	r3, [r7, #12]
 830 008c 0022     		movs	r2, #0
 831 008e 83F83C20 		strb	r2, [r3, #60]
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 832              		.loc 1 1177 11
 833 0092 2AE0     		b	.L30
ARM GAS  /tmp/ccKkagmp.s 			page 36


 834              	.L34:
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 835              		.loc 1 1179 11
 836 0094 3B68     		ldr	r3, [r7]
 837 0096 0093     		str	r3, [sp]
 838 0098 7B69     		ldr	r3, [r7, #20]
 839 009a 0022     		movs	r2, #0
 840 009c 8021     		movs	r1, #128
 841 009e F868     		ldr	r0, [r7, #12]
 842 00a0 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 843 00a4 0346     		mov	r3, r0
 844              		.loc 1 1179 10
 845 00a6 002B     		cmp	r3, #0
 846 00a8 01D0     		beq	.L31
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 847              		.loc 1 1181 16
 848 00aa 0323     		movs	r3, #3
 849 00ac 36E0     		b	.L26
 850              	.L31:
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 851              		.loc 1 1183 10
 852 00ae FB69     		ldr	r3, [r7, #28]
 853 00b0 002B     		cmp	r3, #0
 854 00b2 0BD1     		bne	.L32
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 855              		.loc 1 1185 42
 856 00b4 BB69     		ldr	r3, [r7, #24]
 857 00b6 1B88     		ldrh	r3, [r3]
 858              		.loc 1 1185 31
 859 00b8 1A46     		mov	r2, r3
 860              		.loc 1 1185 14
 861 00ba FB68     		ldr	r3, [r7, #12]
 862 00bc 1B68     		ldr	r3, [r3]
 863              		.loc 1 1185 31
 864 00be C2F30802 		ubfx	r2, r2, #0, #9
 865              		.loc 1 1185 29
 866 00c2 5A60     		str	r2, [r3, #4]
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 867              		.loc 1 1186 20
 868 00c4 BB69     		ldr	r3, [r7, #24]
 869 00c6 0233     		adds	r3, r3, #2
 870 00c8 BB61     		str	r3, [r7, #24]
 871 00ca 07E0     		b	.L33
 872              	.L32:
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 873              		.loc 1 1190 41
 874 00cc FB69     		ldr	r3, [r7, #28]
 875 00ce 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 876              		.loc 1 1190 14
 877 00d0 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 37


 878 00d2 1B68     		ldr	r3, [r3]
 879              		.loc 1 1190 29
 880 00d4 5A60     		str	r2, [r3, #4]
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 881              		.loc 1 1191 19
 882 00d6 FB69     		ldr	r3, [r7, #28]
 883 00d8 0133     		adds	r3, r3, #1
 884 00da FB61     		str	r3, [r7, #28]
 885              	.L33:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount--;
 886              		.loc 1 1193 12
 887 00dc FB68     		ldr	r3, [r7, #12]
 888 00de DB8C     		ldrh	r3, [r3, #38]	@ movhi
 889 00e0 9BB2     		uxth	r3, r3
 890              		.loc 1 1193 25
 891 00e2 013B     		subs	r3, r3, #1
 892 00e4 9AB2     		uxth	r2, r3
 893 00e6 FB68     		ldr	r3, [r7, #12]
 894 00e8 DA84     		strh	r2, [r3, #38]	@ movhi
 895              	.L30:
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 896              		.loc 1 1177 17
 897 00ea FB68     		ldr	r3, [r7, #12]
 898 00ec DB8C     		ldrh	r3, [r3, #38]	@ movhi
 899 00ee 9BB2     		uxth	r3, r3
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 900              		.loc 1 1177 11
 901 00f0 002B     		cmp	r3, #0
 902 00f2 CFD1     		bne	.L34
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 903              		.loc 1 1196 9
 904 00f4 3B68     		ldr	r3, [r7]
 905 00f6 0093     		str	r3, [sp]
 906 00f8 7B69     		ldr	r3, [r7, #20]
 907 00fa 0022     		movs	r2, #0
 908 00fc 4021     		movs	r1, #64
 909 00fe F868     		ldr	r0, [r7, #12]
 910 0100 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 911 0104 0346     		mov	r3, r0
 912              		.loc 1 1196 8
 913 0106 002B     		cmp	r3, #0
 914 0108 01D0     		beq	.L35
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_TIMEOUT;
 915              		.loc 1 1198 14
 916 010a 0323     		movs	r3, #3
 917 010c 06E0     		b	.L26
 918              	.L35:
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 919              		.loc 1 1202 19
 920 010e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 38


 921 0110 2022     		movs	r2, #32
 922 0112 83F83D20 		strb	r2, [r3, #61]
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 923              		.loc 1 1204 12
 924 0116 0023     		movs	r3, #0
 925 0118 00E0     		b	.L26
 926              	.L23:
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 927              		.loc 1 1208 12
 928 011a 0223     		movs	r3, #2
 929              	.L26:
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 930              		.loc 1 1210 1
 931 011c 1846     		mov	r0, r3
 932 011e 2037     		adds	r7, r7, #32
 933              	.LCFI40:
 934              		.cfi_def_cfa_offset 8
 935 0120 BD46     		mov	sp, r7
 936              	.LCFI41:
 937              		.cfi_def_cfa_register 13
 938              		@ sp needed
 939 0122 80BD     		pop	{r7, pc}
 940              		.cfi_endproc
 941              	.LFE72:
 943              		.section	.text.HAL_UART_Receive,"ax",%progbits
 944              		.align	1
 945              		.global	HAL_UART_Receive
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 950              	HAL_UART_Receive:
 951              	.LFB73:
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 952              		.loc 1 1225 1
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 32
 955              		@ frame_needed = 1, uses_anonymous_args = 0
 956 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccKkagmp.s 			page 39


 957              	.LCFI42:
 958              		.cfi_def_cfa_offset 8
 959              		.cfi_offset 7, -8
 960              		.cfi_offset 14, -4
 961 0002 8AB0     		sub	sp, sp, #40
 962              	.LCFI43:
 963              		.cfi_def_cfa_offset 48
 964 0004 02AF     		add	r7, sp, #8
 965              	.LCFI44:
 966              		.cfi_def_cfa 7, 40
 967 0006 F860     		str	r0, [r7, #12]
 968 0008 B960     		str	r1, [r7, #8]
 969 000a 3B60     		str	r3, [r7]
 970 000c 1346     		mov	r3, r2	@ movhi
 971 000e FB80     		strh	r3, [r7, #6]	@ movhi
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 972              		.loc 1 1228 12
 973 0010 0023     		movs	r3, #0
 974 0012 7B61     		str	r3, [r7, #20]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 975              		.loc 1 1231 12
 976 0014 FB68     		ldr	r3, [r7, #12]
 977 0016 93F83E30 		ldrb	r3, [r3, #62]
 978 001a DBB2     		uxtb	r3, r3
 979              		.loc 1 1231 6
 980 001c 202B     		cmp	r3, #32
 981 001e 40F08C80 		bne	.L37
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 982              		.loc 1 1233 8
 983 0022 BB68     		ldr	r3, [r7, #8]
 984 0024 002B     		cmp	r3, #0
 985 0026 02D0     		beq	.L38
 986              		.loc 1 1233 25 discriminator 1
 987 0028 FB88     		ldrh	r3, [r7, #6]
 988 002a 002B     		cmp	r3, #0
 989 002c 01D1     		bne	.L39
 990              	.L38:
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 991              		.loc 1 1235 15
 992 002e 0123     		movs	r3, #1
 993 0030 84E0     		b	.L40
 994              	.L39:
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 995              		.loc 1 1239 5
 996 0032 FB68     		ldr	r3, [r7, #12]
 997 0034 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 998 0038 012B     		cmp	r3, #1
 999 003a 01D1     		bne	.L41
ARM GAS  /tmp/ccKkagmp.s 			page 40


 1000              		.loc 1 1239 5 is_stmt 0 discriminator 1
 1001 003c 0223     		movs	r3, #2
 1002 003e 7DE0     		b	.L40
 1003              	.L41:
 1004              		.loc 1 1239 5 discriminator 2
 1005 0040 FB68     		ldr	r3, [r7, #12]
 1006 0042 0122     		movs	r2, #1
 1007 0044 83F83C20 		strb	r2, [r3, #60]
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1008              		.loc 1 1241 22 is_stmt 1 discriminator 2
 1009 0048 FB68     		ldr	r3, [r7, #12]
 1010 004a 0022     		movs	r2, #0
 1011 004c 1A64     		str	r2, [r3, #64]
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1012              		.loc 1 1242 20 discriminator 2
 1013 004e FB68     		ldr	r3, [r7, #12]
 1014 0050 2222     		movs	r2, #34
 1015 0052 83F83E20 		strb	r2, [r3, #62]
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1016              		.loc 1 1243 26 discriminator 2
 1017 0056 FB68     		ldr	r3, [r7, #12]
 1018 0058 0022     		movs	r2, #0
 1019 005a 1A63     		str	r2, [r3, #48]
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 1020              		.loc 1 1246 17 discriminator 2
 1021 005c FFF7FEFF 		bl	HAL_GetTick
 1022 0060 7861     		str	r0, [r7, #20]
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1023              		.loc 1 1248 23 discriminator 2
 1024 0062 FB68     		ldr	r3, [r7, #12]
 1025 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1026 0066 9A85     		strh	r2, [r3, #44]	@ movhi
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1027              		.loc 1 1249 24 discriminator 2
 1028 0068 FB68     		ldr	r3, [r7, #12]
 1029 006a FA88     		ldrh	r2, [r7, #6]	@ movhi
 1030 006c DA85     		strh	r2, [r3, #46]	@ movhi
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1031              		.loc 1 1252 21 discriminator 2
 1032 006e FB68     		ldr	r3, [r7, #12]
 1033 0070 9B68     		ldr	r3, [r3, #8]
 1034              		.loc 1 1252 8 discriminator 2
 1035 0072 B3F5805F 		cmp	r3, #4096
 1036 0076 08D1     		bne	.L42
 1037              		.loc 1 1252 71 discriminator 1
 1038 0078 FB68     		ldr	r3, [r7, #12]
 1039 007a 1B69     		ldr	r3, [r3, #16]
 1040              		.loc 1 1252 56 discriminator 1
 1041 007c 002B     		cmp	r3, #0
 1042 007e 04D1     		bne	.L42
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
ARM GAS  /tmp/ccKkagmp.s 			page 41


1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 1043              		.loc 1 1254 19
 1044 0080 0023     		movs	r3, #0
 1045 0082 FB61     		str	r3, [r7, #28]
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 1046              		.loc 1 1255 19
 1047 0084 BB68     		ldr	r3, [r7, #8]
 1048 0086 BB61     		str	r3, [r7, #24]
 1049 0088 03E0     		b	.L43
 1050              	.L42:
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 1051              		.loc 1 1259 19
 1052 008a BB68     		ldr	r3, [r7, #8]
 1053 008c FB61     		str	r3, [r7, #28]
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 1054              		.loc 1 1260 19
 1055 008e 0023     		movs	r3, #0
 1056 0090 BB61     		str	r3, [r7, #24]
 1057              	.L43:
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1058              		.loc 1 1264 5
 1059 0092 FB68     		ldr	r3, [r7, #12]
 1060 0094 0022     		movs	r2, #0
 1061 0096 83F83C20 		strb	r2, [r3, #60]
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check the remain data to be received */
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 1062              		.loc 1 1267 11
 1063 009a 43E0     		b	.L44
 1064              	.L51:
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1065              		.loc 1 1269 11
 1066 009c 3B68     		ldr	r3, [r7]
 1067 009e 0093     		str	r3, [sp]
 1068 00a0 7B69     		ldr	r3, [r7, #20]
 1069 00a2 0022     		movs	r2, #0
 1070 00a4 2021     		movs	r1, #32
 1071 00a6 F868     		ldr	r0, [r7, #12]
 1072 00a8 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1073 00ac 0346     		mov	r3, r0
 1074              		.loc 1 1269 10
 1075 00ae 002B     		cmp	r3, #0
 1076 00b0 01D0     		beq	.L45
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 1077              		.loc 1 1271 16
 1078 00b2 0323     		movs	r3, #3
 1079 00b4 42E0     		b	.L40
 1080              	.L45:
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
ARM GAS  /tmp/ccKkagmp.s 			page 42


1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 1081              		.loc 1 1273 10
 1082 00b6 FB69     		ldr	r3, [r7, #28]
 1083 00b8 002B     		cmp	r3, #0
 1084 00ba 0CD1     		bne	.L46
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 1085              		.loc 1 1275 40
 1086 00bc FB68     		ldr	r3, [r7, #12]
 1087 00be 1B68     		ldr	r3, [r3]
 1088              		.loc 1 1275 50
 1089 00c0 5B68     		ldr	r3, [r3, #4]
 1090              		.loc 1 1275 24
 1091 00c2 9BB2     		uxth	r3, r3
 1092 00c4 C3F30803 		ubfx	r3, r3, #0, #9
 1093 00c8 9AB2     		uxth	r2, r3
 1094              		.loc 1 1275 22
 1095 00ca BB69     		ldr	r3, [r7, #24]
 1096 00cc 1A80     		strh	r2, [r3]	@ movhi
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 1097              		.loc 1 1276 20
 1098 00ce BB69     		ldr	r3, [r7, #24]
 1099 00d0 0233     		adds	r3, r3, #2
 1100 00d2 BB61     		str	r3, [r7, #24]
 1101 00d4 1FE0     		b	.L47
 1102              	.L46:
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORD
 1103              		.loc 1 1280 25
 1104 00d6 FB68     		ldr	r3, [r7, #12]
 1105 00d8 9B68     		ldr	r3, [r3, #8]
 1106              		.loc 1 1280 12
 1107 00da B3F5805F 		cmp	r3, #4096
 1108 00de 07D0     		beq	.L48
 1109              		.loc 1 1280 76 discriminator 1
 1110 00e0 FB68     		ldr	r3, [r7, #12]
 1111 00e2 9B68     		ldr	r3, [r3, #8]
 1112              		.loc 1 1280 60 discriminator 1
 1113 00e4 002B     		cmp	r3, #0
 1114 00e6 0AD1     		bne	.L49
 1115              		.loc 1 1280 126 discriminator 2
 1116 00e8 FB68     		ldr	r3, [r7, #12]
 1117 00ea 1B69     		ldr	r3, [r3, #16]
 1118              		.loc 1 1280 111 discriminator 2
 1119 00ec 002B     		cmp	r3, #0
 1120 00ee 06D1     		bne	.L49
 1121              	.L48:
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1122              		.loc 1 1282 40
 1123 00f0 FB68     		ldr	r3, [r7, #12]
 1124 00f2 1B68     		ldr	r3, [r3]
 1125              		.loc 1 1282 50
 1126 00f4 5B68     		ldr	r3, [r3, #4]
 1127              		.loc 1 1282 25
ARM GAS  /tmp/ccKkagmp.s 			page 43


 1128 00f6 DAB2     		uxtb	r2, r3
 1129              		.loc 1 1282 23
 1130 00f8 FB69     		ldr	r3, [r7, #28]
 1131 00fa 1A70     		strb	r2, [r3]
 1132 00fc 08E0     		b	.L50
 1133              	.L49:
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1134              		.loc 1 1286 40
 1135 00fe FB68     		ldr	r3, [r7, #12]
 1136 0100 1B68     		ldr	r3, [r3]
 1137              		.loc 1 1286 50
 1138 0102 5B68     		ldr	r3, [r3, #4]
 1139              		.loc 1 1286 25
 1140 0104 DBB2     		uxtb	r3, r3
 1141 0106 03F07F03 		and	r3, r3, #127
 1142 010a DAB2     		uxtb	r2, r3
 1143              		.loc 1 1286 23
 1144 010c FB69     		ldr	r3, [r7, #28]
 1145 010e 1A70     		strb	r2, [r3]
 1146              	.L50:
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 1147              		.loc 1 1288 19
 1148 0110 FB69     		ldr	r3, [r7, #28]
 1149 0112 0133     		adds	r3, r3, #1
 1150 0114 FB61     		str	r3, [r7, #28]
 1151              	.L47:
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount--;
 1152              		.loc 1 1290 12
 1153 0116 FB68     		ldr	r3, [r7, #12]
 1154 0118 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1155 011a 9BB2     		uxth	r3, r3
 1156              		.loc 1 1290 25
 1157 011c 013B     		subs	r3, r3, #1
 1158 011e 9AB2     		uxth	r2, r3
 1159 0120 FB68     		ldr	r3, [r7, #12]
 1160 0122 DA85     		strh	r2, [r3, #46]	@ movhi
 1161              	.L44:
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1162              		.loc 1 1267 17
 1163 0124 FB68     		ldr	r3, [r7, #12]
 1164 0126 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1165 0128 9BB2     		uxth	r3, r3
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1166              		.loc 1 1267 11
 1167 012a 002B     		cmp	r3, #0
 1168 012c B6D1     		bne	.L51
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1169              		.loc 1 1294 20
 1170 012e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 44


 1171 0130 2022     		movs	r2, #32
 1172 0132 83F83E20 		strb	r2, [r3, #62]
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1173              		.loc 1 1296 12
 1174 0136 0023     		movs	r3, #0
 1175 0138 00E0     		b	.L40
 1176              	.L37:
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1177              		.loc 1 1300 12
 1178 013a 0223     		movs	r3, #2
 1179              	.L40:
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1180              		.loc 1 1302 1
 1181 013c 1846     		mov	r0, r3
 1182 013e 2037     		adds	r7, r7, #32
 1183              	.LCFI45:
 1184              		.cfi_def_cfa_offset 8
 1185 0140 BD46     		mov	sp, r7
 1186              	.LCFI46:
 1187              		.cfi_def_cfa_register 13
 1188              		@ sp needed
 1189 0142 80BD     		pop	{r7, pc}
 1190              		.cfi_endproc
 1191              	.LFE73:
 1193              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1194              		.align	1
 1195              		.global	HAL_UART_Transmit_IT
 1196              		.syntax unified
 1197              		.thumb
 1198              		.thumb_func
 1200              	HAL_UART_Transmit_IT:
 1201              	.LFB74:
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1202              		.loc 1 1316 1
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 16
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206              		@ link register save eliminated.
 1207 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccKkagmp.s 			page 45


 1208              	.LCFI47:
 1209              		.cfi_def_cfa_offset 4
 1210              		.cfi_offset 7, -4
 1211 0002 85B0     		sub	sp, sp, #20
 1212              	.LCFI48:
 1213              		.cfi_def_cfa_offset 24
 1214 0004 00AF     		add	r7, sp, #0
 1215              	.LCFI49:
 1216              		.cfi_def_cfa_register 7
 1217 0006 F860     		str	r0, [r7, #12]
 1218 0008 B960     		str	r1, [r7, #8]
 1219 000a 1346     		mov	r3, r2
 1220 000c FB80     		strh	r3, [r7, #6]	@ movhi
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1221              		.loc 1 1318 12
 1222 000e FB68     		ldr	r3, [r7, #12]
 1223 0010 93F83D30 		ldrb	r3, [r3, #61]
 1224 0014 DBB2     		uxtb	r3, r3
 1225              		.loc 1 1318 6
 1226 0016 202B     		cmp	r3, #32
 1227 0018 30D1     		bne	.L53
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1228              		.loc 1 1320 8
 1229 001a BB68     		ldr	r3, [r7, #8]
 1230 001c 002B     		cmp	r3, #0
 1231 001e 02D0     		beq	.L54
 1232              		.loc 1 1320 25 discriminator 1
 1233 0020 FB88     		ldrh	r3, [r7, #6]
 1234 0022 002B     		cmp	r3, #0
 1235 0024 01D1     		bne	.L55
 1236              	.L54:
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1237              		.loc 1 1322 14
 1238 0026 0123     		movs	r3, #1
 1239 0028 29E0     		b	.L56
 1240              	.L55:
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1241              		.loc 1 1326 5
 1242 002a FB68     		ldr	r3, [r7, #12]
 1243 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1244 0030 012B     		cmp	r3, #1
 1245 0032 01D1     		bne	.L57
 1246              		.loc 1 1326 5 is_stmt 0 discriminator 1
 1247 0034 0223     		movs	r3, #2
 1248 0036 22E0     		b	.L56
 1249              	.L57:
 1250              		.loc 1 1326 5 discriminator 2
 1251 0038 FB68     		ldr	r3, [r7, #12]
 1252 003a 0122     		movs	r2, #1
 1253 003c 83F83C20 		strb	r2, [r3, #60]
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 46


1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1254              		.loc 1 1328 23 is_stmt 1 discriminator 2
 1255 0040 FB68     		ldr	r3, [r7, #12]
 1256 0042 BA68     		ldr	r2, [r7, #8]
 1257 0044 1A62     		str	r2, [r3, #32]
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1258              		.loc 1 1329 23 discriminator 2
 1259 0046 FB68     		ldr	r3, [r7, #12]
 1260 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1261 004a 9A84     		strh	r2, [r3, #36]	@ movhi
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1262              		.loc 1 1330 24 discriminator 2
 1263 004c FB68     		ldr	r3, [r7, #12]
 1264 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1265 0050 DA84     		strh	r2, [r3, #38]	@ movhi
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1266              		.loc 1 1332 22 discriminator 2
 1267 0052 FB68     		ldr	r3, [r7, #12]
 1268 0054 0022     		movs	r2, #0
 1269 0056 1A64     		str	r2, [r3, #64]
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1270              		.loc 1 1333 19 discriminator 2
 1271 0058 FB68     		ldr	r3, [r7, #12]
 1272 005a 2122     		movs	r2, #33
 1273 005c 83F83D20 		strb	r2, [r3, #61]
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1274              		.loc 1 1336 5 discriminator 2
 1275 0060 FB68     		ldr	r3, [r7, #12]
 1276 0062 0022     		movs	r2, #0
 1277 0064 83F83C20 		strb	r2, [r3, #60]
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 1278              		.loc 1 1339 5 discriminator 2
 1279 0068 FB68     		ldr	r3, [r7, #12]
 1280 006a 1B68     		ldr	r3, [r3]
 1281 006c DA68     		ldr	r2, [r3, #12]
 1282 006e FB68     		ldr	r3, [r7, #12]
 1283 0070 1B68     		ldr	r3, [r3]
 1284 0072 42F08002 		orr	r2, r2, #128
 1285 0076 DA60     		str	r2, [r3, #12]
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1286              		.loc 1 1341 12 discriminator 2
 1287 0078 0023     		movs	r3, #0
 1288 007a 00E0     		b	.L56
 1289              	.L53:
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1290              		.loc 1 1345 12
 1291 007c 0223     		movs	r3, #2
 1292              	.L56:
ARM GAS  /tmp/ccKkagmp.s 			page 47


1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1293              		.loc 1 1347 1
 1294 007e 1846     		mov	r0, r3
 1295 0080 1437     		adds	r7, r7, #20
 1296              	.LCFI50:
 1297              		.cfi_def_cfa_offset 4
 1298 0082 BD46     		mov	sp, r7
 1299              	.LCFI51:
 1300              		.cfi_def_cfa_register 13
 1301              		@ sp needed
 1302 0084 80BC     		pop	{r7}
 1303              	.LCFI52:
 1304              		.cfi_restore 7
 1305              		.cfi_def_cfa_offset 0
 1306 0086 7047     		bx	lr
 1307              		.cfi_endproc
 1308              	.LFE74:
 1310              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1311              		.align	1
 1312              		.global	HAL_UART_Receive_IT
 1313              		.syntax unified
 1314              		.thumb
 1315              		.thumb_func
 1317              	HAL_UART_Receive_IT:
 1318              	.LFB75:
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1319              		.loc 1 1361 1
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 16
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323 0000 80B5     		push	{r7, lr}
 1324              	.LCFI53:
 1325              		.cfi_def_cfa_offset 8
 1326              		.cfi_offset 7, -8
 1327              		.cfi_offset 14, -4
 1328 0002 84B0     		sub	sp, sp, #16
 1329              	.LCFI54:
 1330              		.cfi_def_cfa_offset 24
 1331 0004 00AF     		add	r7, sp, #0
 1332              	.LCFI55:
 1333              		.cfi_def_cfa_register 7
 1334 0006 F860     		str	r0, [r7, #12]
 1335 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccKkagmp.s 			page 48


 1336 000a 1346     		mov	r3, r2
 1337 000c FB80     		strh	r3, [r7, #6]	@ movhi
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1338              		.loc 1 1363 12
 1339 000e FB68     		ldr	r3, [r7, #12]
 1340 0010 93F83E30 		ldrb	r3, [r3, #62]
 1341 0014 DBB2     		uxtb	r3, r3
 1342              		.loc 1 1363 6
 1343 0016 202B     		cmp	r3, #32
 1344 0018 1DD1     		bne	.L59
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1345              		.loc 1 1365 8
 1346 001a BB68     		ldr	r3, [r7, #8]
 1347 001c 002B     		cmp	r3, #0
 1348 001e 02D0     		beq	.L60
 1349              		.loc 1 1365 25 discriminator 1
 1350 0020 FB88     		ldrh	r3, [r7, #6]
 1351 0022 002B     		cmp	r3, #0
 1352 0024 01D1     		bne	.L61
 1353              	.L60:
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1354              		.loc 1 1367 14
 1355 0026 0123     		movs	r3, #1
 1356 0028 16E0     		b	.L62
 1357              	.L61:
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1358              		.loc 1 1371 5
 1359 002a FB68     		ldr	r3, [r7, #12]
 1360 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1361 0030 012B     		cmp	r3, #1
 1362 0032 01D1     		bne	.L63
 1363              		.loc 1 1371 5 is_stmt 0 discriminator 1
 1364 0034 0223     		movs	r3, #2
 1365 0036 0FE0     		b	.L62
 1366              	.L63:
 1367              		.loc 1 1371 5 discriminator 2
 1368 0038 FB68     		ldr	r3, [r7, #12]
 1369 003a 0122     		movs	r2, #1
 1370 003c 83F83C20 		strb	r2, [r3, #60]
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1371              		.loc 1 1374 26 is_stmt 1 discriminator 2
 1372 0040 FB68     		ldr	r3, [r7, #12]
 1373 0042 0022     		movs	r2, #0
 1374 0044 1A63     		str	r2, [r3, #48]
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return(UART_Start_Receive_IT(huart, pData, Size));
 1375              		.loc 1 1376 12 discriminator 2
 1376 0046 FB88     		ldrh	r3, [r7, #6]
 1377 0048 1A46     		mov	r2, r3
ARM GAS  /tmp/ccKkagmp.s 			page 49


 1378 004a B968     		ldr	r1, [r7, #8]
 1379 004c F868     		ldr	r0, [r7, #12]
 1380 004e FFF7FEFF 		bl	UART_Start_Receive_IT
 1381 0052 0346     		mov	r3, r0
 1382 0054 00E0     		b	.L62
 1383              	.L59:
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1384              		.loc 1 1380 12
 1385 0056 0223     		movs	r3, #2
 1386              	.L62:
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1387              		.loc 1 1382 1
 1388 0058 1846     		mov	r0, r3
 1389 005a 1037     		adds	r7, r7, #16
 1390              	.LCFI56:
 1391              		.cfi_def_cfa_offset 8
 1392 005c BD46     		mov	sp, r7
 1393              	.LCFI57:
 1394              		.cfi_def_cfa_register 13
 1395              		@ sp needed
 1396 005e 80BD     		pop	{r7, pc}
 1397              		.cfi_endproc
 1398              	.LFE75:
 1400              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1401              		.align	1
 1402              		.global	HAL_UART_Transmit_DMA
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1407              	HAL_UART_Transmit_DMA:
 1408              	.LFB76:
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in DMA mode.
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1409              		.loc 1 1396 1
 1410              		.cfi_startproc
 1411              		@ args = 0, pretend = 0, frame = 24
 1412              		@ frame_needed = 1, uses_anonymous_args = 0
 1413 0000 80B5     		push	{r7, lr}
 1414              	.LCFI58:
 1415              		.cfi_def_cfa_offset 8
 1416              		.cfi_offset 7, -8
ARM GAS  /tmp/ccKkagmp.s 			page 50


 1417              		.cfi_offset 14, -4
 1418 0002 86B0     		sub	sp, sp, #24
 1419              	.LCFI59:
 1420              		.cfi_def_cfa_offset 32
 1421 0004 00AF     		add	r7, sp, #0
 1422              	.LCFI60:
 1423              		.cfi_def_cfa_register 7
 1424 0006 F860     		str	r0, [r7, #12]
 1425 0008 B960     		str	r1, [r7, #8]
 1426 000a 1346     		mov	r3, r2
 1427 000c FB80     		strh	r3, [r7, #6]	@ movhi
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1428              		.loc 1 1400 12
 1429 000e FB68     		ldr	r3, [r7, #12]
 1430 0010 93F83D30 		ldrb	r3, [r3, #61]
 1431 0014 DBB2     		uxtb	r3, r3
 1432              		.loc 1 1400 6
 1433 0016 202B     		cmp	r3, #32
 1434 0018 53D1     		bne	.L65
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1435              		.loc 1 1402 16
 1436 001a BB68     		ldr	r3, [r7, #8]
 1437              		.loc 1 1402 8
 1438 001c 002B     		cmp	r3, #0
 1439 001e 02D0     		beq	.L66
 1440              		.loc 1 1402 25 discriminator 1
 1441 0020 FB88     		ldrh	r3, [r7, #6]
 1442 0022 002B     		cmp	r3, #0
 1443 0024 01D1     		bne	.L67
 1444              	.L66:
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1445              		.loc 1 1404 14
 1446 0026 0123     		movs	r3, #1
 1447 0028 4CE0     		b	.L68
 1448              	.L67:
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1449              		.loc 1 1408 5
 1450 002a FB68     		ldr	r3, [r7, #12]
 1451 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1452 0030 012B     		cmp	r3, #1
 1453 0032 01D1     		bne	.L69
 1454              		.loc 1 1408 5 is_stmt 0 discriminator 1
 1455 0034 0223     		movs	r3, #2
 1456 0036 45E0     		b	.L68
 1457              	.L69:
 1458              		.loc 1 1408 5 discriminator 2
 1459 0038 FB68     		ldr	r3, [r7, #12]
 1460 003a 0122     		movs	r2, #1
 1461 003c 83F83C20 		strb	r2, [r3, #60]
ARM GAS  /tmp/ccKkagmp.s 			page 51


1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1462              		.loc 1 1410 23 is_stmt 1 discriminator 2
 1463 0040 BA68     		ldr	r2, [r7, #8]
 1464 0042 FB68     		ldr	r3, [r7, #12]
 1465 0044 1A62     		str	r2, [r3, #32]
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1466              		.loc 1 1411 23 discriminator 2
 1467 0046 FB68     		ldr	r3, [r7, #12]
 1468 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1469 004a 9A84     		strh	r2, [r3, #36]	@ movhi
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1470              		.loc 1 1412 24 discriminator 2
 1471 004c FB68     		ldr	r3, [r7, #12]
 1472 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1473 0050 DA84     		strh	r2, [r3, #38]	@ movhi
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1474              		.loc 1 1414 22 discriminator 2
 1475 0052 FB68     		ldr	r3, [r7, #12]
 1476 0054 0022     		movs	r2, #0
 1477 0056 1A64     		str	r2, [r3, #64]
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1478              		.loc 1 1415 19 discriminator 2
 1479 0058 FB68     		ldr	r3, [r7, #12]
 1480 005a 2122     		movs	r2, #33
 1481 005c 83F83D20 		strb	r2, [r3, #61]
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1482              		.loc 1 1418 10 discriminator 2
 1483 0060 FB68     		ldr	r3, [r7, #12]
 1484 0062 5B6B     		ldr	r3, [r3, #52]
 1485              		.loc 1 1418 37 discriminator 2
 1486 0064 194A     		ldr	r2, .L70
 1487 0066 9A62     		str	r2, [r3, #40]
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1488              		.loc 1 1421 10 discriminator 2
 1489 0068 FB68     		ldr	r3, [r7, #12]
 1490 006a 5B6B     		ldr	r3, [r3, #52]
 1491              		.loc 1 1421 41 discriminator 2
 1492 006c 184A     		ldr	r2, .L70+4
 1493 006e DA62     		str	r2, [r3, #44]
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1494              		.loc 1 1424 10 discriminator 2
 1495 0070 FB68     		ldr	r3, [r7, #12]
 1496 0072 5B6B     		ldr	r3, [r3, #52]
 1497              		.loc 1 1424 38 discriminator 2
 1498 0074 174A     		ldr	r2, .L70+8
 1499 0076 1A63     		str	r2, [r3, #48]
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
ARM GAS  /tmp/ccKkagmp.s 			page 52


 1500              		.loc 1 1427 10 discriminator 2
 1501 0078 FB68     		ldr	r3, [r7, #12]
 1502 007a 5B6B     		ldr	r3, [r3, #52]
 1503              		.loc 1 1427 38 discriminator 2
 1504 007c 0022     		movs	r2, #0
 1505 007e 5A63     		str	r2, [r3, #52]
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
 1506              		.loc 1 1430 9 discriminator 2
 1507 0080 07F10803 		add	r3, r7, #8
 1508 0084 7B61     		str	r3, [r7, #20]
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 1509              		.loc 1 1431 5 discriminator 2
 1510 0086 FB68     		ldr	r3, [r7, #12]
 1511 0088 586B     		ldr	r0, [r3, #52]
 1512 008a 7B69     		ldr	r3, [r7, #20]
 1513 008c 1968     		ldr	r1, [r3]
 1514              		.loc 1 1431 71 discriminator 2
 1515 008e FB68     		ldr	r3, [r7, #12]
 1516 0090 1B68     		ldr	r3, [r3]
 1517              		.loc 1 1431 65 discriminator 2
 1518 0092 0433     		adds	r3, r3, #4
 1519              		.loc 1 1431 5 discriminator 2
 1520 0094 1A46     		mov	r2, r3
 1521 0096 FB88     		ldrh	r3, [r7, #6]
 1522 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1523              		.loc 1 1434 5 discriminator 2
 1524 009c FB68     		ldr	r3, [r7, #12]
 1525 009e 1B68     		ldr	r3, [r3]
 1526 00a0 6FF04002 		mvn	r2, #64
 1527 00a4 1A60     		str	r2, [r3]
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1528              		.loc 1 1437 5 discriminator 2
 1529 00a6 FB68     		ldr	r3, [r7, #12]
 1530 00a8 0022     		movs	r2, #0
 1531 00aa 83F83C20 		strb	r2, [r3, #60]
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1532              		.loc 1 1441 5 discriminator 2
 1533 00ae FB68     		ldr	r3, [r7, #12]
 1534 00b0 1B68     		ldr	r3, [r3]
 1535 00b2 5A69     		ldr	r2, [r3, #20]
 1536 00b4 FB68     		ldr	r3, [r7, #12]
 1537 00b6 1B68     		ldr	r3, [r3]
 1538 00b8 42F08002 		orr	r2, r2, #128
 1539 00bc 5A61     		str	r2, [r3, #20]
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1540              		.loc 1 1443 12 discriminator 2
ARM GAS  /tmp/ccKkagmp.s 			page 53


 1541 00be 0023     		movs	r3, #0
 1542 00c0 00E0     		b	.L68
 1543              	.L65:
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1544              		.loc 1 1447 12
 1545 00c2 0223     		movs	r3, #2
 1546              	.L68:
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1547              		.loc 1 1449 1
 1548 00c4 1846     		mov	r0, r3
 1549 00c6 1837     		adds	r7, r7, #24
 1550              	.LCFI61:
 1551              		.cfi_def_cfa_offset 8
 1552 00c8 BD46     		mov	sp, r7
 1553              	.LCFI62:
 1554              		.cfi_def_cfa_register 13
 1555              		@ sp needed
 1556 00ca 80BD     		pop	{r7, pc}
 1557              	.L71:
 1558              		.align	2
 1559              	.L70:
 1560 00cc 00000000 		.word	UART_DMATransmitCplt
 1561 00d0 00000000 		.word	UART_DMATxHalfCplt
 1562 00d4 00000000 		.word	UART_DMAError
 1563              		.cfi_endproc
 1564              	.LFE76:
 1566              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1567              		.align	1
 1568              		.global	HAL_UART_Receive_DMA
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1573              	HAL_UART_Receive_DMA:
 1574              	.LFB77:
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in DMA mode.
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1575              		.loc 1 1464 1
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 16
 1578              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccKkagmp.s 			page 54


 1579 0000 80B5     		push	{r7, lr}
 1580              	.LCFI63:
 1581              		.cfi_def_cfa_offset 8
 1582              		.cfi_offset 7, -8
 1583              		.cfi_offset 14, -4
 1584 0002 84B0     		sub	sp, sp, #16
 1585              	.LCFI64:
 1586              		.cfi_def_cfa_offset 24
 1587 0004 00AF     		add	r7, sp, #0
 1588              	.LCFI65:
 1589              		.cfi_def_cfa_register 7
 1590 0006 F860     		str	r0, [r7, #12]
 1591 0008 B960     		str	r1, [r7, #8]
 1592 000a 1346     		mov	r3, r2
 1593 000c FB80     		strh	r3, [r7, #6]	@ movhi
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1594              		.loc 1 1466 12
 1595 000e FB68     		ldr	r3, [r7, #12]
 1596 0010 93F83E30 		ldrb	r3, [r3, #62]
 1597 0014 DBB2     		uxtb	r3, r3
 1598              		.loc 1 1466 6
 1599 0016 202B     		cmp	r3, #32
 1600 0018 1DD1     		bne	.L73
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1601              		.loc 1 1468 8
 1602 001a BB68     		ldr	r3, [r7, #8]
 1603 001c 002B     		cmp	r3, #0
 1604 001e 02D0     		beq	.L74
 1605              		.loc 1 1468 25 discriminator 1
 1606 0020 FB88     		ldrh	r3, [r7, #6]
 1607 0022 002B     		cmp	r3, #0
 1608 0024 01D1     		bne	.L75
 1609              	.L74:
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1610              		.loc 1 1470 14
 1611 0026 0123     		movs	r3, #1
 1612 0028 16E0     		b	.L76
 1613              	.L75:
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1614              		.loc 1 1474 5
 1615 002a FB68     		ldr	r3, [r7, #12]
 1616 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1617 0030 012B     		cmp	r3, #1
 1618 0032 01D1     		bne	.L77
 1619              		.loc 1 1474 5 is_stmt 0 discriminator 1
 1620 0034 0223     		movs	r3, #2
 1621 0036 0FE0     		b	.L76
 1622              	.L77:
 1623              		.loc 1 1474 5 discriminator 2
 1624 0038 FB68     		ldr	r3, [r7, #12]
 1625 003a 0122     		movs	r2, #1
ARM GAS  /tmp/ccKkagmp.s 			page 55


 1626 003c 83F83C20 		strb	r2, [r3, #60]
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1627              		.loc 1 1477 26 is_stmt 1 discriminator 2
 1628 0040 FB68     		ldr	r3, [r7, #12]
 1629 0042 0022     		movs	r2, #0
 1630 0044 1A63     		str	r2, [r3, #48]
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return(UART_Start_Receive_DMA(huart, pData, Size));
 1631              		.loc 1 1479 12 discriminator 2
 1632 0046 FB88     		ldrh	r3, [r7, #6]
 1633 0048 1A46     		mov	r2, r3
 1634 004a B968     		ldr	r1, [r7, #8]
 1635 004c F868     		ldr	r0, [r7, #12]
 1636 004e FFF7FEFF 		bl	UART_Start_Receive_DMA
 1637 0052 0346     		mov	r3, r0
 1638 0054 00E0     		b	.L76
 1639              	.L73:
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1640              		.loc 1 1483 12
 1641 0056 0223     		movs	r3, #2
 1642              	.L76:
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1643              		.loc 1 1485 1
 1644 0058 1846     		mov	r0, r3
 1645 005a 1037     		adds	r7, r7, #16
 1646              	.LCFI66:
 1647              		.cfi_def_cfa_offset 8
 1648 005c BD46     		mov	sp, r7
 1649              	.LCFI67:
 1650              		.cfi_def_cfa_register 13
 1651              		@ sp needed
 1652 005e 80BD     		pop	{r7, pc}
 1653              		.cfi_endproc
 1654              	.LFE77:
 1656              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1657              		.align	1
 1658              		.global	HAL_UART_DMAPause
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1663              	HAL_UART_DMAPause:
 1664              	.LFB78:
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
ARM GAS  /tmp/ccKkagmp.s 			page 56


 1665              		.loc 1 1494 1
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 16
 1668              		@ frame_needed = 1, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
 1670 0000 80B4     		push	{r7}
 1671              	.LCFI68:
 1672              		.cfi_def_cfa_offset 4
 1673              		.cfi_offset 7, -4
 1674 0002 85B0     		sub	sp, sp, #20
 1675              	.LCFI69:
 1676              		.cfi_def_cfa_offset 24
 1677 0004 00AF     		add	r7, sp, #0
 1678              	.LCFI70:
 1679              		.cfi_def_cfa_register 7
 1680 0006 7860     		str	r0, [r7, #4]
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1681              		.loc 1 1495 12
 1682 0008 0023     		movs	r3, #0
 1683 000a FB60     		str	r3, [r7, #12]
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 1684              		.loc 1 1498 3
 1685 000c 7B68     		ldr	r3, [r7, #4]
 1686 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1687 0012 012B     		cmp	r3, #1
 1688 0014 01D1     		bne	.L79
 1689              		.loc 1 1498 3 is_stmt 0 discriminator 1
 1690 0016 0223     		movs	r3, #2
 1691 0018 50E0     		b	.L80
 1692              	.L79:
 1693              		.loc 1 1498 3 discriminator 2
 1694 001a 7B68     		ldr	r3, [r7, #4]
 1695 001c 0122     		movs	r2, #1
 1696 001e 83F83C20 		strb	r2, [r3, #60]
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1697              		.loc 1 1500 16 is_stmt 1 discriminator 2
 1698 0022 7B68     		ldr	r3, [r7, #4]
 1699 0024 1B68     		ldr	r3, [r3]
 1700 0026 5B69     		ldr	r3, [r3, #20]
 1701 0028 03F08003 		and	r3, r3, #128
 1702 002c 002B     		cmp	r3, #0
 1703 002e 14BF     		ite	ne
 1704 0030 0123     		movne	r3, #1
 1705 0032 0023     		moveq	r3, #0
 1706 0034 DBB2     		uxtb	r3, r3
 1707              		.loc 1 1500 14 discriminator 2
 1708 0036 FB60     		str	r3, [r7, #12]
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1709              		.loc 1 1501 13 discriminator 2
 1710 0038 7B68     		ldr	r3, [r7, #4]
 1711 003a 93F83D30 		ldrb	r3, [r3, #61]
 1712 003e DBB2     		uxtb	r3, r3
 1713              		.loc 1 1501 6 discriminator 2
 1714 0040 212B     		cmp	r3, #33
ARM GAS  /tmp/ccKkagmp.s 			page 57


 1715 0042 0AD1     		bne	.L81
 1716              		.loc 1 1501 49 discriminator 1
 1717 0044 FB68     		ldr	r3, [r7, #12]
 1718 0046 002B     		cmp	r3, #0
 1719 0048 07D0     		beq	.L81
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1720              		.loc 1 1504 5
 1721 004a 7B68     		ldr	r3, [r7, #4]
 1722 004c 1B68     		ldr	r3, [r3]
 1723 004e 5A69     		ldr	r2, [r3, #20]
 1724 0050 7B68     		ldr	r3, [r7, #4]
 1725 0052 1B68     		ldr	r3, [r3]
 1726 0054 22F08002 		bic	r2, r2, #128
 1727 0058 5A61     		str	r2, [r3, #20]
 1728              	.L81:
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1729              		.loc 1 1507 16
 1730 005a 7B68     		ldr	r3, [r7, #4]
 1731 005c 1B68     		ldr	r3, [r3]
 1732 005e 5B69     		ldr	r3, [r3, #20]
 1733 0060 03F04003 		and	r3, r3, #64
 1734 0064 002B     		cmp	r3, #0
 1735 0066 14BF     		ite	ne
 1736 0068 0123     		movne	r3, #1
 1737 006a 0023     		moveq	r3, #0
 1738 006c DBB2     		uxtb	r3, r3
 1739              		.loc 1 1507 14
 1740 006e FB60     		str	r3, [r7, #12]
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1741              		.loc 1 1508 13
 1742 0070 7B68     		ldr	r3, [r7, #4]
 1743 0072 93F83E30 		ldrb	r3, [r3, #62]
 1744 0076 DBB2     		uxtb	r3, r3
 1745              		.loc 1 1508 6
 1746 0078 222B     		cmp	r3, #34
 1747 007a 1AD1     		bne	.L82
 1748              		.loc 1 1508 50 discriminator 1
 1749 007c FB68     		ldr	r3, [r7, #12]
 1750 007e 002B     		cmp	r3, #0
 1751 0080 17D0     		beq	.L82
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1752              		.loc 1 1511 5
 1753 0082 7B68     		ldr	r3, [r7, #4]
 1754 0084 1B68     		ldr	r3, [r3]
 1755 0086 DA68     		ldr	r2, [r3, #12]
 1756 0088 7B68     		ldr	r3, [r7, #4]
 1757 008a 1B68     		ldr	r3, [r3]
 1758 008c 22F48072 		bic	r2, r2, #256
 1759 0090 DA60     		str	r2, [r3, #12]
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1760              		.loc 1 1512 5
ARM GAS  /tmp/ccKkagmp.s 			page 58


 1761 0092 7B68     		ldr	r3, [r7, #4]
 1762 0094 1B68     		ldr	r3, [r3]
 1763 0096 5A69     		ldr	r2, [r3, #20]
 1764 0098 7B68     		ldr	r3, [r7, #4]
 1765 009a 1B68     		ldr	r3, [r3]
 1766 009c 22F00102 		bic	r2, r2, #1
 1767 00a0 5A61     		str	r2, [r3, #20]
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1768              		.loc 1 1515 5
 1769 00a2 7B68     		ldr	r3, [r7, #4]
 1770 00a4 1B68     		ldr	r3, [r3]
 1771 00a6 5A69     		ldr	r2, [r3, #20]
 1772 00a8 7B68     		ldr	r3, [r7, #4]
 1773 00aa 1B68     		ldr	r3, [r3]
 1774 00ac 22F04002 		bic	r2, r2, #64
 1775 00b0 5A61     		str	r2, [r3, #20]
 1776              	.L82:
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1777              		.loc 1 1519 3
 1778 00b2 7B68     		ldr	r3, [r7, #4]
 1779 00b4 0022     		movs	r2, #0
 1780 00b6 83F83C20 		strb	r2, [r3, #60]
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1781              		.loc 1 1521 10
 1782 00ba 0023     		movs	r3, #0
 1783              	.L80:
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1784              		.loc 1 1522 1
 1785 00bc 1846     		mov	r0, r3
 1786 00be 1437     		adds	r7, r7, #20
 1787              	.LCFI71:
 1788              		.cfi_def_cfa_offset 4
 1789 00c0 BD46     		mov	sp, r7
 1790              	.LCFI72:
 1791              		.cfi_def_cfa_register 13
 1792              		@ sp needed
 1793 00c2 80BC     		pop	{r7}
 1794              	.LCFI73:
 1795              		.cfi_restore 7
 1796              		.cfi_def_cfa_offset 0
 1797 00c4 7047     		bx	lr
 1798              		.cfi_endproc
 1799              	.LFE78:
 1801              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1802              		.align	1
 1803              		.global	HAL_UART_DMAResume
 1804              		.syntax unified
 1805              		.thumb
 1806              		.thumb_func
 1808              	HAL_UART_DMAResume:
 1809              	.LFB79:
ARM GAS  /tmp/ccKkagmp.s 			page 59


1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1810              		.loc 1 1531 1
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 16
 1813              		@ frame_needed = 1, uses_anonymous_args = 0
 1814              		@ link register save eliminated.
 1815 0000 80B4     		push	{r7}
 1816              	.LCFI74:
 1817              		.cfi_def_cfa_offset 4
 1818              		.cfi_offset 7, -4
 1819 0002 85B0     		sub	sp, sp, #20
 1820              	.LCFI75:
 1821              		.cfi_def_cfa_offset 24
 1822 0004 00AF     		add	r7, sp, #0
 1823              	.LCFI76:
 1824              		.cfi_def_cfa_register 7
 1825 0006 7860     		str	r0, [r7, #4]
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 1826              		.loc 1 1533 3
 1827 0008 7B68     		ldr	r3, [r7, #4]
 1828 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1829 000e 012B     		cmp	r3, #1
 1830 0010 01D1     		bne	.L84
 1831              		.loc 1 1533 3 is_stmt 0 discriminator 1
 1832 0012 0223     		movs	r3, #2
 1833 0014 3FE0     		b	.L85
 1834              	.L84:
 1835              		.loc 1 1533 3 discriminator 2
 1836 0016 7B68     		ldr	r3, [r7, #4]
 1837 0018 0122     		movs	r2, #1
 1838 001a 83F83C20 		strb	r2, [r3, #60]
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 1839              		.loc 1 1535 12 is_stmt 1 discriminator 2
 1840 001e 7B68     		ldr	r3, [r7, #4]
 1841 0020 93F83D30 		ldrb	r3, [r3, #61]
 1842 0024 DBB2     		uxtb	r3, r3
 1843              		.loc 1 1535 6 discriminator 2
 1844 0026 212B     		cmp	r3, #33
 1845 0028 07D1     		bne	.L86
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1846              		.loc 1 1538 5
 1847 002a 7B68     		ldr	r3, [r7, #4]
 1848 002c 1B68     		ldr	r3, [r3]
 1849 002e 5A69     		ldr	r2, [r3, #20]
 1850 0030 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccKkagmp.s 			page 60


 1851 0032 1B68     		ldr	r3, [r3]
 1852 0034 42F08002 		orr	r2, r2, #128
 1853 0038 5A61     		str	r2, [r3, #20]
 1854              	.L86:
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1855              		.loc 1 1541 12
 1856 003a 7B68     		ldr	r3, [r7, #4]
 1857 003c 93F83E30 		ldrb	r3, [r3, #62]
 1858 0040 DBB2     		uxtb	r3, r3
 1859              		.loc 1 1541 6
 1860 0042 222B     		cmp	r3, #34
 1861 0044 22D1     		bne	.L87
 1862              	.LBB2:
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1863              		.loc 1 1544 5
 1864 0046 0023     		movs	r3, #0
 1865 0048 FB60     		str	r3, [r7, #12]
 1866 004a 7B68     		ldr	r3, [r7, #4]
 1867 004c 1B68     		ldr	r3, [r3]
 1868 004e 1B68     		ldr	r3, [r3]
 1869 0050 FB60     		str	r3, [r7, #12]
 1870 0052 7B68     		ldr	r3, [r7, #4]
 1871 0054 1B68     		ldr	r3, [r3]
 1872 0056 5B68     		ldr	r3, [r3, #4]
 1873 0058 FB60     		str	r3, [r7, #12]
 1874 005a FB68     		ldr	r3, [r7, #12]
 1875              	.LBE2:
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1876              		.loc 1 1547 5
 1877 005c 7B68     		ldr	r3, [r7, #4]
 1878 005e 1B68     		ldr	r3, [r3]
 1879 0060 DA68     		ldr	r2, [r3, #12]
 1880 0062 7B68     		ldr	r3, [r7, #4]
 1881 0064 1B68     		ldr	r3, [r3]
 1882 0066 42F48072 		orr	r2, r2, #256
 1883 006a DA60     		str	r2, [r3, #12]
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1884              		.loc 1 1548 5
 1885 006c 7B68     		ldr	r3, [r7, #4]
 1886 006e 1B68     		ldr	r3, [r3]
 1887 0070 5A69     		ldr	r2, [r3, #20]
 1888 0072 7B68     		ldr	r3, [r7, #4]
 1889 0074 1B68     		ldr	r3, [r3]
 1890 0076 42F00102 		orr	r2, r2, #1
 1891 007a 5A61     		str	r2, [r3, #20]
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1892              		.loc 1 1551 5
 1893 007c 7B68     		ldr	r3, [r7, #4]
 1894 007e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 61


 1895 0080 5A69     		ldr	r2, [r3, #20]
 1896 0082 7B68     		ldr	r3, [r7, #4]
 1897 0084 1B68     		ldr	r3, [r3]
 1898 0086 42F04002 		orr	r2, r2, #64
 1899 008a 5A61     		str	r2, [r3, #20]
 1900              	.L87:
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1901              		.loc 1 1555 3
 1902 008c 7B68     		ldr	r3, [r7, #4]
 1903 008e 0022     		movs	r2, #0
 1904 0090 83F83C20 		strb	r2, [r3, #60]
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1905              		.loc 1 1557 10
 1906 0094 0023     		movs	r3, #0
 1907              	.L85:
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1908              		.loc 1 1558 1
 1909 0096 1846     		mov	r0, r3
 1910 0098 1437     		adds	r7, r7, #20
 1911              	.LCFI77:
 1912              		.cfi_def_cfa_offset 4
 1913 009a BD46     		mov	sp, r7
 1914              	.LCFI78:
 1915              		.cfi_def_cfa_register 13
 1916              		@ sp needed
 1917 009c 80BC     		pop	{r7}
 1918              	.LCFI79:
 1919              		.cfi_restore 7
 1920              		.cfi_def_cfa_offset 0
 1921 009e 7047     		bx	lr
 1922              		.cfi_endproc
 1923              	.LFE79:
 1925              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1926              		.align	1
 1927              		.global	HAL_UART_DMAStop
 1928              		.syntax unified
 1929              		.thumb
 1930              		.thumb_func
 1932              	HAL_UART_DMAStop:
 1933              	.LFB80:
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1934              		.loc 1 1567 1
 1935              		.cfi_startproc
 1936              		@ args = 0, pretend = 0, frame = 16
 1937              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccKkagmp.s 			page 62


 1938 0000 80B5     		push	{r7, lr}
 1939              	.LCFI80:
 1940              		.cfi_def_cfa_offset 8
 1941              		.cfi_offset 7, -8
 1942              		.cfi_offset 14, -4
 1943 0002 84B0     		sub	sp, sp, #16
 1944              	.LCFI81:
 1945              		.cfi_def_cfa_offset 24
 1946 0004 00AF     		add	r7, sp, #0
 1947              	.LCFI82:
 1948              		.cfi_def_cfa_register 7
 1949 0006 7860     		str	r0, [r7, #4]
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1950              		.loc 1 1568 12
 1951 0008 0023     		movs	r3, #0
 1952 000a FB60     		str	r3, [r7, #12]
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      */
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1953              		.loc 1 1576 16
 1954 000c 7B68     		ldr	r3, [r7, #4]
 1955 000e 1B68     		ldr	r3, [r3]
 1956 0010 5B69     		ldr	r3, [r3, #20]
 1957 0012 03F08003 		and	r3, r3, #128
 1958 0016 002B     		cmp	r3, #0
 1959 0018 14BF     		ite	ne
 1960 001a 0123     		movne	r3, #1
 1961 001c 0023     		moveq	r3, #0
 1962 001e DBB2     		uxtb	r3, r3
 1963              		.loc 1 1576 14
 1964 0020 FB60     		str	r3, [r7, #12]
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1965              		.loc 1 1577 13
 1966 0022 7B68     		ldr	r3, [r7, #4]
 1967 0024 93F83D30 		ldrb	r3, [r3, #61]
 1968 0028 DBB2     		uxtb	r3, r3
 1969              		.loc 1 1577 6
 1970 002a 212B     		cmp	r3, #33
 1971 002c 16D1     		bne	.L89
 1972              		.loc 1 1577 49 discriminator 1
 1973 002e FB68     		ldr	r3, [r7, #12]
 1974 0030 002B     		cmp	r3, #0
 1975 0032 13D0     		beq	.L89
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1976              		.loc 1 1579 5
 1977 0034 7B68     		ldr	r3, [r7, #4]
 1978 0036 1B68     		ldr	r3, [r3]
 1979 0038 5A69     		ldr	r2, [r3, #20]
 1980 003a 7B68     		ldr	r3, [r7, #4]
 1981 003c 1B68     		ldr	r3, [r3]
 1982 003e 22F08002 		bic	r2, r2, #128
ARM GAS  /tmp/ccKkagmp.s 			page 63


 1983 0042 5A61     		str	r2, [r3, #20]
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 1984              		.loc 1 1582 14
 1985 0044 7B68     		ldr	r3, [r7, #4]
 1986 0046 5B6B     		ldr	r3, [r3, #52]
 1987              		.loc 1 1582 8
 1988 0048 002B     		cmp	r3, #0
 1989 004a 04D0     		beq	.L90
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 1990              		.loc 1 1584 7
 1991 004c 7B68     		ldr	r3, [r7, #4]
 1992 004e 5B6B     		ldr	r3, [r3, #52]
 1993 0050 1846     		mov	r0, r3
 1994 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 1995              	.L90:
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 1996              		.loc 1 1586 5
 1997 0056 7868     		ldr	r0, [r7, #4]
 1998 0058 FFF7FEFF 		bl	UART_EndTxTransfer
 1999              	.L89:
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 2000              		.loc 1 1590 16
 2001 005c 7B68     		ldr	r3, [r7, #4]
 2002 005e 1B68     		ldr	r3, [r3]
 2003 0060 5B69     		ldr	r3, [r3, #20]
 2004 0062 03F04003 		and	r3, r3, #64
 2005 0066 002B     		cmp	r3, #0
 2006 0068 14BF     		ite	ne
 2007 006a 0123     		movne	r3, #1
 2008 006c 0023     		moveq	r3, #0
 2009 006e DBB2     		uxtb	r3, r3
 2010              		.loc 1 1590 14
 2011 0070 FB60     		str	r3, [r7, #12]
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2012              		.loc 1 1591 13
 2013 0072 7B68     		ldr	r3, [r7, #4]
 2014 0074 93F83E30 		ldrb	r3, [r3, #62]
 2015 0078 DBB2     		uxtb	r3, r3
 2016              		.loc 1 1591 6
 2017 007a 222B     		cmp	r3, #34
 2018 007c 16D1     		bne	.L91
 2019              		.loc 1 1591 50 discriminator 1
 2020 007e FB68     		ldr	r3, [r7, #12]
 2021 0080 002B     		cmp	r3, #0
 2022 0082 13D0     		beq	.L91
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2023              		.loc 1 1593 5
 2024 0084 7B68     		ldr	r3, [r7, #4]
 2025 0086 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 64


 2026 0088 5A69     		ldr	r2, [r3, #20]
 2027 008a 7B68     		ldr	r3, [r7, #4]
 2028 008c 1B68     		ldr	r3, [r3]
 2029 008e 22F04002 		bic	r2, r2, #64
 2030 0092 5A61     		str	r2, [r3, #20]
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2031              		.loc 1 1596 14
 2032 0094 7B68     		ldr	r3, [r7, #4]
 2033 0096 9B6B     		ldr	r3, [r3, #56]
 2034              		.loc 1 1596 8
 2035 0098 002B     		cmp	r3, #0
 2036 009a 04D0     		beq	.L92
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2037              		.loc 1 1598 7
 2038 009c 7B68     		ldr	r3, [r7, #4]
 2039 009e 9B6B     		ldr	r3, [r3, #56]
 2040 00a0 1846     		mov	r0, r3
 2041 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 2042              	.L92:
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2043              		.loc 1 1600 5
 2044 00a6 7868     		ldr	r0, [r7, #4]
 2045 00a8 FFF7FEFF 		bl	UART_EndRxTransfer
 2046              	.L91:
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2047              		.loc 1 1603 10
 2048 00ac 0023     		movs	r3, #0
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2049              		.loc 1 1604 1
 2050 00ae 1846     		mov	r0, r3
 2051 00b0 1037     		adds	r7, r7, #16
 2052              	.LCFI83:
 2053              		.cfi_def_cfa_offset 8
 2054 00b2 BD46     		mov	sp, r7
 2055              	.LCFI84:
 2056              		.cfi_def_cfa_register 13
 2057              		@ sp needed
 2058 00b4 80BD     		pop	{r7, pc}
 2059              		.cfi_endproc
 2060              	.LFE80:
 2062              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 2063              		.align	1
 2064              		.global	HAL_UARTEx_ReceiveToIdle
 2065              		.syntax unified
 2066              		.thumb
 2067              		.thumb_func
 2069              	HAL_UARTEx_ReceiveToIdle:
 2070              	.LFB81:
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data is re
ARM GAS  /tmp/ccKkagmp.s 			page 65


1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   HAL_OK is returned if reception is completed (expected number of data has been received
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         or if reception is stopped after IDLE event (less than the expected number of data has 
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         In this case, RxLen output parameter indicates number of data available in reception bu
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart   UART handle.
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param RxLen   Number of data elements finally received (could be lower than Size, in case rece
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2071              		.loc 1 1622 1
 2072              		.cfi_startproc
 2073              		@ args = 4, pretend = 0, frame = 32
 2074              		@ frame_needed = 1, uses_anonymous_args = 0
 2075 0000 80B5     		push	{r7, lr}
 2076              	.LCFI85:
 2077              		.cfi_def_cfa_offset 8
 2078              		.cfi_offset 7, -8
 2079              		.cfi_offset 14, -4
 2080 0002 88B0     		sub	sp, sp, #32
 2081              	.LCFI86:
 2082              		.cfi_def_cfa_offset 40
 2083 0004 00AF     		add	r7, sp, #0
 2084              	.LCFI87:
 2085              		.cfi_def_cfa_register 7
 2086 0006 F860     		str	r0, [r7, #12]
 2087 0008 B960     		str	r1, [r7, #8]
 2088 000a 3B60     		str	r3, [r7]
 2089 000c 1346     		mov	r3, r2	@ movhi
 2090 000e FB80     		strh	r3, [r7, #6]	@ movhi
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart;
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2091              		.loc 1 1628 12
 2092 0010 FB68     		ldr	r3, [r7, #12]
 2093 0012 93F83E30 		ldrb	r3, [r3, #62]
 2094 0016 DBB2     		uxtb	r3, r3
 2095              		.loc 1 1628 6
 2096 0018 202B     		cmp	r3, #32
 2097 001a 40F0C980 		bne	.L95
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2098              		.loc 1 1630 8
 2099 001e BB68     		ldr	r3, [r7, #8]
 2100 0020 002B     		cmp	r3, #0
 2101 0022 02D0     		beq	.L96
 2102              		.loc 1 1630 25 discriminator 1
 2103 0024 FB88     		ldrh	r3, [r7, #6]
 2104 0026 002B     		cmp	r3, #0
ARM GAS  /tmp/ccKkagmp.s 			page 66


 2105 0028 01D1     		bne	.L97
 2106              	.L96:
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 2107              		.loc 1 1632 15
 2108 002a 0123     		movs	r3, #1
 2109 002c C1E0     		b	.L98
 2110              	.L97:
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 2111              		.loc 1 1635 5
 2112 002e FB68     		ldr	r3, [r7, #12]
 2113 0030 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2114 0034 012B     		cmp	r3, #1
 2115 0036 01D1     		bne	.L99
 2116              		.loc 1 1635 5 is_stmt 0 discriminator 1
 2117 0038 0223     		movs	r3, #2
 2118 003a BAE0     		b	.L98
 2119              	.L99:
 2120              		.loc 1 1635 5 discriminator 2
 2121 003c FB68     		ldr	r3, [r7, #12]
 2122 003e 0122     		movs	r2, #1
 2123 0040 83F83C20 		strb	r2, [r3, #60]
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2124              		.loc 1 1637 22 is_stmt 1 discriminator 2
 2125 0044 FB68     		ldr	r3, [r7, #12]
 2126 0046 0022     		movs	r2, #0
 2127 0048 1A64     		str	r2, [r3, #64]
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2128              		.loc 1 1638 20 discriminator 2
 2129 004a FB68     		ldr	r3, [r7, #12]
 2130 004c 2222     		movs	r2, #34
 2131 004e 83F83E20 		strb	r2, [r3, #62]
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2132              		.loc 1 1639 26 discriminator 2
 2133 0052 FB68     		ldr	r3, [r7, #12]
 2134 0054 0122     		movs	r2, #1
 2135 0056 1A63     		str	r2, [r3, #48]
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 2136              		.loc 1 1642 17 discriminator 2
 2137 0058 FFF7FEFF 		bl	HAL_GetTick
 2138 005c 7861     		str	r0, [r7, #20]
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize  = Size;
 2139              		.loc 1 1644 24 discriminator 2
 2140 005e FB68     		ldr	r3, [r7, #12]
 2141 0060 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2142 0062 9A85     		strh	r2, [r3, #44]	@ movhi
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 2143              		.loc 1 1645 24 discriminator 2
 2144 0064 FB68     		ldr	r3, [r7, #12]
 2145 0066 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2146 0068 DA85     		strh	r2, [r3, #46]	@ movhi
ARM GAS  /tmp/ccKkagmp.s 			page 67


1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 2147              		.loc 1 1648 21 discriminator 2
 2148 006a FB68     		ldr	r3, [r7, #12]
 2149 006c 9B68     		ldr	r3, [r3, #8]
 2150              		.loc 1 1648 8 discriminator 2
 2151 006e B3F5805F 		cmp	r3, #4096
 2152 0072 08D1     		bne	.L100
 2153              		.loc 1 1648 71 discriminator 1
 2154 0074 FB68     		ldr	r3, [r7, #12]
 2155 0076 1B69     		ldr	r3, [r3, #16]
 2156              		.loc 1 1648 56 discriminator 1
 2157 0078 002B     		cmp	r3, #0
 2158 007a 04D1     		bne	.L100
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 2159              		.loc 1 1650 19
 2160 007c 0023     		movs	r3, #0
 2161 007e FB61     		str	r3, [r7, #28]
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 2162              		.loc 1 1651 19
 2163 0080 BB68     		ldr	r3, [r7, #8]
 2164 0082 BB61     		str	r3, [r7, #24]
 2165 0084 03E0     		b	.L101
 2166              	.L100:
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 2167              		.loc 1 1655 19
 2168 0086 BB68     		ldr	r3, [r7, #8]
 2169 0088 FB61     		str	r3, [r7, #28]
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 2170              		.loc 1 1656 19
 2171 008a 0023     		movs	r3, #0
 2172 008c BB61     		str	r3, [r7, #24]
 2173              	.L101:
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 2174              		.loc 1 1659 5
 2175 008e FB68     		ldr	r3, [r7, #12]
 2176 0090 0022     		movs	r2, #0
 2177 0092 83F83C20 		strb	r2, [r3, #60]
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Initialize output number of received elements */
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = 0U;
 2178              		.loc 1 1662 12
 2179 0096 3B68     		ldr	r3, [r7]
 2180 0098 0022     		movs	r2, #0
 2181 009a 1A80     		strh	r2, [r3]	@ movhi
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* as long as data have to be received */
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 2182              		.loc 1 1665 11
 2183 009c 74E0     		b	.L102
ARM GAS  /tmp/ccKkagmp.s 			page 68


 2184              	.L111:
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if IDLE flag is set */
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 2185              		.loc 1 1668 11
 2186 009e FB68     		ldr	r3, [r7, #12]
 2187 00a0 1B68     		ldr	r3, [r3]
 2188 00a2 1B68     		ldr	r3, [r3]
 2189 00a4 03F01003 		and	r3, r3, #16
 2190              		.loc 1 1668 10
 2191 00a8 102B     		cmp	r3, #16
 2192 00aa 14D1     		bne	.L103
 2193              	.LBB3:
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Clear IDLE flag in ISR */
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2194              		.loc 1 1671 9
 2195 00ac 0023     		movs	r3, #0
 2196 00ae 3B61     		str	r3, [r7, #16]
 2197 00b0 FB68     		ldr	r3, [r7, #12]
 2198 00b2 1B68     		ldr	r3, [r3]
 2199 00b4 1B68     		ldr	r3, [r3]
 2200 00b6 3B61     		str	r3, [r7, #16]
 2201 00b8 FB68     		ldr	r3, [r7, #12]
 2202 00ba 1B68     		ldr	r3, [r3]
 2203 00bc 5B68     		ldr	r3, [r3, #4]
 2204 00be 3B61     		str	r3, [r7, #16]
 2205 00c0 3B69     		ldr	r3, [r7, #16]
 2206              	.LBE3:
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (*RxLen > 0U)
 2207              		.loc 1 1675 13
 2208 00c2 3B68     		ldr	r3, [r7]
 2209 00c4 1B88     		ldrh	r3, [r3]
 2210              		.loc 1 1675 12
 2211 00c6 002B     		cmp	r3, #0
 2212 00c8 05D0     		beq	.L103
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2213              		.loc 1 1677 26
 2214 00ca FB68     		ldr	r3, [r7, #12]
 2215 00cc 2022     		movs	r2, #32
 2216 00ce 83F83E20 		strb	r2, [r3, #62]
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_OK;
 2217              		.loc 1 1679 18
 2218 00d2 0023     		movs	r3, #0
 2219 00d4 6DE0     		b	.L98
 2220              	.L103:
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if RXNE flag is set */
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 2221              		.loc 1 1684 11
ARM GAS  /tmp/ccKkagmp.s 			page 69


 2222 00d6 FB68     		ldr	r3, [r7, #12]
 2223 00d8 1B68     		ldr	r3, [r3]
 2224 00da 1B68     		ldr	r3, [r3]
 2225 00dc 03F02003 		and	r3, r3, #32
 2226              		.loc 1 1684 10
 2227 00e0 202B     		cmp	r3, #32
 2228 00e2 3CD1     		bne	.L104
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (pdata8bits == NULL)
 2229              		.loc 1 1686 12
 2230 00e4 FB69     		ldr	r3, [r7, #28]
 2231 00e6 002B     		cmp	r3, #0
 2232 00e8 0CD1     		bne	.L105
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 2233              		.loc 1 1688 42
 2234 00ea FB68     		ldr	r3, [r7, #12]
 2235 00ec 1B68     		ldr	r3, [r3]
 2236              		.loc 1 1688 52
 2237 00ee 5B68     		ldr	r3, [r3, #4]
 2238              		.loc 1 1688 26
 2239 00f0 9BB2     		uxth	r3, r3
 2240 00f2 C3F30803 		ubfx	r3, r3, #0, #9
 2241 00f6 9AB2     		uxth	r2, r3
 2242              		.loc 1 1688 24
 2243 00f8 BB69     		ldr	r3, [r7, #24]
 2244 00fa 1A80     		strh	r2, [r3]	@ movhi
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata16bits++;
 2245              		.loc 1 1689 22
 2246 00fc BB69     		ldr	r3, [r7, #24]
 2247 00fe 0233     		adds	r3, r3, #2
 2248 0100 BB61     		str	r3, [r7, #24]
 2249 0102 1FE0     		b	.L106
 2250              	.L105:
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_W
 2251              		.loc 1 1693 28
 2252 0104 FB68     		ldr	r3, [r7, #12]
 2253 0106 9B68     		ldr	r3, [r3, #8]
 2254              		.loc 1 1693 15
 2255 0108 B3F5805F 		cmp	r3, #4096
 2256 010c 07D0     		beq	.L107
 2257              		.loc 1 1693 79 discriminator 1
 2258 010e FB68     		ldr	r3, [r7, #12]
 2259 0110 9B68     		ldr	r3, [r3, #8]
 2260              		.loc 1 1693 63 discriminator 1
 2261 0112 002B     		cmp	r3, #0
 2262 0114 0AD1     		bne	.L108
 2263              		.loc 1 1693 129 discriminator 2
 2264 0116 FB68     		ldr	r3, [r7, #12]
 2265 0118 1B69     		ldr	r3, [r3, #16]
 2266              		.loc 1 1693 114 discriminator 2
 2267 011a 002B     		cmp	r3, #0
 2268 011c 06D1     		bne	.L108
 2269              	.L107:
ARM GAS  /tmp/ccKkagmp.s 			page 70


1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            {
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 2270              		.loc 1 1695 43
 2271 011e FB68     		ldr	r3, [r7, #12]
 2272 0120 1B68     		ldr	r3, [r3]
 2273              		.loc 1 1695 53
 2274 0122 5B68     		ldr	r3, [r3, #4]
 2275              		.loc 1 1695 28
 2276 0124 DAB2     		uxtb	r2, r3
 2277              		.loc 1 1695 26
 2278 0126 FB69     		ldr	r3, [r7, #28]
 2279 0128 1A70     		strb	r2, [r3]
 2280 012a 08E0     		b	.L109
 2281              	.L108:
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            }
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            else
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            {
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 2282              		.loc 1 1699 43
 2283 012c FB68     		ldr	r3, [r7, #12]
 2284 012e 1B68     		ldr	r3, [r3]
 2285              		.loc 1 1699 53
 2286 0130 5B68     		ldr	r3, [r3, #4]
 2287              		.loc 1 1699 28
 2288 0132 DBB2     		uxtb	r3, r3
 2289 0134 03F07F03 		and	r3, r3, #127
 2290 0138 DAB2     		uxtb	r2, r3
 2291              		.loc 1 1699 26
 2292 013a FB69     		ldr	r3, [r7, #28]
 2293 013c 1A70     		strb	r2, [r3]
 2294              	.L109:
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            }
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata8bits++;
 2295              		.loc 1 1702 21
 2296 013e FB69     		ldr	r3, [r7, #28]
 2297 0140 0133     		adds	r3, r3, #1
 2298 0142 FB61     		str	r3, [r7, #28]
 2299              	.L106:
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Increment number of received elements */
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *RxLen += 1U;
 2300              		.loc 1 1705 16
 2301 0144 3B68     		ldr	r3, [r7]
 2302 0146 1B88     		ldrh	r3, [r3]
 2303 0148 0133     		adds	r3, r3, #1
 2304 014a 9AB2     		uxth	r2, r3
 2305 014c 3B68     		ldr	r3, [r7]
 2306 014e 1A80     		strh	r2, [r3]	@ movhi
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount--;
 2307              		.loc 1 1706 14
 2308 0150 FB68     		ldr	r3, [r7, #12]
 2309 0152 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2310 0154 9BB2     		uxth	r3, r3
 2311              		.loc 1 1706 27
 2312 0156 013B     		subs	r3, r3, #1
 2313 0158 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccKkagmp.s 			page 71


 2314 015a FB68     		ldr	r3, [r7, #12]
 2315 015c DA85     		strh	r2, [r3, #46]	@ movhi
 2316              	.L104:
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check for the Timeout */
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (Timeout != HAL_MAX_DELAY)
 2317              		.loc 1 1710 10
 2318 015e BB6A     		ldr	r3, [r7, #40]
 2319 0160 B3F1FF3F 		cmp	r3, #-1
 2320 0164 10D0     		beq	.L102
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 2321              		.loc 1 1712 15
 2322 0166 FFF7FEFF 		bl	HAL_GetTick
 2323 016a 0246     		mov	r2, r0
 2324              		.loc 1 1712 29
 2325 016c 7B69     		ldr	r3, [r7, #20]
 2326 016e D31A     		subs	r3, r2, r3
 2327              		.loc 1 1712 12
 2328 0170 BA6A     		ldr	r2, [r7, #40]
 2329 0172 9A42     		cmp	r2, r3
 2330 0174 02D3     		bcc	.L110
 2331              		.loc 1 1712 53 discriminator 1
 2332 0176 BB6A     		ldr	r3, [r7, #40]
 2333 0178 002B     		cmp	r3, #0
 2334 017a 05D1     		bne	.L102
 2335              	.L110:
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2336              		.loc 1 1714 26
 2337 017c FB68     		ldr	r3, [r7, #12]
 2338 017e 2022     		movs	r2, #32
 2339 0180 83F83E20 		strb	r2, [r3, #62]
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2340              		.loc 1 1716 18
 2341 0184 0323     		movs	r3, #3
 2342 0186 14E0     		b	.L98
 2343              	.L102:
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2344              		.loc 1 1665 17
 2345 0188 FB68     		ldr	r3, [r7, #12]
 2346 018a DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2347 018c 9BB2     		uxth	r3, r3
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2348              		.loc 1 1665 11
 2349 018e 002B     		cmp	r3, #0
 2350 0190 85D1     		bne	.L111
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set number of received elements in output parameter : RxLen */
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 2351              		.loc 1 1722 19
 2352 0192 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 72


 2353 0194 9A8D     		ldrh	r2, [r3, #44]
 2354              		.loc 1 1722 39
 2355 0196 FB68     		ldr	r3, [r7, #12]
 2356 0198 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2357 019a 9BB2     		uxth	r3, r3
 2358              		.loc 1 1722 32
 2359 019c D31A     		subs	r3, r2, r3
 2360 019e 9AB2     		uxth	r2, r3
 2361              		.loc 1 1722 12
 2362 01a0 3B68     		ldr	r3, [r7]
 2363 01a2 1A80     		strh	r2, [r3]	@ movhi
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2364              		.loc 1 1724 20
 2365 01a4 FB68     		ldr	r3, [r7, #12]
 2366 01a6 2022     		movs	r2, #32
 2367 01a8 83F83E20 		strb	r2, [r3, #62]
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 2368              		.loc 1 1726 12
 2369 01ac 0023     		movs	r3, #0
 2370 01ae 00E0     		b	.L98
 2371              	.L95:
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2372              		.loc 1 1730 12
 2373 01b0 0223     		movs	r3, #2
 2374              	.L98:
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2375              		.loc 1 1732 1
 2376 01b2 1846     		mov	r0, r3
 2377 01b4 2037     		adds	r7, r7, #32
 2378              	.LCFI88:
 2379              		.cfi_def_cfa_offset 8
 2380 01b6 BD46     		mov	sp, r7
 2381              	.LCFI89:
 2382              		.cfi_def_cfa_register 13
 2383              		@ sp needed
 2384 01b8 80BD     		pop	{r7, pc}
 2385              		.cfi_endproc
 2386              	.LFE81:
 2388              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 2389              		.align	1
 2390              		.global	HAL_UARTEx_ReceiveToIdle_IT
 2391              		.syntax unified
 2392              		.thumb
 2393              		.thumb_func
 2395              	HAL_UARTEx_ReceiveToIdle_IT:
 2396              	.LFB82:
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data is r
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to UART interrupts raised by RXNE and IDLE events. Callback is called at end of recepti
ARM GAS  /tmp/ccKkagmp.s 			page 73


1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         number of received data elements.
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2397              		.loc 1 1748 1
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 24
 2400              		@ frame_needed = 1, uses_anonymous_args = 0
 2401 0000 80B5     		push	{r7, lr}
 2402              	.LCFI90:
 2403              		.cfi_def_cfa_offset 8
 2404              		.cfi_offset 7, -8
 2405              		.cfi_offset 14, -4
 2406 0002 86B0     		sub	sp, sp, #24
 2407              	.LCFI91:
 2408              		.cfi_def_cfa_offset 32
 2409 0004 00AF     		add	r7, sp, #0
 2410              	.LCFI92:
 2411              		.cfi_def_cfa_register 7
 2412 0006 F860     		str	r0, [r7, #12]
 2413 0008 B960     		str	r1, [r7, #8]
 2414 000a 1346     		mov	r3, r2
 2415 000c FB80     		strh	r3, [r7, #6]	@ movhi
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2416              		.loc 1 1752 12
 2417 000e FB68     		ldr	r3, [r7, #12]
 2418 0010 93F83E30 		ldrb	r3, [r3, #62]
 2419 0014 DBB2     		uxtb	r3, r3
 2420              		.loc 1 1752 6
 2421 0016 202B     		cmp	r3, #32
 2422 0018 3CD1     		bne	.L113
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2423              		.loc 1 1754 8
 2424 001a BB68     		ldr	r3, [r7, #8]
 2425 001c 002B     		cmp	r3, #0
 2426 001e 02D0     		beq	.L114
 2427              		.loc 1 1754 25 discriminator 1
 2428 0020 FB88     		ldrh	r3, [r7, #6]
 2429 0022 002B     		cmp	r3, #0
 2430 0024 01D1     		bne	.L115
 2431              	.L114:
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2432              		.loc 1 1756 14
 2433 0026 0123     		movs	r3, #1
 2434 0028 35E0     		b	.L116
ARM GAS  /tmp/ccKkagmp.s 			page 74


 2435              	.L115:
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 2436              		.loc 1 1759 5
 2437 002a FB68     		ldr	r3, [r7, #12]
 2438 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2439 0030 012B     		cmp	r3, #1
 2440 0032 01D1     		bne	.L117
 2441              		.loc 1 1759 5 is_stmt 0 discriminator 1
 2442 0034 0223     		movs	r3, #2
 2443 0036 2EE0     		b	.L116
 2444              	.L117:
 2445              		.loc 1 1759 5 discriminator 2
 2446 0038 FB68     		ldr	r3, [r7, #12]
 2447 003a 0122     		movs	r2, #1
 2448 003c 83F83C20 		strb	r2, [r3, #60]
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2449              		.loc 1 1762 26 is_stmt 1 discriminator 2
 2450 0040 FB68     		ldr	r3, [r7, #12]
 2451 0042 0122     		movs	r2, #1
 2452 0044 1A63     		str	r2, [r3, #48]
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 2453              		.loc 1 1764 15 discriminator 2
 2454 0046 FB88     		ldrh	r3, [r7, #6]
 2455 0048 1A46     		mov	r2, r3
 2456 004a B968     		ldr	r1, [r7, #8]
 2457 004c F868     		ldr	r0, [r7, #12]
 2458 004e FFF7FEFF 		bl	UART_Start_Receive_IT
 2459 0052 0346     		mov	r3, r0
 2460 0054 FB75     		strb	r3, [r7, #23]
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2461              		.loc 1 1767 8 discriminator 2
 2462 0056 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2463 0058 002B     		cmp	r3, #0
 2464 005a 19D1     		bne	.L118
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2465              		.loc 1 1769 16
 2466 005c FB68     		ldr	r3, [r7, #12]
 2467 005e 1B6B     		ldr	r3, [r3, #48]
 2468              		.loc 1 1769 10
 2469 0060 012B     		cmp	r3, #1
 2470 0062 13D1     		bne	.L119
 2471              	.LBB4:
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2472              		.loc 1 1771 9
 2473 0064 0023     		movs	r3, #0
 2474 0066 3B61     		str	r3, [r7, #16]
 2475 0068 FB68     		ldr	r3, [r7, #12]
 2476 006a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 75


 2477 006c 1B68     		ldr	r3, [r3]
 2478 006e 3B61     		str	r3, [r7, #16]
 2479 0070 FB68     		ldr	r3, [r7, #12]
 2480 0072 1B68     		ldr	r3, [r3]
 2481 0074 5B68     		ldr	r3, [r3, #4]
 2482 0076 3B61     		str	r3, [r7, #16]
 2483 0078 3B69     		ldr	r3, [r7, #16]
 2484              	.LBE4:
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 2485              		.loc 1 1772 9
 2486 007a FB68     		ldr	r3, [r7, #12]
 2487 007c 1B68     		ldr	r3, [r3]
 2488 007e DA68     		ldr	r2, [r3, #12]
 2489 0080 FB68     		ldr	r3, [r7, #12]
 2490 0082 1B68     		ldr	r3, [r3]
 2491 0084 42F01002 		orr	r2, r2, #16
 2492 0088 DA60     		str	r2, [r3, #12]
 2493 008a 01E0     		b	.L118
 2494              	.L119:
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
 2495              		.loc 1 1780 16
 2496 008c 0123     		movs	r3, #1
 2497 008e FB75     		strb	r3, [r7, #23]
 2498              	.L118:
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 2499              		.loc 1 1784 12
 2500 0090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2501 0092 00E0     		b	.L116
 2502              	.L113:
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2503              		.loc 1 1788 12
 2504 0094 0223     		movs	r3, #2
 2505              	.L116:
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2506              		.loc 1 1790 1
 2507 0096 1846     		mov	r0, r3
 2508 0098 1837     		adds	r7, r7, #24
 2509              	.LCFI93:
 2510              		.cfi_def_cfa_offset 8
 2511 009a BD46     		mov	sp, r7
 2512              	.LCFI94:
 2513              		.cfi_def_cfa_register 13
 2514              		@ sp needed
ARM GAS  /tmp/ccKkagmp.s 			page 76


 2515 009c 80BD     		pop	{r7, pc}
 2516              		.cfi_endproc
 2517              	.LFE82:
 2519              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 2520              		.align	1
 2521              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 2522              		.syntax unified
 2523              		.thumb
 2524              		.thumb_func
 2526              	HAL_UARTEx_ReceiveToIdle_DMA:
 2527              	.LFB83:
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode till either the expected number of data is receive
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to DMA services, transferring automatically received data elements in user reception bu
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         calling registered callbacks at half/end of reception. UART IDLE events are also used t
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         reception phase as ended. In all cases, callback execution will indicate number of rece
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the parity bit (MSB position).
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2528              		.loc 1 1809 1
 2529              		.cfi_startproc
 2530              		@ args = 0, pretend = 0, frame = 24
 2531              		@ frame_needed = 1, uses_anonymous_args = 0
 2532 0000 80B5     		push	{r7, lr}
 2533              	.LCFI95:
 2534              		.cfi_def_cfa_offset 8
 2535              		.cfi_offset 7, -8
 2536              		.cfi_offset 14, -4
 2537 0002 86B0     		sub	sp, sp, #24
 2538              	.LCFI96:
 2539              		.cfi_def_cfa_offset 32
 2540 0004 00AF     		add	r7, sp, #0
 2541              	.LCFI97:
 2542              		.cfi_def_cfa_register 7
 2543 0006 F860     		str	r0, [r7, #12]
 2544 0008 B960     		str	r1, [r7, #8]
 2545 000a 1346     		mov	r3, r2
 2546 000c FB80     		strh	r3, [r7, #6]	@ movhi
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2547              		.loc 1 1813 12
 2548 000e FB68     		ldr	r3, [r7, #12]
 2549 0010 93F83E30 		ldrb	r3, [r3, #62]
 2550 0014 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccKkagmp.s 			page 77


 2551              		.loc 1 1813 6
 2552 0016 202B     		cmp	r3, #32
 2553 0018 3CD1     		bne	.L121
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2554              		.loc 1 1815 8
 2555 001a BB68     		ldr	r3, [r7, #8]
 2556 001c 002B     		cmp	r3, #0
 2557 001e 02D0     		beq	.L122
 2558              		.loc 1 1815 25 discriminator 1
 2559 0020 FB88     		ldrh	r3, [r7, #6]
 2560 0022 002B     		cmp	r3, #0
 2561 0024 01D1     		bne	.L123
 2562              	.L122:
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2563              		.loc 1 1817 14
 2564 0026 0123     		movs	r3, #1
 2565 0028 35E0     		b	.L124
 2566              	.L123:
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 2567              		.loc 1 1820 5
 2568 002a FB68     		ldr	r3, [r7, #12]
 2569 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2570 0030 012B     		cmp	r3, #1
 2571 0032 01D1     		bne	.L125
 2572              		.loc 1 1820 5 is_stmt 0 discriminator 1
 2573 0034 0223     		movs	r3, #2
 2574 0036 2EE0     		b	.L124
 2575              	.L125:
 2576              		.loc 1 1820 5 discriminator 2
 2577 0038 FB68     		ldr	r3, [r7, #12]
 2578 003a 0122     		movs	r2, #1
 2579 003c 83F83C20 		strb	r2, [r3, #60]
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2580              		.loc 1 1823 26 is_stmt 1 discriminator 2
 2581 0040 FB68     		ldr	r3, [r7, #12]
 2582 0042 0122     		movs	r2, #1
 2583 0044 1A63     		str	r2, [r3, #48]
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 2584              		.loc 1 1825 15 discriminator 2
 2585 0046 FB88     		ldrh	r3, [r7, #6]
 2586 0048 1A46     		mov	r2, r3
 2587 004a B968     		ldr	r1, [r7, #8]
 2588 004c F868     		ldr	r0, [r7, #12]
 2589 004e FFF7FEFF 		bl	UART_Start_Receive_DMA
 2590 0052 0346     		mov	r3, r0
 2591 0054 FB75     		strb	r3, [r7, #23]
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2592              		.loc 1 1828 8 discriminator 2
ARM GAS  /tmp/ccKkagmp.s 			page 78


 2593 0056 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2594 0058 002B     		cmp	r3, #0
 2595 005a 19D1     		bne	.L126
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2596              		.loc 1 1830 16
 2597 005c FB68     		ldr	r3, [r7, #12]
 2598 005e 1B6B     		ldr	r3, [r3, #48]
 2599              		.loc 1 1830 10
 2600 0060 012B     		cmp	r3, #1
 2601 0062 13D1     		bne	.L127
 2602              	.LBB5:
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2603              		.loc 1 1832 9
 2604 0064 0023     		movs	r3, #0
 2605 0066 3B61     		str	r3, [r7, #16]
 2606 0068 FB68     		ldr	r3, [r7, #12]
 2607 006a 1B68     		ldr	r3, [r3]
 2608 006c 1B68     		ldr	r3, [r3]
 2609 006e 3B61     		str	r3, [r7, #16]
 2610 0070 FB68     		ldr	r3, [r7, #12]
 2611 0072 1B68     		ldr	r3, [r3]
 2612 0074 5B68     		ldr	r3, [r3, #4]
 2613 0076 3B61     		str	r3, [r7, #16]
 2614 0078 3B69     		ldr	r3, [r7, #16]
 2615              	.LBE5:
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 2616              		.loc 1 1833 9
 2617 007a FB68     		ldr	r3, [r7, #12]
 2618 007c 1B68     		ldr	r3, [r3]
 2619 007e DA68     		ldr	r2, [r3, #12]
 2620 0080 FB68     		ldr	r3, [r7, #12]
 2621 0082 1B68     		ldr	r3, [r3]
 2622 0084 42F01002 		orr	r2, r2, #16
 2623 0088 DA60     		str	r2, [r3, #12]
 2624 008a 01E0     		b	.L126
 2625              	.L127:
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
 2626              		.loc 1 1841 16
 2627 008c 0123     		movs	r3, #1
 2628 008e FB75     		strb	r3, [r7, #23]
 2629              	.L126:
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 2630              		.loc 1 1845 12
 2631 0090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2632 0092 00E0     		b	.L124
ARM GAS  /tmp/ccKkagmp.s 			page 79


 2633              	.L121:
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2634              		.loc 1 1849 12
 2635 0094 0223     		movs	r3, #2
 2636              	.L124:
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2637              		.loc 1 1851 1
 2638 0096 1846     		mov	r0, r3
 2639 0098 1837     		adds	r7, r7, #24
 2640              	.LCFI98:
 2641              		.cfi_def_cfa_offset 8
 2642 009a BD46     		mov	sp, r7
 2643              	.LCFI99:
 2644              		.cfi_def_cfa_register 13
 2645              		@ sp needed
 2646 009c 80BD     		pop	{r7, pc}
 2647              		.cfi_endproc
 2648              	.LFE83:
 2650              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2651              		.align	1
 2652              		.global	HAL_UART_Abort
 2653              		.syntax unified
 2654              		.thumb
 2655              		.thumb_func
 2657              	HAL_UART_Abort:
 2658              	.LFB84:
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2659              		.loc 1 1866 1
 2660              		.cfi_startproc
 2661              		@ args = 0, pretend = 0, frame = 8
 2662              		@ frame_needed = 1, uses_anonymous_args = 0
 2663 0000 80B5     		push	{r7, lr}
 2664              	.LCFI100:
 2665              		.cfi_def_cfa_offset 8
 2666              		.cfi_offset 7, -8
 2667              		.cfi_offset 14, -4
 2668 0002 82B0     		sub	sp, sp, #8
 2669              	.LCFI101:
 2670              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccKkagmp.s 			page 80


 2671 0004 00AF     		add	r7, sp, #0
 2672              	.LCFI102:
 2673              		.cfi_def_cfa_register 7
 2674 0006 7860     		str	r0, [r7, #4]
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2675              		.loc 1 1868 3
 2676 0008 7B68     		ldr	r3, [r7, #4]
 2677 000a 1B68     		ldr	r3, [r3]
 2678 000c DA68     		ldr	r2, [r3, #12]
 2679 000e 7B68     		ldr	r3, [r7, #4]
 2680 0010 1B68     		ldr	r3, [r3]
 2681 0012 22F4F072 		bic	r2, r2, #480
 2682 0016 DA60     		str	r2, [r3, #12]
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2683              		.loc 1 1869 3
 2684 0018 7B68     		ldr	r3, [r7, #4]
 2685 001a 1B68     		ldr	r3, [r3]
 2686 001c 5A69     		ldr	r2, [r3, #20]
 2687 001e 7B68     		ldr	r3, [r7, #4]
 2688 0020 1B68     		ldr	r3, [r3]
 2689 0022 22F00102 		bic	r2, r2, #1
 2690 0026 5A61     		str	r2, [r3, #20]
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2691              		.loc 1 1872 12
 2692 0028 7B68     		ldr	r3, [r7, #4]
 2693 002a 1B6B     		ldr	r3, [r3, #48]
 2694              		.loc 1 1872 6
 2695 002c 012B     		cmp	r3, #1
 2696 002e 07D1     		bne	.L129
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 2697              		.loc 1 1874 5
 2698 0030 7B68     		ldr	r3, [r7, #4]
 2699 0032 1B68     		ldr	r3, [r3]
 2700 0034 DA68     		ldr	r2, [r3, #12]
 2701 0036 7B68     		ldr	r3, [r7, #4]
 2702 0038 1B68     		ldr	r3, [r3]
 2703 003a 22F01002 		bic	r2, r2, #16
 2704 003e DA60     		str	r2, [r3, #12]
 2705              	.L129:
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2706              		.loc 1 1878 7
 2707 0040 7B68     		ldr	r3, [r7, #4]
 2708 0042 1B68     		ldr	r3, [r3]
 2709 0044 5B69     		ldr	r3, [r3, #20]
 2710 0046 03F08003 		and	r3, r3, #128
 2711              		.loc 1 1878 6
 2712 004a 002B     		cmp	r3, #0
 2713 004c 24D0     		beq	.L130
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
ARM GAS  /tmp/ccKkagmp.s 			page 81


 2714              		.loc 1 1880 5
 2715 004e 7B68     		ldr	r3, [r7, #4]
 2716 0050 1B68     		ldr	r3, [r3]
 2717 0052 5A69     		ldr	r2, [r3, #20]
 2718 0054 7B68     		ldr	r3, [r7, #4]
 2719 0056 1B68     		ldr	r3, [r3]
 2720 0058 22F08002 		bic	r2, r2, #128
 2721 005c 5A61     		str	r2, [r3, #20]
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2722              		.loc 1 1883 14
 2723 005e 7B68     		ldr	r3, [r7, #4]
 2724 0060 5B6B     		ldr	r3, [r3, #52]
 2725              		.loc 1 1883 8
 2726 0062 002B     		cmp	r3, #0
 2727 0064 18D0     		beq	.L130
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2728              		.loc 1 1887 12
 2729 0066 7B68     		ldr	r3, [r7, #4]
 2730 0068 5B6B     		ldr	r3, [r3, #52]
 2731              		.loc 1 1887 40
 2732 006a 0022     		movs	r2, #0
 2733 006c 5A63     		str	r2, [r3, #52]
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2734              		.loc 1 1889 11
 2735 006e 7B68     		ldr	r3, [r7, #4]
 2736 0070 5B6B     		ldr	r3, [r3, #52]
 2737 0072 1846     		mov	r0, r3
 2738 0074 FFF7FEFF 		bl	HAL_DMA_Abort
 2739 0078 0346     		mov	r3, r0
 2740              		.loc 1 1889 10
 2741 007a 002B     		cmp	r3, #0
 2742 007c 0CD0     		beq	.L130
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2743              		.loc 1 1891 13
 2744 007e 7B68     		ldr	r3, [r7, #4]
 2745 0080 5B6B     		ldr	r3, [r3, #52]
 2746 0082 1846     		mov	r0, r3
 2747 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2748 0088 0346     		mov	r3, r0
 2749              		.loc 1 1891 12
 2750 008a 202B     		cmp	r3, #32
 2751 008c 04D1     		bne	.L130
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2752              		.loc 1 1894 28
 2753 008e 7B68     		ldr	r3, [r7, #4]
 2754 0090 1022     		movs	r2, #16
 2755 0092 1A64     		str	r2, [r3, #64]
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 82


1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2756              		.loc 1 1896 18
 2757 0094 0323     		movs	r3, #3
 2758 0096 40E0     		b	.L131
 2759              	.L130:
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2760              		.loc 1 1903 7
 2761 0098 7B68     		ldr	r3, [r7, #4]
 2762 009a 1B68     		ldr	r3, [r3]
 2763 009c 5B69     		ldr	r3, [r3, #20]
 2764 009e 03F04003 		and	r3, r3, #64
 2765              		.loc 1 1903 6
 2766 00a2 002B     		cmp	r3, #0
 2767 00a4 24D0     		beq	.L132
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2768              		.loc 1 1905 5
 2769 00a6 7B68     		ldr	r3, [r7, #4]
 2770 00a8 1B68     		ldr	r3, [r3]
 2771 00aa 5A69     		ldr	r2, [r3, #20]
 2772 00ac 7B68     		ldr	r3, [r7, #4]
 2773 00ae 1B68     		ldr	r3, [r3]
 2774 00b0 22F04002 		bic	r2, r2, #64
 2775 00b4 5A61     		str	r2, [r3, #20]
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2776              		.loc 1 1908 14
 2777 00b6 7B68     		ldr	r3, [r7, #4]
 2778 00b8 9B6B     		ldr	r3, [r3, #56]
 2779              		.loc 1 1908 8
 2780 00ba 002B     		cmp	r3, #0
 2781 00bc 18D0     		beq	.L132
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2782              		.loc 1 1912 12
 2783 00be 7B68     		ldr	r3, [r7, #4]
 2784 00c0 9B6B     		ldr	r3, [r3, #56]
 2785              		.loc 1 1912 40
 2786 00c2 0022     		movs	r2, #0
 2787 00c4 5A63     		str	r2, [r3, #52]
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2788              		.loc 1 1914 11
 2789 00c6 7B68     		ldr	r3, [r7, #4]
 2790 00c8 9B6B     		ldr	r3, [r3, #56]
 2791 00ca 1846     		mov	r0, r3
 2792 00cc FFF7FEFF 		bl	HAL_DMA_Abort
 2793 00d0 0346     		mov	r3, r0
ARM GAS  /tmp/ccKkagmp.s 			page 83


 2794              		.loc 1 1914 10
 2795 00d2 002B     		cmp	r3, #0
 2796 00d4 0CD0     		beq	.L132
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2797              		.loc 1 1916 13
 2798 00d6 7B68     		ldr	r3, [r7, #4]
 2799 00d8 9B6B     		ldr	r3, [r3, #56]
 2800 00da 1846     		mov	r0, r3
 2801 00dc FFF7FEFF 		bl	HAL_DMA_GetError
 2802 00e0 0346     		mov	r3, r0
 2803              		.loc 1 1916 12
 2804 00e2 202B     		cmp	r3, #32
 2805 00e4 04D1     		bne	.L132
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2806              		.loc 1 1919 28
 2807 00e6 7B68     		ldr	r3, [r7, #4]
 2808 00e8 1022     		movs	r2, #16
 2809 00ea 1A64     		str	r2, [r3, #64]
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2810              		.loc 1 1921 18
 2811 00ec 0323     		movs	r3, #3
 2812 00ee 14E0     		b	.L131
 2813              	.L132:
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2814              		.loc 1 1928 22
 2815 00f0 7B68     		ldr	r3, [r7, #4]
 2816 00f2 0022     		movs	r2, #0
 2817 00f4 DA84     		strh	r2, [r3, #38]	@ movhi
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2818              		.loc 1 1929 22
 2819 00f6 7B68     		ldr	r3, [r7, #4]
 2820 00f8 0022     		movs	r2, #0
 2821 00fa DA85     		strh	r2, [r3, #46]	@ movhi
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2822              		.loc 1 1932 20
 2823 00fc 7B68     		ldr	r3, [r7, #4]
 2824 00fe 0022     		movs	r2, #0
 2825 0100 1A64     		str	r2, [r3, #64]
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2826              		.loc 1 1935 18
 2827 0102 7B68     		ldr	r3, [r7, #4]
 2828 0104 2022     		movs	r2, #32
 2829 0106 83F83E20 		strb	r2, [r3, #62]
ARM GAS  /tmp/ccKkagmp.s 			page 84


1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2830              		.loc 1 1936 17
 2831 010a 7B68     		ldr	r3, [r7, #4]
 2832 010c 2022     		movs	r2, #32
 2833 010e 83F83D20 		strb	r2, [r3, #61]
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2834              		.loc 1 1937 24
 2835 0112 7B68     		ldr	r3, [r7, #4]
 2836 0114 0022     		movs	r2, #0
 2837 0116 1A63     		str	r2, [r3, #48]
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2838              		.loc 1 1939 10
 2839 0118 0023     		movs	r3, #0
 2840              	.L131:
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2841              		.loc 1 1940 1
 2842 011a 1846     		mov	r0, r3
 2843 011c 0837     		adds	r7, r7, #8
 2844              	.LCFI103:
 2845              		.cfi_def_cfa_offset 8
 2846 011e BD46     		mov	sp, r7
 2847              	.LCFI104:
 2848              		.cfi_def_cfa_register 13
 2849              		@ sp needed
 2850 0120 80BD     		pop	{r7, pc}
 2851              		.cfi_endproc
 2852              	.LFE84:
 2854              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2855              		.align	1
 2856              		.global	HAL_UART_AbortTransmit
 2857              		.syntax unified
 2858              		.thumb
 2859              		.thumb_func
 2861              	HAL_UART_AbortTransmit:
 2862              	.LFB85:
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2863              		.loc 1 1955 1
 2864              		.cfi_startproc
 2865              		@ args = 0, pretend = 0, frame = 8
 2866              		@ frame_needed = 1, uses_anonymous_args = 0
 2867 0000 80B5     		push	{r7, lr}
 2868              	.LCFI105:
ARM GAS  /tmp/ccKkagmp.s 			page 85


 2869              		.cfi_def_cfa_offset 8
 2870              		.cfi_offset 7, -8
 2871              		.cfi_offset 14, -4
 2872 0002 82B0     		sub	sp, sp, #8
 2873              	.LCFI106:
 2874              		.cfi_def_cfa_offset 16
 2875 0004 00AF     		add	r7, sp, #0
 2876              	.LCFI107:
 2877              		.cfi_def_cfa_register 7
 2878 0006 7860     		str	r0, [r7, #4]
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2879              		.loc 1 1957 3
 2880 0008 7B68     		ldr	r3, [r7, #4]
 2881 000a 1B68     		ldr	r3, [r3]
 2882 000c DA68     		ldr	r2, [r3, #12]
 2883 000e 7B68     		ldr	r3, [r7, #4]
 2884 0010 1B68     		ldr	r3, [r3]
 2885 0012 22F0C002 		bic	r2, r2, #192
 2886 0016 DA60     		str	r2, [r3, #12]
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2887              		.loc 1 1960 7
 2888 0018 7B68     		ldr	r3, [r7, #4]
 2889 001a 1B68     		ldr	r3, [r3]
 2890 001c 5B69     		ldr	r3, [r3, #20]
 2891 001e 03F08003 		and	r3, r3, #128
 2892              		.loc 1 1960 6
 2893 0022 002B     		cmp	r3, #0
 2894 0024 24D0     		beq	.L134
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2895              		.loc 1 1962 5
 2896 0026 7B68     		ldr	r3, [r7, #4]
 2897 0028 1B68     		ldr	r3, [r3]
 2898 002a 5A69     		ldr	r2, [r3, #20]
 2899 002c 7B68     		ldr	r3, [r7, #4]
 2900 002e 1B68     		ldr	r3, [r3]
 2901 0030 22F08002 		bic	r2, r2, #128
 2902 0034 5A61     		str	r2, [r3, #20]
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2903              		.loc 1 1965 14
 2904 0036 7B68     		ldr	r3, [r7, #4]
 2905 0038 5B6B     		ldr	r3, [r3, #52]
 2906              		.loc 1 1965 8
 2907 003a 002B     		cmp	r3, #0
 2908 003c 18D0     		beq	.L134
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2909              		.loc 1 1969 12
 2910 003e 7B68     		ldr	r3, [r7, #4]
 2911 0040 5B6B     		ldr	r3, [r3, #52]
ARM GAS  /tmp/ccKkagmp.s 			page 86


 2912              		.loc 1 1969 40
 2913 0042 0022     		movs	r2, #0
 2914 0044 5A63     		str	r2, [r3, #52]
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2915              		.loc 1 1971 11
 2916 0046 7B68     		ldr	r3, [r7, #4]
 2917 0048 5B6B     		ldr	r3, [r3, #52]
 2918 004a 1846     		mov	r0, r3
 2919 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2920 0050 0346     		mov	r3, r0
 2921              		.loc 1 1971 10
 2922 0052 002B     		cmp	r3, #0
 2923 0054 0CD0     		beq	.L134
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2924              		.loc 1 1973 13
 2925 0056 7B68     		ldr	r3, [r7, #4]
 2926 0058 5B6B     		ldr	r3, [r3, #52]
 2927 005a 1846     		mov	r0, r3
 2928 005c FFF7FEFF 		bl	HAL_DMA_GetError
 2929 0060 0346     		mov	r3, r0
 2930              		.loc 1 1973 12
 2931 0062 202B     		cmp	r3, #32
 2932 0064 04D1     		bne	.L134
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2933              		.loc 1 1976 28
 2934 0066 7B68     		ldr	r3, [r7, #4]
 2935 0068 1022     		movs	r2, #16
 2936 006a 1A64     		str	r2, [r3, #64]
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2937              		.loc 1 1978 18
 2938 006c 0323     		movs	r3, #3
 2939 006e 07E0     		b	.L135
 2940              	.L134:
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2941              		.loc 1 1985 22
 2942 0070 7B68     		ldr	r3, [r7, #4]
 2943 0072 0022     		movs	r2, #0
 2944 0074 DA84     		strh	r2, [r3, #38]	@ movhi
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2945              		.loc 1 1988 17
 2946 0076 7B68     		ldr	r3, [r7, #4]
 2947 0078 2022     		movs	r2, #32
 2948 007a 83F83D20 		strb	r2, [r3, #61]
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 87


1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2949              		.loc 1 1990 10
 2950 007e 0023     		movs	r3, #0
 2951              	.L135:
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2952              		.loc 1 1991 1
 2953 0080 1846     		mov	r0, r3
 2954 0082 0837     		adds	r7, r7, #8
 2955              	.LCFI108:
 2956              		.cfi_def_cfa_offset 8
 2957 0084 BD46     		mov	sp, r7
 2958              	.LCFI109:
 2959              		.cfi_def_cfa_register 13
 2960              		@ sp needed
 2961 0086 80BD     		pop	{r7, pc}
 2962              		.cfi_endproc
 2963              	.LFE85:
 2965              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2966              		.align	1
 2967              		.global	HAL_UART_AbortReceive
 2968              		.syntax unified
 2969              		.thumb
 2970              		.thumb_func
 2972              	HAL_UART_AbortReceive:
 2973              	.LFB86:
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2974              		.loc 1 2006 1
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 8
 2977              		@ frame_needed = 1, uses_anonymous_args = 0
 2978 0000 80B5     		push	{r7, lr}
 2979              	.LCFI110:
 2980              		.cfi_def_cfa_offset 8
 2981              		.cfi_offset 7, -8
 2982              		.cfi_offset 14, -4
 2983 0002 82B0     		sub	sp, sp, #8
 2984              	.LCFI111:
 2985              		.cfi_def_cfa_offset 16
 2986 0004 00AF     		add	r7, sp, #0
 2987              	.LCFI112:
 2988              		.cfi_def_cfa_register 7
 2989 0006 7860     		str	r0, [r7, #4]
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
ARM GAS  /tmp/ccKkagmp.s 			page 88


2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2990              		.loc 1 2008 3
 2991 0008 7B68     		ldr	r3, [r7, #4]
 2992 000a 1B68     		ldr	r3, [r3]
 2993 000c DA68     		ldr	r2, [r3, #12]
 2994 000e 7B68     		ldr	r3, [r7, #4]
 2995 0010 1B68     		ldr	r3, [r3]
 2996 0012 22F49072 		bic	r2, r2, #288
 2997 0016 DA60     		str	r2, [r3, #12]
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2998              		.loc 1 2009 3
 2999 0018 7B68     		ldr	r3, [r7, #4]
 3000 001a 1B68     		ldr	r3, [r3]
 3001 001c 5A69     		ldr	r2, [r3, #20]
 3002 001e 7B68     		ldr	r3, [r7, #4]
 3003 0020 1B68     		ldr	r3, [r3]
 3004 0022 22F00102 		bic	r2, r2, #1
 3005 0026 5A61     		str	r2, [r3, #20]
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3006              		.loc 1 2012 12
 3007 0028 7B68     		ldr	r3, [r7, #4]
 3008 002a 1B6B     		ldr	r3, [r3, #48]
 3009              		.loc 1 2012 6
 3010 002c 012B     		cmp	r3, #1
 3011 002e 07D1     		bne	.L137
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3012              		.loc 1 2014 5
 3013 0030 7B68     		ldr	r3, [r7, #4]
 3014 0032 1B68     		ldr	r3, [r3]
 3015 0034 DA68     		ldr	r2, [r3, #12]
 3016 0036 7B68     		ldr	r3, [r7, #4]
 3017 0038 1B68     		ldr	r3, [r3]
 3018 003a 22F01002 		bic	r2, r2, #16
 3019 003e DA60     		str	r2, [r3, #12]
 3020              	.L137:
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3021              		.loc 1 2018 7
 3022 0040 7B68     		ldr	r3, [r7, #4]
 3023 0042 1B68     		ldr	r3, [r3]
 3024 0044 5B69     		ldr	r3, [r3, #20]
 3025 0046 03F04003 		and	r3, r3, #64
 3026              		.loc 1 2018 6
 3027 004a 002B     		cmp	r3, #0
 3028 004c 24D0     		beq	.L138
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3029              		.loc 1 2020 5
 3030 004e 7B68     		ldr	r3, [r7, #4]
 3031 0050 1B68     		ldr	r3, [r3]
 3032 0052 5A69     		ldr	r2, [r3, #20]
 3033 0054 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccKkagmp.s 			page 89


 3034 0056 1B68     		ldr	r3, [r3]
 3035 0058 22F04002 		bic	r2, r2, #64
 3036 005c 5A61     		str	r2, [r3, #20]
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3037              		.loc 1 2023 14
 3038 005e 7B68     		ldr	r3, [r7, #4]
 3039 0060 9B6B     		ldr	r3, [r3, #56]
 3040              		.loc 1 2023 8
 3041 0062 002B     		cmp	r3, #0
 3042 0064 18D0     		beq	.L138
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3043              		.loc 1 2027 12
 3044 0066 7B68     		ldr	r3, [r7, #4]
 3045 0068 9B6B     		ldr	r3, [r3, #56]
 3046              		.loc 1 2027 40
 3047 006a 0022     		movs	r2, #0
 3048 006c 5A63     		str	r2, [r3, #52]
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 3049              		.loc 1 2029 11
 3050 006e 7B68     		ldr	r3, [r7, #4]
 3051 0070 9B6B     		ldr	r3, [r3, #56]
 3052 0072 1846     		mov	r0, r3
 3053 0074 FFF7FEFF 		bl	HAL_DMA_Abort
 3054 0078 0346     		mov	r3, r0
 3055              		.loc 1 2029 10
 3056 007a 002B     		cmp	r3, #0
 3057 007c 0CD0     		beq	.L138
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 3058              		.loc 1 2031 13
 3059 007e 7B68     		ldr	r3, [r7, #4]
 3060 0080 9B6B     		ldr	r3, [r3, #56]
 3061 0082 1846     		mov	r0, r3
 3062 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 3063 0088 0346     		mov	r3, r0
 3064              		.loc 1 2031 12
 3065 008a 202B     		cmp	r3, #32
 3066 008c 04D1     		bne	.L138
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3067              		.loc 1 2034 28
 3068 008e 7B68     		ldr	r3, [r7, #4]
 3069 0090 1022     		movs	r2, #16
 3070 0092 1A64     		str	r2, [r3, #64]
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 3071              		.loc 1 2036 18
 3072 0094 0323     		movs	r3, #3
 3073 0096 0AE0     		b	.L139
 3074              	.L138:
ARM GAS  /tmp/ccKkagmp.s 			page 90


2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Rx transfer counter */
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3075              		.loc 1 2043 22
 3076 0098 7B68     		ldr	r3, [r7, #4]
 3077 009a 0022     		movs	r2, #0
 3078 009c DA85     		strh	r2, [r3, #46]	@ movhi
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3079              		.loc 1 2046 18
 3080 009e 7B68     		ldr	r3, [r7, #4]
 3081 00a0 2022     		movs	r2, #32
 3082 00a2 83F83E20 		strb	r2, [r3, #62]
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3083              		.loc 1 2047 24
 3084 00a6 7B68     		ldr	r3, [r7, #4]
 3085 00a8 0022     		movs	r2, #0
 3086 00aa 1A63     		str	r2, [r3, #48]
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3087              		.loc 1 2049 10
 3088 00ac 0023     		movs	r3, #0
 3089              	.L139:
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3090              		.loc 1 2050 1
 3091 00ae 1846     		mov	r0, r3
 3092 00b0 0837     		adds	r7, r7, #8
 3093              	.LCFI113:
 3094              		.cfi_def_cfa_offset 8
 3095 00b2 BD46     		mov	sp, r7
 3096              	.LCFI114:
 3097              		.cfi_def_cfa_register 13
 3098              		@ sp needed
 3099 00b4 80BD     		pop	{r7, pc}
 3100              		.cfi_endproc
 3101              	.LFE86:
 3103              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 3104              		.align	1
 3105              		.global	HAL_UART_Abort_IT
 3106              		.syntax unified
 3107              		.thumb
 3108              		.thumb_func
 3110              	HAL_UART_Abort_IT:
 3111              	.LFB87:
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
ARM GAS  /tmp/ccKkagmp.s 			page 91


2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3112              		.loc 1 2067 1
 3113              		.cfi_startproc
 3114              		@ args = 0, pretend = 0, frame = 16
 3115              		@ frame_needed = 1, uses_anonymous_args = 0
 3116 0000 80B5     		push	{r7, lr}
 3117              	.LCFI115:
 3118              		.cfi_def_cfa_offset 8
 3119              		.cfi_offset 7, -8
 3120              		.cfi_offset 14, -4
 3121 0002 84B0     		sub	sp, sp, #16
 3122              	.LCFI116:
 3123              		.cfi_def_cfa_offset 24
 3124 0004 00AF     		add	r7, sp, #0
 3125              	.LCFI117:
 3126              		.cfi_def_cfa_register 7
 3127 0006 7860     		str	r0, [r7, #4]
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 3128              		.loc 1 2068 12
 3129 0008 0123     		movs	r3, #1
 3130 000a FB60     		str	r3, [r7, #12]
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 3131              		.loc 1 2071 3
 3132 000c 7B68     		ldr	r3, [r7, #4]
 3133 000e 1B68     		ldr	r3, [r3]
 3134 0010 DA68     		ldr	r2, [r3, #12]
 3135 0012 7B68     		ldr	r3, [r7, #4]
 3136 0014 1B68     		ldr	r3, [r3]
 3137 0016 22F4F072 		bic	r2, r2, #480
 3138 001a DA60     		str	r2, [r3, #12]
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3139              		.loc 1 2072 3
 3140 001c 7B68     		ldr	r3, [r7, #4]
 3141 001e 1B68     		ldr	r3, [r3]
 3142 0020 5A69     		ldr	r2, [r3, #20]
 3143 0022 7B68     		ldr	r3, [r7, #4]
 3144 0024 1B68     		ldr	r3, [r3]
 3145 0026 22F00102 		bic	r2, r2, #1
 3146 002a 5A61     		str	r2, [r3, #20]
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3147              		.loc 1 2075 12
 3148 002c 7B68     		ldr	r3, [r7, #4]
 3149 002e 1B6B     		ldr	r3, [r3, #48]
 3150              		.loc 1 2075 6
 3151 0030 012B     		cmp	r3, #1
ARM GAS  /tmp/ccKkagmp.s 			page 92


 3152 0032 07D1     		bne	.L141
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3153              		.loc 1 2077 5
 3154 0034 7B68     		ldr	r3, [r7, #4]
 3155 0036 1B68     		ldr	r3, [r3]
 3156 0038 DA68     		ldr	r2, [r3, #12]
 3157 003a 7B68     		ldr	r3, [r7, #4]
 3158 003c 1B68     		ldr	r3, [r3]
 3159 003e 22F01002 		bic	r2, r2, #16
 3160 0042 DA60     		str	r2, [r3, #12]
 3161              	.L141:
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      before any call to DMA Abort functions */
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 3162              		.loc 1 2083 12
 3163 0044 7B68     		ldr	r3, [r7, #4]
 3164 0046 5B6B     		ldr	r3, [r3, #52]
 3165              		.loc 1 2083 6
 3166 0048 002B     		cmp	r3, #0
 3167 004a 0FD0     		beq	.L142
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3168              		.loc 1 2087 9
 3169 004c 7B68     		ldr	r3, [r7, #4]
 3170 004e 1B68     		ldr	r3, [r3]
 3171 0050 5B69     		ldr	r3, [r3, #20]
 3172 0052 03F08003 		and	r3, r3, #128
 3173              		.loc 1 2087 8
 3174 0056 002B     		cmp	r3, #0
 3175 0058 04D0     		beq	.L143
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 3176              		.loc 1 2089 12
 3177 005a 7B68     		ldr	r3, [r7, #4]
 3178 005c 5B6B     		ldr	r3, [r3, #52]
 3179              		.loc 1 2089 40
 3180 005e 404A     		ldr	r2, .L152
 3181 0060 5A63     		str	r2, [r3, #52]
 3182 0062 03E0     		b	.L142
 3183              	.L143:
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3184              		.loc 1 2093 12
 3185 0064 7B68     		ldr	r3, [r7, #4]
 3186 0066 5B6B     		ldr	r3, [r3, #52]
 3187              		.loc 1 2093 40
 3188 0068 0022     		movs	r2, #0
 3189 006a 5A63     		str	r2, [r3, #52]
 3190              	.L142:
ARM GAS  /tmp/ccKkagmp.s 			page 93


2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 3191              		.loc 1 2097 12
 3192 006c 7B68     		ldr	r3, [r7, #4]
 3193 006e 9B6B     		ldr	r3, [r3, #56]
 3194              		.loc 1 2097 6
 3195 0070 002B     		cmp	r3, #0
 3196 0072 0FD0     		beq	.L144
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3197              		.loc 1 2101 9
 3198 0074 7B68     		ldr	r3, [r7, #4]
 3199 0076 1B68     		ldr	r3, [r3]
 3200 0078 5B69     		ldr	r3, [r3, #20]
 3201 007a 03F04003 		and	r3, r3, #64
 3202              		.loc 1 2101 8
 3203 007e 002B     		cmp	r3, #0
 3204 0080 04D0     		beq	.L145
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 3205              		.loc 1 2103 12
 3206 0082 7B68     		ldr	r3, [r7, #4]
 3207 0084 9B6B     		ldr	r3, [r3, #56]
 3208              		.loc 1 2103 40
 3209 0086 374A     		ldr	r2, .L152+4
 3210 0088 5A63     		str	r2, [r3, #52]
 3211 008a 03E0     		b	.L144
 3212              	.L145:
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3213              		.loc 1 2107 12
 3214 008c 7B68     		ldr	r3, [r7, #4]
 3215 008e 9B6B     		ldr	r3, [r3, #56]
 3216              		.loc 1 2107 40
 3217 0090 0022     		movs	r2, #0
 3218 0092 5A63     		str	r2, [r3, #52]
 3219              	.L144:
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3220              		.loc 1 2112 7
 3221 0094 7B68     		ldr	r3, [r7, #4]
 3222 0096 1B68     		ldr	r3, [r3]
 3223 0098 5B69     		ldr	r3, [r3, #20]
 3224 009a 03F08003 		and	r3, r3, #128
 3225              		.loc 1 2112 6
 3226 009e 002B     		cmp	r3, #0
 3227 00a0 1AD0     		beq	.L146
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccKkagmp.s 			page 94


2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3228              		.loc 1 2115 5
 3229 00a2 7B68     		ldr	r3, [r7, #4]
 3230 00a4 1B68     		ldr	r3, [r3]
 3231 00a6 5A69     		ldr	r2, [r3, #20]
 3232 00a8 7B68     		ldr	r3, [r7, #4]
 3233 00aa 1B68     		ldr	r3, [r3]
 3234 00ac 22F08002 		bic	r2, r2, #128
 3235 00b0 5A61     		str	r2, [r3, #20]
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3236              		.loc 1 2118 14
 3237 00b2 7B68     		ldr	r3, [r7, #4]
 3238 00b4 5B6B     		ldr	r3, [r3, #52]
 3239              		.loc 1 2118 8
 3240 00b6 002B     		cmp	r3, #0
 3241 00b8 0ED0     		beq	.L146
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 3242              		.loc 1 2124 11
 3243 00ba 7B68     		ldr	r3, [r7, #4]
 3244 00bc 5B6B     		ldr	r3, [r3, #52]
 3245 00be 1846     		mov	r0, r3
 3246 00c0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3247 00c4 0346     		mov	r3, r0
 3248              		.loc 1 2124 10
 3249 00c6 002B     		cmp	r3, #0
 3250 00c8 04D0     		beq	.L147
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 3251              		.loc 1 2126 14
 3252 00ca 7B68     		ldr	r3, [r7, #4]
 3253 00cc 5B6B     		ldr	r3, [r3, #52]
 3254              		.loc 1 2126 42
 3255 00ce 0022     		movs	r2, #0
 3256 00d0 5A63     		str	r2, [r3, #52]
 3257 00d2 01E0     		b	.L146
 3258              	.L147:
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 3259              		.loc 1 2130 19
 3260 00d4 0023     		movs	r3, #0
 3261 00d6 FB60     		str	r3, [r7, #12]
 3262              	.L146:
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
ARM GAS  /tmp/ccKkagmp.s 			page 95


2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3263              		.loc 1 2136 7
 3264 00d8 7B68     		ldr	r3, [r7, #4]
 3265 00da 1B68     		ldr	r3, [r3]
 3266 00dc 5B69     		ldr	r3, [r3, #20]
 3267 00de 03F04003 		and	r3, r3, #64
 3268              		.loc 1 2136 6
 3269 00e2 002B     		cmp	r3, #0
 3270 00e4 1CD0     		beq	.L148
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3271              		.loc 1 2138 5
 3272 00e6 7B68     		ldr	r3, [r7, #4]
 3273 00e8 1B68     		ldr	r3, [r3]
 3274 00ea 5A69     		ldr	r2, [r3, #20]
 3275 00ec 7B68     		ldr	r3, [r7, #4]
 3276 00ee 1B68     		ldr	r3, [r3]
 3277 00f0 22F04002 		bic	r2, r2, #64
 3278 00f4 5A61     		str	r2, [r3, #20]
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3279              		.loc 1 2141 14
 3280 00f6 7B68     		ldr	r3, [r7, #4]
 3281 00f8 9B6B     		ldr	r3, [r3, #56]
 3282              		.loc 1 2141 8
 3283 00fa 002B     		cmp	r3, #0
 3284 00fc 10D0     		beq	.L148
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3285              		.loc 1 2147 11
 3286 00fe 7B68     		ldr	r3, [r7, #4]
 3287 0100 9B6B     		ldr	r3, [r3, #56]
 3288 0102 1846     		mov	r0, r3
 3289 0104 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3290 0108 0346     		mov	r3, r0
 3291              		.loc 1 2147 10
 3292 010a 002B     		cmp	r3, #0
 3293 010c 06D0     		beq	.L149
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 3294              		.loc 1 2149 14
 3295 010e 7B68     		ldr	r3, [r7, #4]
 3296 0110 9B6B     		ldr	r3, [r3, #56]
 3297              		.loc 1 2149 42
 3298 0112 0022     		movs	r2, #0
 3299 0114 5A63     		str	r2, [r3, #52]
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
 3300              		.loc 1 2150 19
 3301 0116 0123     		movs	r3, #1
 3302 0118 FB60     		str	r3, [r7, #12]
 3303 011a 01E0     		b	.L148
 3304              	.L149:
ARM GAS  /tmp/ccKkagmp.s 			page 96


2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 3305              		.loc 1 2154 19
 3306 011c 0023     		movs	r3, #0
 3307 011e FB60     		str	r3, [r7, #12]
 3308              	.L148:
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (AbortCplt == 0x01U)
 3309              		.loc 1 2160 6
 3310 0120 FB68     		ldr	r3, [r7, #12]
 3311 0122 012B     		cmp	r3, #1
 3312 0124 16D1     		bne	.L150
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 3313              		.loc 1 2163 24
 3314 0126 7B68     		ldr	r3, [r7, #4]
 3315 0128 0022     		movs	r2, #0
 3316 012a DA84     		strh	r2, [r3, #38]	@ movhi
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 3317              		.loc 1 2164 24
 3318 012c 7B68     		ldr	r3, [r7, #4]
 3319 012e 0022     		movs	r2, #0
 3320 0130 DA85     		strh	r2, [r3, #46]	@ movhi
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset ErrorCode */
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 3321              		.loc 1 2167 22
 3322 0132 7B68     		ldr	r3, [r7, #4]
 3323 0134 0022     		movs	r2, #0
 3324 0136 1A64     		str	r2, [r3, #64]
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 3325              		.loc 1 2170 20
 3326 0138 7B68     		ldr	r3, [r7, #4]
 3327 013a 2022     		movs	r2, #32
 3328 013c 83F83D20 		strb	r2, [r3, #61]
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3329              		.loc 1 2171 20
 3330 0140 7B68     		ldr	r3, [r7, #4]
 3331 0142 2022     		movs	r2, #32
 3332 0144 83F83E20 		strb	r2, [r3, #62]
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3333              		.loc 1 2172 26
 3334 0148 7B68     		ldr	r3, [r7, #4]
 3335 014a 0022     		movs	r2, #0
 3336 014c 1A63     		str	r2, [r3, #48]
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccKkagmp.s 			page 97


2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort complete callback */
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 3337              		.loc 1 2180 5
 3338 014e 7868     		ldr	r0, [r7, #4]
 3339 0150 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3340              	.L150:
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3341              		.loc 1 2184 10
 3342 0154 0023     		movs	r3, #0
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3343              		.loc 1 2185 1
 3344 0156 1846     		mov	r0, r3
 3345 0158 1037     		adds	r7, r7, #16
 3346              	.LCFI118:
 3347              		.cfi_def_cfa_offset 8
 3348 015a BD46     		mov	sp, r7
 3349              	.LCFI119:
 3350              		.cfi_def_cfa_register 13
 3351              		@ sp needed
 3352 015c 80BD     		pop	{r7, pc}
 3353              	.L153:
 3354 015e 00BF     		.align	2
 3355              	.L152:
 3356 0160 00000000 		.word	UART_DMATxAbortCallback
 3357 0164 00000000 		.word	UART_DMARxAbortCallback
 3358              		.cfi_endproc
 3359              	.LFE87:
 3361              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 3362              		.align	1
 3363              		.global	HAL_UART_AbortTransmit_IT
 3364              		.syntax unified
 3365              		.thumb
 3366              		.thumb_func
 3368              	HAL_UART_AbortTransmit_IT:
 3369              	.LFB88:
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccKkagmp.s 			page 98


2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3370              		.loc 1 2202 1
 3371              		.cfi_startproc
 3372              		@ args = 0, pretend = 0, frame = 8
 3373              		@ frame_needed = 1, uses_anonymous_args = 0
 3374 0000 80B5     		push	{r7, lr}
 3375              	.LCFI120:
 3376              		.cfi_def_cfa_offset 8
 3377              		.cfi_offset 7, -8
 3378              		.cfi_offset 14, -4
 3379 0002 82B0     		sub	sp, sp, #8
 3380              	.LCFI121:
 3381              		.cfi_def_cfa_offset 16
 3382 0004 00AF     		add	r7, sp, #0
 3383              	.LCFI122:
 3384              		.cfi_def_cfa_register 7
 3385 0006 7860     		str	r0, [r7, #4]
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 3386              		.loc 1 2204 3
 3387 0008 7B68     		ldr	r3, [r7, #4]
 3388 000a 1B68     		ldr	r3, [r3]
 3389 000c DA68     		ldr	r2, [r3, #12]
 3390 000e 7B68     		ldr	r3, [r7, #4]
 3391 0010 1B68     		ldr	r3, [r3]
 3392 0012 22F0C002 		bic	r2, r2, #192
 3393 0016 DA60     		str	r2, [r3, #12]
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3394              		.loc 1 2207 7
 3395 0018 7B68     		ldr	r3, [r7, #4]
 3396 001a 1B68     		ldr	r3, [r3]
 3397 001c 5B69     		ldr	r3, [r3, #20]
 3398 001e 03F08003 		and	r3, r3, #128
 3399              		.loc 1 2207 6
 3400 0022 002B     		cmp	r3, #0
 3401 0024 2AD0     		beq	.L155
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3402              		.loc 1 2209 5
 3403 0026 7B68     		ldr	r3, [r7, #4]
 3404 0028 1B68     		ldr	r3, [r3]
 3405 002a 5A69     		ldr	r2, [r3, #20]
 3406 002c 7B68     		ldr	r3, [r7, #4]
 3407 002e 1B68     		ldr	r3, [r3]
 3408 0030 22F08002 		bic	r2, r2, #128
 3409 0034 5A61     		str	r2, [r3, #20]
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3410              		.loc 1 2212 14
 3411 0036 7B68     		ldr	r3, [r7, #4]
 3412 0038 5B6B     		ldr	r3, [r3, #52]
 3413              		.loc 1 2212 8
 3414 003a 002B     		cmp	r3, #0
 3415 003c 13D0     		beq	.L156
ARM GAS  /tmp/ccKkagmp.s 			page 99


2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 3416              		.loc 1 2216 12
 3417 003e 7B68     		ldr	r3, [r7, #4]
 3418 0040 5B6B     		ldr	r3, [r3, #52]
 3419              		.loc 1 2216 40
 3420 0042 164A     		ldr	r2, .L159
 3421 0044 5A63     		str	r2, [r3, #52]
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 3422              		.loc 1 2219 11
 3423 0046 7B68     		ldr	r3, [r7, #4]
 3424 0048 5B6B     		ldr	r3, [r3, #52]
 3425 004a 1846     		mov	r0, r3
 3426 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3427 0050 0346     		mov	r3, r0
 3428              		.loc 1 2219 10
 3429 0052 002B     		cmp	r3, #0
 3430 0054 1CD0     		beq	.L157
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 3431              		.loc 1 2222 14
 3432 0056 7B68     		ldr	r3, [r7, #4]
 3433 0058 5B6B     		ldr	r3, [r3, #52]
 3434              		.loc 1 2222 22
 3435 005a 5B6B     		ldr	r3, [r3, #52]
 3436              		.loc 1 2222 47
 3437 005c 7A68     		ldr	r2, [r7, #4]
 3438 005e 526B     		ldr	r2, [r2, #52]
 3439              		.loc 1 2222 9
 3440 0060 1046     		mov	r0, r2
 3441 0062 9847     		blx	r3
 3442              	.LVL0:
 3443 0064 14E0     		b	.L157
 3444              	.L156:
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Tx transfer counter */
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
 3445              		.loc 1 2228 26
 3446 0066 7B68     		ldr	r3, [r7, #4]
 3447 0068 0022     		movs	r2, #0
 3448 006a DA84     		strh	r2, [r3, #38]	@ movhi
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 3449              		.loc 1 2231 21
 3450 006c 7B68     		ldr	r3, [r7, #4]
 3451 006e 2022     		movs	r2, #32
 3452 0070 83F83D20 		strb	r2, [r3, #61]
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 100


2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 3453              		.loc 1 2239 7
 3454 0074 7868     		ldr	r0, [r7, #4]
 3455 0076 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3456 007a 09E0     		b	.L157
 3457              	.L155:
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx transfer counter */
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 3458              		.loc 1 2246 24
 3459 007c 7B68     		ldr	r3, [r7, #4]
 3460 007e 0022     		movs	r2, #0
 3461 0080 DA84     		strh	r2, [r3, #38]	@ movhi
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 3462              		.loc 1 2249 19
 3463 0082 7B68     		ldr	r3, [r7, #4]
 3464 0084 2022     		movs	r2, #32
 3465 0086 83F83D20 		strb	r2, [r3, #61]
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 3466              		.loc 1 2257 5
 3467 008a 7868     		ldr	r0, [r7, #4]
 3468 008c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3469              	.L157:
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3470              		.loc 1 2261 10
 3471 0090 0023     		movs	r3, #0
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3472              		.loc 1 2262 1
 3473 0092 1846     		mov	r0, r3
 3474 0094 0837     		adds	r7, r7, #8
 3475              	.LCFI123:
 3476              		.cfi_def_cfa_offset 8
 3477 0096 BD46     		mov	sp, r7
 3478              	.LCFI124:
 3479              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccKkagmp.s 			page 101


 3480              		@ sp needed
 3481 0098 80BD     		pop	{r7, pc}
 3482              	.L160:
 3483 009a 00BF     		.align	2
 3484              	.L159:
 3485 009c 00000000 		.word	UART_DMATxOnlyAbortCallback
 3486              		.cfi_endproc
 3487              	.LFE88:
 3489              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 3490              		.align	1
 3491              		.global	HAL_UART_AbortReceive_IT
 3492              		.syntax unified
 3493              		.thumb
 3494              		.thumb_func
 3496              	HAL_UART_AbortReceive_IT:
 3497              	.LFB89:
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3498              		.loc 1 2279 1
 3499              		.cfi_startproc
 3500              		@ args = 0, pretend = 0, frame = 8
 3501              		@ frame_needed = 1, uses_anonymous_args = 0
 3502 0000 80B5     		push	{r7, lr}
 3503              	.LCFI125:
 3504              		.cfi_def_cfa_offset 8
 3505              		.cfi_offset 7, -8
 3506              		.cfi_offset 14, -4
 3507 0002 82B0     		sub	sp, sp, #8
 3508              	.LCFI126:
 3509              		.cfi_def_cfa_offset 16
 3510 0004 00AF     		add	r7, sp, #0
 3511              	.LCFI127:
 3512              		.cfi_def_cfa_register 7
 3513 0006 7860     		str	r0, [r7, #4]
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3514              		.loc 1 2281 3
 3515 0008 7B68     		ldr	r3, [r7, #4]
 3516 000a 1B68     		ldr	r3, [r3]
 3517 000c DA68     		ldr	r2, [r3, #12]
 3518 000e 7B68     		ldr	r3, [r7, #4]
 3519 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 102


 3520 0012 22F49072 		bic	r2, r2, #288
 3521 0016 DA60     		str	r2, [r3, #12]
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3522              		.loc 1 2282 3
 3523 0018 7B68     		ldr	r3, [r7, #4]
 3524 001a 1B68     		ldr	r3, [r3]
 3525 001c 5A69     		ldr	r2, [r3, #20]
 3526 001e 7B68     		ldr	r3, [r7, #4]
 3527 0020 1B68     		ldr	r3, [r3]
 3528 0022 22F00102 		bic	r2, r2, #1
 3529 0026 5A61     		str	r2, [r3, #20]
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3530              		.loc 1 2285 12
 3531 0028 7B68     		ldr	r3, [r7, #4]
 3532 002a 1B6B     		ldr	r3, [r3, #48]
 3533              		.loc 1 2285 6
 3534 002c 012B     		cmp	r3, #1
 3535 002e 07D1     		bne	.L162
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3536              		.loc 1 2287 5
 3537 0030 7B68     		ldr	r3, [r7, #4]
 3538 0032 1B68     		ldr	r3, [r3]
 3539 0034 DA68     		ldr	r2, [r3, #12]
 3540 0036 7B68     		ldr	r3, [r7, #4]
 3541 0038 1B68     		ldr	r3, [r3]
 3542 003a 22F01002 		bic	r2, r2, #16
 3543 003e DA60     		str	r2, [r3, #12]
 3544              	.L162:
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3545              		.loc 1 2291 7
 3546 0040 7B68     		ldr	r3, [r7, #4]
 3547 0042 1B68     		ldr	r3, [r3]
 3548 0044 5B69     		ldr	r3, [r3, #20]
 3549 0046 03F04003 		and	r3, r3, #64
 3550              		.loc 1 2291 6
 3551 004a 002B     		cmp	r3, #0
 3552 004c 2DD0     		beq	.L163
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3553              		.loc 1 2293 5
 3554 004e 7B68     		ldr	r3, [r7, #4]
 3555 0050 1B68     		ldr	r3, [r3]
 3556 0052 5A69     		ldr	r2, [r3, #20]
 3557 0054 7B68     		ldr	r3, [r7, #4]
 3558 0056 1B68     		ldr	r3, [r3]
 3559 0058 22F04002 		bic	r2, r2, #64
 3560 005c 5A61     		str	r2, [r3, #20]
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3561              		.loc 1 2296 14
ARM GAS  /tmp/ccKkagmp.s 			page 103


 3562 005e 7B68     		ldr	r3, [r7, #4]
 3563 0060 9B6B     		ldr	r3, [r3, #56]
 3564              		.loc 1 2296 8
 3565 0062 002B     		cmp	r3, #0
 3566 0064 13D0     		beq	.L164
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 3567              		.loc 1 2300 12
 3568 0066 7B68     		ldr	r3, [r7, #4]
 3569 0068 9B6B     		ldr	r3, [r3, #56]
 3570              		.loc 1 2300 40
 3571 006a 194A     		ldr	r2, .L167
 3572 006c 5A63     		str	r2, [r3, #52]
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3573              		.loc 1 2303 11
 3574 006e 7B68     		ldr	r3, [r7, #4]
 3575 0070 9B6B     		ldr	r3, [r3, #56]
 3576 0072 1846     		mov	r0, r3
 3577 0074 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3578 0078 0346     		mov	r3, r0
 3579              		.loc 1 2303 10
 3580 007a 002B     		cmp	r3, #0
 3581 007c 22D0     		beq	.L165
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3582              		.loc 1 2306 14
 3583 007e 7B68     		ldr	r3, [r7, #4]
 3584 0080 9B6B     		ldr	r3, [r3, #56]
 3585              		.loc 1 2306 22
 3586 0082 5B6B     		ldr	r3, [r3, #52]
 3587              		.loc 1 2306 47
 3588 0084 7A68     		ldr	r2, [r7, #4]
 3589 0086 926B     		ldr	r2, [r2, #56]
 3590              		.loc 1 2306 9
 3591 0088 1046     		mov	r0, r2
 3592 008a 9847     		blx	r3
 3593              	.LVL1:
 3594 008c 1AE0     		b	.L165
 3595              	.L164:
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Rx transfer counter */
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
 3596              		.loc 1 2312 26
 3597 008e 7B68     		ldr	r3, [r7, #4]
 3598 0090 0022     		movs	r2, #0
 3599 0092 DA85     		strh	r2, [r3, #46]	@ movhi
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccKkagmp.s 			page 104


 3600              		.loc 1 2315 22
 3601 0094 7B68     		ldr	r3, [r7, #4]
 3602 0096 2022     		movs	r2, #32
 3603 0098 83F83E20 		strb	r2, [r3, #62]
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3604              		.loc 1 2316 28
 3605 009c 7B68     		ldr	r3, [r7, #4]
 3606 009e 0022     		movs	r2, #0
 3607 00a0 1A63     		str	r2, [r3, #48]
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 3608              		.loc 1 2324 7
 3609 00a2 7868     		ldr	r0, [r7, #4]
 3610 00a4 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3611 00a8 0CE0     		b	.L165
 3612              	.L163:
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Rx transfer counter */
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 3613              		.loc 1 2331 24
 3614 00aa 7B68     		ldr	r3, [r7, #4]
 3615 00ac 0022     		movs	r2, #0
 3616 00ae DA85     		strh	r2, [r3, #46]	@ movhi
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3617              		.loc 1 2334 20
 3618 00b0 7B68     		ldr	r3, [r7, #4]
 3619 00b2 2022     		movs	r2, #32
 3620 00b4 83F83E20 		strb	r2, [r3, #62]
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3621              		.loc 1 2335 26
 3622 00b8 7B68     		ldr	r3, [r7, #4]
 3623 00ba 0022     		movs	r2, #0
 3624 00bc 1A63     		str	r2, [r3, #48]
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 3625              		.loc 1 2343 5
 3626 00be 7868     		ldr	r0, [r7, #4]
 3627 00c0 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3628              	.L165:
ARM GAS  /tmp/ccKkagmp.s 			page 105


2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3629              		.loc 1 2347 10
 3630 00c4 0023     		movs	r3, #0
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3631              		.loc 1 2348 1
 3632 00c6 1846     		mov	r0, r3
 3633 00c8 0837     		adds	r7, r7, #8
 3634              	.LCFI128:
 3635              		.cfi_def_cfa_offset 8
 3636 00ca BD46     		mov	sp, r7
 3637              	.LCFI129:
 3638              		.cfi_def_cfa_register 13
 3639              		@ sp needed
 3640 00cc 80BD     		pop	{r7, pc}
 3641              	.L168:
 3642 00ce 00BF     		.align	2
 3643              	.L167:
 3644 00d0 00000000 		.word	UART_DMARxOnlyAbortCallback
 3645              		.cfi_endproc
 3646              	.LFE89:
 3648              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 3649              		.align	1
 3650              		.global	HAL_UART_IRQHandler
 3651              		.syntax unified
 3652              		.thumb
 3653              		.thumb_func
 3655              	HAL_UART_IRQHandler:
 3656              	.LFB90:
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3657              		.loc 1 2357 1
 3658              		.cfi_startproc
 3659              		@ args = 0, pretend = 0, frame = 40
 3660              		@ frame_needed = 1, uses_anonymous_args = 0
 3661 0000 80B5     		push	{r7, lr}
 3662              	.LCFI130:
 3663              		.cfi_def_cfa_offset 8
 3664              		.cfi_offset 7, -8
 3665              		.cfi_offset 14, -4
 3666 0002 8AB0     		sub	sp, sp, #40
 3667              	.LCFI131:
 3668              		.cfi_def_cfa_offset 48
 3669 0004 00AF     		add	r7, sp, #0
 3670              	.LCFI132:
 3671              		.cfi_def_cfa_register 7
 3672 0006 7860     		str	r0, [r7, #4]
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
ARM GAS  /tmp/ccKkagmp.s 			page 106


 3673              		.loc 1 2358 25
 3674 0008 7B68     		ldr	r3, [r7, #4]
 3675 000a 1B68     		ldr	r3, [r3]
 3676              		.loc 1 2358 12
 3677 000c 1B68     		ldr	r3, [r3]
 3678 000e 7B62     		str	r3, [r7, #36]
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 3679              		.loc 1 2359 25
 3680 0010 7B68     		ldr	r3, [r7, #4]
 3681 0012 1B68     		ldr	r3, [r3]
 3682              		.loc 1 2359 12
 3683 0014 DB68     		ldr	r3, [r3, #12]
 3684 0016 3B62     		str	r3, [r7, #32]
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 3685              		.loc 1 2360 25
 3686 0018 7B68     		ldr	r3, [r7, #4]
 3687 001a 1B68     		ldr	r3, [r3]
 3688              		.loc 1 2360 12
 3689 001c 5B69     		ldr	r3, [r3, #20]
 3690 001e FB61     		str	r3, [r7, #28]
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 3691              		.loc 1 2361 12
 3692 0020 0023     		movs	r3, #0
 3693 0022 BB61     		str	r3, [r7, #24]
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 3694              		.loc 1 2362 12
 3695 0024 0023     		movs	r3, #0
 3696 0026 7B61     		str	r3, [r7, #20]
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If no error occurs */
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 3697              		.loc 1 2365 14
 3698 0028 7B6A     		ldr	r3, [r7, #36]
 3699 002a 03F00F03 		and	r3, r3, #15
 3700 002e BB61     		str	r3, [r7, #24]
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (errorflags == RESET)
 3701              		.loc 1 2366 6
 3702 0030 BB69     		ldr	r3, [r7, #24]
 3703 0032 002B     		cmp	r3, #0
 3704 0034 0DD1     		bne	.L170
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3705              		.loc 1 2369 20
 3706 0036 7B6A     		ldr	r3, [r7, #36]
 3707 0038 03F02003 		and	r3, r3, #32
 3708              		.loc 1 2369 8
 3709 003c 002B     		cmp	r3, #0
 3710 003e 08D0     		beq	.L170
 3711              		.loc 1 2369 59 discriminator 1
 3712 0040 3B6A     		ldr	r3, [r7, #32]
 3713 0042 03F02003 		and	r3, r3, #32
 3714              		.loc 1 2369 47 discriminator 1
 3715 0046 002B     		cmp	r3, #0
 3716 0048 03D0     		beq	.L170
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       UART_Receive_IT(huart);
ARM GAS  /tmp/ccKkagmp.s 			page 107


 3717              		.loc 1 2371 7
 3718 004a 7868     		ldr	r0, [r7, #4]
 3719 004c FFF7FEFF 		bl	UART_Receive_IT
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 3720              		.loc 1 2372 7
 3721 0050 7BE1     		b	.L169
 3722              	.L170:
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If some errors occur */
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
 3723              		.loc 1 2377 6
 3724 0052 BB69     		ldr	r3, [r7, #24]
 3725 0054 002B     		cmp	r3, #0
 3726 0056 00F0B180 		beq	.L172
 3727              		.loc 1 2377 42 discriminator 1
 3728 005a FB69     		ldr	r3, [r7, #28]
 3729 005c 03F00103 		and	r3, r3, #1
 3730              		.loc 1 2377 29 discriminator 1
 3731 0060 002B     		cmp	r3, #0
 3732 0062 05D1     		bne	.L173
 3733              		.loc 1 2377 81 discriminator 2
 3734 0064 3B6A     		ldr	r3, [r7, #32]
 3735 0066 03F49073 		and	r3, r3, #288
 3736              		.loc 1 2377 69 discriminator 2
 3737 006a 002B     		cmp	r3, #0
 3738 006c 00F0A680 		beq	.L172
 3739              	.L173:
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 3740              		.loc 1 2380 20
 3741 0070 7B6A     		ldr	r3, [r7, #36]
 3742 0072 03F00103 		and	r3, r3, #1
 3743              		.loc 1 2380 8
 3744 0076 002B     		cmp	r3, #0
 3745 0078 0AD0     		beq	.L174
 3746              		.loc 1 2380 57 discriminator 1
 3747 007a 3B6A     		ldr	r3, [r7, #32]
 3748 007c 03F48073 		and	r3, r3, #256
 3749              		.loc 1 2380 45 discriminator 1
 3750 0080 002B     		cmp	r3, #0
 3751 0082 05D0     		beq	.L174
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 3752              		.loc 1 2382 24
 3753 0084 7B68     		ldr	r3, [r7, #4]
 3754 0086 1B6C     		ldr	r3, [r3, #64]
 3755 0088 43F00102 		orr	r2, r3, #1
 3756 008c 7B68     		ldr	r3, [r7, #4]
 3757 008e 1A64     		str	r2, [r3, #64]
 3758              	.L174:
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
ARM GAS  /tmp/ccKkagmp.s 			page 108


 3759              		.loc 1 2386 20
 3760 0090 7B6A     		ldr	r3, [r7, #36]
 3761 0092 03F00403 		and	r3, r3, #4
 3762              		.loc 1 2386 8
 3763 0096 002B     		cmp	r3, #0
 3764 0098 0AD0     		beq	.L175
 3765              		.loc 1 2386 57 discriminator 1
 3766 009a FB69     		ldr	r3, [r7, #28]
 3767 009c 03F00103 		and	r3, r3, #1
 3768              		.loc 1 2386 45 discriminator 1
 3769 00a0 002B     		cmp	r3, #0
 3770 00a2 05D0     		beq	.L175
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3771              		.loc 1 2388 24
 3772 00a4 7B68     		ldr	r3, [r7, #4]
 3773 00a6 1B6C     		ldr	r3, [r3, #64]
 3774 00a8 43F00202 		orr	r2, r3, #2
 3775 00ac 7B68     		ldr	r3, [r7, #4]
 3776 00ae 1A64     		str	r2, [r3, #64]
 3777              	.L175:
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3778              		.loc 1 2392 20
 3779 00b0 7B6A     		ldr	r3, [r7, #36]
 3780 00b2 03F00203 		and	r3, r3, #2
 3781              		.loc 1 2392 8
 3782 00b6 002B     		cmp	r3, #0
 3783 00b8 0AD0     		beq	.L176
 3784              		.loc 1 2392 57 discriminator 1
 3785 00ba FB69     		ldr	r3, [r7, #28]
 3786 00bc 03F00103 		and	r3, r3, #1
 3787              		.loc 1 2392 45 discriminator 1
 3788 00c0 002B     		cmp	r3, #0
 3789 00c2 05D0     		beq	.L176
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3790              		.loc 1 2394 24
 3791 00c4 7B68     		ldr	r3, [r7, #4]
 3792 00c6 1B6C     		ldr	r3, [r3, #64]
 3793 00c8 43F00402 		orr	r2, r3, #4
 3794 00cc 7B68     		ldr	r3, [r7, #4]
 3795 00ce 1A64     		str	r2, [r3, #64]
 3796              	.L176:
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its
 3797              		.loc 1 2398 20
 3798 00d0 7B6A     		ldr	r3, [r7, #36]
 3799 00d2 03F00803 		and	r3, r3, #8
 3800              		.loc 1 2398 8
 3801 00d6 002B     		cmp	r3, #0
 3802 00d8 0FD0     		beq	.L177
 3803              		.loc 1 2398 59 discriminator 1
ARM GAS  /tmp/ccKkagmp.s 			page 109


 3804 00da 3B6A     		ldr	r3, [r7, #32]
 3805 00dc 03F02003 		and	r3, r3, #32
 3806              		.loc 1 2398 46 discriminator 1
 3807 00e0 002B     		cmp	r3, #0
 3808 00e2 04D1     		bne	.L178
 3809              		.loc 1 2398 101 discriminator 2
 3810 00e4 FB69     		ldr	r3, [r7, #28]
 3811 00e6 03F00103 		and	r3, r3, #1
 3812              		.loc 1 2398 89 discriminator 2
 3813 00ea 002B     		cmp	r3, #0
 3814 00ec 05D0     		beq	.L177
 3815              	.L178:
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3816              		.loc 1 2400 24
 3817 00ee 7B68     		ldr	r3, [r7, #4]
 3818 00f0 1B6C     		ldr	r3, [r3, #64]
 3819 00f2 43F00802 		orr	r2, r3, #8
 3820 00f6 7B68     		ldr	r3, [r7, #4]
 3821 00f8 1A64     		str	r2, [r3, #64]
 3822              	.L177:
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 3823              		.loc 1 2404 14
 3824 00fa 7B68     		ldr	r3, [r7, #4]
 3825 00fc 1B6C     		ldr	r3, [r3, #64]
 3826              		.loc 1 2404 8
 3827 00fe 002B     		cmp	r3, #0
 3828 0100 00F01E81 		beq	.L192
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3829              		.loc 1 2407 22
 3830 0104 7B6A     		ldr	r3, [r7, #36]
 3831 0106 03F02003 		and	r3, r3, #32
 3832              		.loc 1 2407 10
 3833 010a 002B     		cmp	r3, #0
 3834 010c 07D0     		beq	.L180
 3835              		.loc 1 2407 61 discriminator 1
 3836 010e 3B6A     		ldr	r3, [r7, #32]
 3837 0110 03F02003 		and	r3, r3, #32
 3838              		.loc 1 2407 49 discriminator 1
 3839 0114 002B     		cmp	r3, #0
 3840 0116 02D0     		beq	.L180
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_Receive_IT(huart);
 3841              		.loc 1 2409 9
 3842 0118 7868     		ldr	r0, [r7, #4]
 3843 011a FFF7FEFF 		bl	UART_Receive_IT
 3844              	.L180:
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          consider error as blocking */
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
ARM GAS  /tmp/ccKkagmp.s 			page 110


 3845              		.loc 1 2414 20
 3846 011e 7B68     		ldr	r3, [r7, #4]
 3847 0120 1B68     		ldr	r3, [r3]
 3848 0122 5B69     		ldr	r3, [r3, #20]
 3849 0124 03F04003 		and	r3, r3, #64
 3850 0128 002B     		cmp	r3, #0
 3851 012a 14BF     		ite	ne
 3852 012c 0123     		movne	r3, #1
 3853 012e 0023     		moveq	r3, #0
 3854 0130 DBB2     		uxtb	r3, r3
 3855              		.loc 1 2414 18
 3856 0132 7B61     		str	r3, [r7, #20]
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 3857              		.loc 1 2415 18
 3858 0134 7B68     		ldr	r3, [r7, #4]
 3859 0136 1B6C     		ldr	r3, [r3, #64]
 3860              		.loc 1 2415 30
 3861 0138 03F00803 		and	r3, r3, #8
 3862              		.loc 1 2415 10
 3863 013c 002B     		cmp	r3, #0
 3864 013e 02D1     		bne	.L181
 3865              		.loc 1 2415 62 discriminator 1
 3866 0140 7B69     		ldr	r3, [r7, #20]
 3867 0142 002B     		cmp	r3, #0
 3868 0144 31D0     		beq	.L182
 3869              	.L181:
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3870              		.loc 1 2420 9
 3871 0146 7868     		ldr	r0, [r7, #4]
 3872 0148 FFF7FEFF 		bl	UART_EndRxTransfer
2421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3873              		.loc 1 2423 13
 3874 014c 7B68     		ldr	r3, [r7, #4]
 3875 014e 1B68     		ldr	r3, [r3]
 3876 0150 5B69     		ldr	r3, [r3, #20]
 3877 0152 03F04003 		and	r3, r3, #64
 3878              		.loc 1 2423 12
 3879 0156 002B     		cmp	r3, #0
 3880 0158 23D0     		beq	.L183
2424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3881              		.loc 1 2425 11
 3882 015a 7B68     		ldr	r3, [r7, #4]
 3883 015c 1B68     		ldr	r3, [r3]
 3884 015e 5A69     		ldr	r2, [r3, #20]
 3885 0160 7B68     		ldr	r3, [r7, #4]
 3886 0162 1B68     		ldr	r3, [r3]
 3887 0164 22F04002 		bic	r2, r2, #64
 3888 0168 5A61     		str	r2, [r3, #20]
2426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
ARM GAS  /tmp/ccKkagmp.s 			page 111


2428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if (huart->hdmarx != NULL)
 3889              		.loc 1 2428 20
 3890 016a 7B68     		ldr	r3, [r7, #4]
 3891 016c 9B6B     		ldr	r3, [r3, #56]
 3892              		.loc 1 2428 14
 3893 016e 002B     		cmp	r3, #0
 3894 0170 13D0     		beq	.L184
2429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3895              		.loc 1 2432 18
 3896 0172 7B68     		ldr	r3, [r7, #4]
 3897 0174 9B6B     		ldr	r3, [r3, #56]
 3898              		.loc 1 2432 46
 3899 0176 764A     		ldr	r2, .L196
 3900 0178 5A63     		str	r2, [r3, #52]
2433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3901              		.loc 1 2433 17
 3902 017a 7B68     		ldr	r3, [r7, #4]
 3903 017c 9B6B     		ldr	r3, [r3, #56]
 3904 017e 1846     		mov	r0, r3
 3905 0180 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3906 0184 0346     		mov	r3, r0
 3907              		.loc 1 2433 16
 3908 0186 002B     		cmp	r3, #0
 3909 0188 16D0     		beq	.L193
2434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             {
2435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3910              		.loc 1 2436 20
 3911 018a 7B68     		ldr	r3, [r7, #4]
 3912 018c 9B6B     		ldr	r3, [r3, #56]
 3913              		.loc 1 2436 28
 3914 018e 5B6B     		ldr	r3, [r3, #52]
 3915              		.loc 1 2436 53
 3916 0190 7A68     		ldr	r2, [r7, #4]
 3917 0192 926B     		ldr	r2, [r2, #56]
 3918              		.loc 1 2436 15
 3919 0194 1046     		mov	r0, r2
 3920 0196 9847     		blx	r3
 3921              	.LVL2:
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3922              		.loc 1 2423 12
 3923 0198 0EE0     		b	.L193
 3924              	.L184:
2437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             }
2438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
2440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Call user error callback */
2442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call registered error callback*/
2444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->ErrorCallback(huart);
2445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call legacy weak error callback*/
2447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
ARM GAS  /tmp/ccKkagmp.s 			page 112


 3925              		.loc 1 2447 13
 3926 019a 7868     		ldr	r0, [r7, #4]
 3927 019c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3928              		.loc 1 2423 12
 3929 01a0 0AE0     		b	.L193
 3930              	.L183:
2448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
2452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Call user error callback */
2454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call registered error callback*/
2456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCallback(huart);
2457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call legacy weak error callback*/
2459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3931              		.loc 1 2459 11
 3932 01a2 7868     		ldr	r0, [r7, #4]
 3933 01a4 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3934              		.loc 1 2423 12
 3935 01a8 06E0     		b	.L193
 3936              	.L182:
2460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error is notified to user through user error callback */
2467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered error callback*/
2469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback(huart);
2470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak error callback*/
2472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3937              		.loc 1 2472 9
 3938 01aa 7868     		ldr	r0, [r7, #4]
 3939 01ac FFF7FEFF 		bl	HAL_UART_ErrorCallback
2473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 3940              		.loc 1 2475 26
 3941 01b0 7B68     		ldr	r3, [r7, #4]
 3942 01b2 0022     		movs	r2, #0
 3943 01b4 1A64     		str	r2, [r3, #64]
2476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 3944              		.loc 1 2478 5
 3945 01b6 C3E0     		b	.L192
 3946              	.L193:
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3947              		.loc 1 2423 12
ARM GAS  /tmp/ccKkagmp.s 			page 113


 3948 01b8 00BF     		nop
 3949              		.loc 1 2478 5
 3950 01ba C1E0     		b	.L192
 3951              	.L172:
2479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
2480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
2482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : */
2483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3952              		.loc 1 2483 15
 3953 01bc 7B68     		ldr	r3, [r7, #4]
 3954 01be 1B6B     		ldr	r3, [r3, #48]
 3955              		.loc 1 2483 6
 3956 01c0 012B     		cmp	r3, #1
 3957 01c2 40F0A180 		bne	.L186
2484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       &&((isrflags & USART_SR_IDLE) != 0U)
 3958              		.loc 1 2484 20
 3959 01c6 7B6A     		ldr	r3, [r7, #36]
 3960 01c8 03F01003 		and	r3, r3, #16
 3961              		.loc 1 2484 7
 3962 01cc 002B     		cmp	r3, #0
 3963 01ce 00F09B80 		beq	.L186
2485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       &&((cr1its & USART_SR_IDLE) != 0U))
 3964              		.loc 1 2485 18
 3965 01d2 3B6A     		ldr	r3, [r7, #32]
 3966 01d4 03F01003 		and	r3, r3, #16
 3967              		.loc 1 2485 7
 3968 01d8 002B     		cmp	r3, #0
 3969 01da 00F09580 		beq	.L186
 3970              	.LBB6:
2486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_IDLEFLAG(huart);
 3971              		.loc 1 2487 5
 3972 01de 0023     		movs	r3, #0
 3973 01e0 FB60     		str	r3, [r7, #12]
 3974 01e2 7B68     		ldr	r3, [r7, #4]
 3975 01e4 1B68     		ldr	r3, [r3]
 3976 01e6 1B68     		ldr	r3, [r3]
 3977 01e8 FB60     		str	r3, [r7, #12]
 3978 01ea 7B68     		ldr	r3, [r7, #4]
 3979 01ec 1B68     		ldr	r3, [r3]
 3980 01ee 5B68     		ldr	r3, [r3, #4]
 3981 01f0 FB60     		str	r3, [r7, #12]
 3982 01f2 FB68     		ldr	r3, [r7, #12]
 3983              	.LBE6:
2488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check if DMA mode is enabled in UART */
2490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3984              		.loc 1 2490 9
 3985 01f4 7B68     		ldr	r3, [r7, #4]
 3986 01f6 1B68     		ldr	r3, [r3]
 3987 01f8 5B69     		ldr	r3, [r3, #20]
 3988 01fa 03F04003 		and	r3, r3, #64
 3989              		.loc 1 2490 8
 3990 01fe 002B     		cmp	r3, #0
 3991 0200 4ED0     		beq	.L187
 3992              	.LBB7:
ARM GAS  /tmp/ccKkagmp.s 			page 114


2491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode enabled */
2493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing,
2494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          (DMA cplt callback will be called).
2495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 3993              		.loc 1 2496 50
 3994 0202 7B68     		ldr	r3, [r7, #4]
 3995 0204 9B6B     		ldr	r3, [r3, #56]
 3996 0206 1B68     		ldr	r3, [r3]
 3997 0208 5B68     		ldr	r3, [r3, #4]
 3998              		.loc 1 2496 16
 3999 020a 3B82     		strh	r3, [r7, #16]	@ movhi
2497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (  (nb_remaining_rx_data > 0U)
 4000              		.loc 1 2497 10
 4001 020c 3B8A     		ldrh	r3, [r7, #16]
 4002 020e 002B     		cmp	r3, #0
 4003 0210 00F09880 		beq	.L194
2498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           &&(nb_remaining_rx_data < huart->RxXferSize))
 4004              		.loc 1 2498 42
 4005 0214 7B68     		ldr	r3, [r7, #4]
 4006 0216 9B8D     		ldrh	r3, [r3, #44]
 4007              		.loc 1 2498 11
 4008 0218 3A8A     		ldrh	r2, [r7, #16]
 4009 021a 9A42     		cmp	r2, r3
 4010 021c 80F09280 		bcs	.L194
2499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Reception is not complete */
2501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount = nb_remaining_rx_data;
 4011              		.loc 1 2501 28
 4012 0220 7B68     		ldr	r3, [r7, #4]
 4013 0222 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 4014 0224 DA85     		strh	r2, [r3, #46]	@ movhi
2502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In Normal mode, end DMA xfer and HAL UART Rx process*/
2504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 4015              		.loc 1 2504 18
 4016 0226 7B68     		ldr	r3, [r7, #4]
 4017 0228 9B6B     		ldr	r3, [r3, #56]
 4018              		.loc 1 2504 32
 4019 022a 9B69     		ldr	r3, [r3, #24]
 4020              		.loc 1 2504 12
 4021 022c 202B     		cmp	r3, #32
 4022 022e 2BD0     		beq	.L189
2505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 4023              		.loc 1 2507 11
 4024 0230 7B68     		ldr	r3, [r7, #4]
 4025 0232 1B68     		ldr	r3, [r3]
 4026 0234 DA68     		ldr	r2, [r3, #12]
 4027 0236 7B68     		ldr	r3, [r7, #4]
 4028 0238 1B68     		ldr	r3, [r3]
 4029 023a 22F48072 		bic	r2, r2, #256
 4030 023e DA60     		str	r2, [r3, #12]
2508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4031              		.loc 1 2508 11
ARM GAS  /tmp/ccKkagmp.s 			page 115


 4032 0240 7B68     		ldr	r3, [r7, #4]
 4033 0242 1B68     		ldr	r3, [r3]
 4034 0244 5A69     		ldr	r2, [r3, #20]
 4035 0246 7B68     		ldr	r3, [r7, #4]
 4036 0248 1B68     		ldr	r3, [r3]
 4037 024a 22F00102 		bic	r2, r2, #1
 4038 024e 5A61     		str	r2, [r3, #20]
2509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the UART CR3 register */
2512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4039              		.loc 1 2512 11
 4040 0250 7B68     		ldr	r3, [r7, #4]
 4041 0252 1B68     		ldr	r3, [r3]
 4042 0254 5A69     		ldr	r2, [r3, #20]
 4043 0256 7B68     		ldr	r3, [r7, #4]
 4044 0258 1B68     		ldr	r3, [r3]
 4045 025a 22F04002 		bic	r2, r2, #64
 4046 025e 5A61     		str	r2, [r3, #20]
2513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* At end of Rx process, restore huart->RxState to Ready */
2515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 4047              		.loc 1 2515 26
 4048 0260 7B68     		ldr	r3, [r7, #4]
 4049 0262 2022     		movs	r2, #32
 4050 0264 83F83E20 		strb	r2, [r3, #62]
2516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4051              		.loc 1 2516 32
 4052 0268 7B68     		ldr	r3, [r7, #4]
 4053 026a 0022     		movs	r2, #0
 4054 026c 1A63     		str	r2, [r3, #48]
2517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 4055              		.loc 1 2518 11
 4056 026e 7B68     		ldr	r3, [r7, #4]
 4057 0270 1B68     		ldr	r3, [r3]
 4058 0272 DA68     		ldr	r2, [r3, #12]
 4059 0274 7B68     		ldr	r3, [r7, #4]
 4060 0276 1B68     		ldr	r3, [r3]
 4061 0278 22F01002 		bic	r2, r2, #16
 4062 027c DA60     		str	r2, [r3, #12]
2519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Last bytes received, so no need as the abort is immediate */
2521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (void)HAL_DMA_Abort(huart->hdmarx);
 4063              		.loc 1 2521 17
 4064 027e 7B68     		ldr	r3, [r7, #4]
 4065 0280 9B6B     		ldr	r3, [r3, #56]
 4066 0282 1846     		mov	r0, r3
 4067 0284 FFF7FEFF 		bl	HAL_DMA_Abort
 4068              	.L189:
2522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
2525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
ARM GAS  /tmp/ccKkagmp.s 			page 116


 4069              		.loc 1 2528 49
 4070 0288 7B68     		ldr	r3, [r7, #4]
 4071 028a 9A8D     		ldrh	r2, [r3, #44]
 4072              		.loc 1 2528 69
 4073 028c 7B68     		ldr	r3, [r7, #4]
 4074 028e DB8D     		ldrh	r3, [r3, #46]	@ movhi
 4075 0290 9BB2     		uxth	r3, r3
 4076              		.loc 1 2528 9
 4077 0292 D31A     		subs	r3, r2, r3
 4078 0294 9BB2     		uxth	r3, r3
 4079 0296 1946     		mov	r1, r3
 4080 0298 7868     		ldr	r0, [r7, #4]
 4081 029a FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
2530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 4082              		.loc 1 2531 7
 4083 029e 51E0     		b	.L194
 4084              	.L187:
 4085              	.LBE7:
 4086              	.LBB8:
2532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode not enabled */
2536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing.
2537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 4087              		.loc 1 2538 34
 4088 02a0 7B68     		ldr	r3, [r7, #4]
 4089 02a2 9A8D     		ldrh	r2, [r3, #44]
 4090              		.loc 1 2538 54
 4091 02a4 7B68     		ldr	r3, [r7, #4]
 4092 02a6 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 4093 02a8 9BB2     		uxth	r3, r3
 4094              		.loc 1 2538 16
 4095 02aa D31A     		subs	r3, r2, r3
 4096 02ac 7B82     		strh	r3, [r7, #18]	@ movhi
2539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (  (huart->RxXferCount > 0U)
 4097              		.loc 1 2539 19
 4098 02ae 7B68     		ldr	r3, [r7, #4]
 4099 02b0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 4100 02b2 9BB2     		uxth	r3, r3
 4101              		.loc 1 2539 10
 4102 02b4 002B     		cmp	r3, #0
 4103 02b6 47D0     		beq	.L195
2540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           &&(nb_rx_data > 0U) )
 4104              		.loc 1 2540 11
 4105 02b8 7B8A     		ldrh	r3, [r7, #18]
 4106 02ba 002B     		cmp	r3, #0
 4107 02bc 44D0     		beq	.L195
2541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXNE interrupts */
2543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 4108              		.loc 1 2543 9
 4109 02be 7B68     		ldr	r3, [r7, #4]
 4110 02c0 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 117


 4111 02c2 DA68     		ldr	r2, [r3, #12]
 4112 02c4 7B68     		ldr	r3, [r7, #4]
 4113 02c6 1B68     		ldr	r3, [r3]
 4114 02c8 22F49072 		bic	r2, r2, #288
 4115 02cc DA60     		str	r2, [r3, #12]
2544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4116              		.loc 1 2546 9
 4117 02ce 7B68     		ldr	r3, [r7, #4]
 4118 02d0 1B68     		ldr	r3, [r3]
 4119 02d2 5A69     		ldr	r2, [r3, #20]
 4120 02d4 7B68     		ldr	r3, [r7, #4]
 4121 02d6 1B68     		ldr	r3, [r3]
 4122 02d8 22F00102 		bic	r2, r2, #1
 4123 02dc 5A61     		str	r2, [r3, #20]
2547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
2549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4124              		.loc 1 2549 24
 4125 02de 7B68     		ldr	r3, [r7, #4]
 4126 02e0 2022     		movs	r2, #32
 4127 02e2 83F83E20 		strb	r2, [r3, #62]
2550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4128              		.loc 1 2550 30
 4129 02e6 7B68     		ldr	r3, [r7, #4]
 4130 02e8 0022     		movs	r2, #0
 4131 02ea 1A63     		str	r2, [r3, #48]
2551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 4132              		.loc 1 2552 9
 4133 02ec 7B68     		ldr	r3, [r7, #4]
 4134 02ee 1B68     		ldr	r3, [r3]
 4135 02f0 DA68     		ldr	r2, [r3, #12]
 4136 02f2 7B68     		ldr	r3, [r7, #4]
 4137 02f4 1B68     		ldr	r3, [r3]
 4138 02f6 22F01002 		bic	r2, r2, #16
 4139 02fa DA60     		str	r2, [r3, #12]
2553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx complete callback*/
2555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, nb_rx_data);
2556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 4140              		.loc 1 2558 9
 4141 02fc 7B8A     		ldrh	r3, [r7, #18]
 4142 02fe 1946     		mov	r1, r3
 4143 0300 7868     		ldr	r0, [r7, #4]
 4144 0302 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
2560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 4145              		.loc 1 2561 7
 4146 0306 1FE0     		b	.L195
 4147              	.L186:
 4148              	.LBE8:
2562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
ARM GAS  /tmp/ccKkagmp.s 			page 118


2563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 4149              		.loc 1 2566 18
 4150 0308 7B6A     		ldr	r3, [r7, #36]
 4151 030a 03F08003 		and	r3, r3, #128
 4152              		.loc 1 2566 6
 4153 030e 002B     		cmp	r3, #0
 4154 0310 08D0     		beq	.L191
 4155              		.loc 1 2566 56 discriminator 1
 4156 0312 3B6A     		ldr	r3, [r7, #32]
 4157 0314 03F08003 		and	r3, r3, #128
 4158              		.loc 1 2566 44 discriminator 1
 4159 0318 002B     		cmp	r3, #0
 4160 031a 03D0     		beq	.L191
2567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_Transmit_IT(huart);
 4161              		.loc 1 2568 5
 4162 031c 7868     		ldr	r0, [r7, #4]
 4163 031e FFF7FEFF 		bl	UART_Transmit_IT
2569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 4164              		.loc 1 2569 5
 4165 0322 12E0     		b	.L169
 4166              	.L191:
2570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 4167              		.loc 1 2573 18
 4168 0324 7B6A     		ldr	r3, [r7, #36]
 4169 0326 03F04003 		and	r3, r3, #64
 4170              		.loc 1 2573 6
 4171 032a 002B     		cmp	r3, #0
 4172 032c 0DD0     		beq	.L169
 4173              		.loc 1 2573 55 discriminator 1
 4174 032e 3B6A     		ldr	r3, [r7, #32]
 4175 0330 03F04003 		and	r3, r3, #64
 4176              		.loc 1 2573 43 discriminator 1
 4177 0334 002B     		cmp	r3, #0
 4178 0336 08D0     		beq	.L169
2574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 4179              		.loc 1 2575 5
 4180 0338 7868     		ldr	r0, [r7, #4]
 4181 033a FFF7FEFF 		bl	UART_EndTransmit_IT
2576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 4182              		.loc 1 2576 5
 4183 033e 04E0     		b	.L169
 4184              	.L192:
2478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
 4185              		.loc 1 2478 5
 4186 0340 00BF     		nop
 4187 0342 02E0     		b	.L169
 4188              	.L194:
 4189              	.LBB9:
2531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
ARM GAS  /tmp/ccKkagmp.s 			page 119


 4190              		.loc 1 2531 7
 4191 0344 00BF     		nop
 4192 0346 00E0     		b	.L169
 4193              	.L195:
 4194              	.LBE9:
 4195              	.LBB10:
2561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 4196              		.loc 1 2561 7
 4197 0348 00BF     		nop
 4198              	.L169:
 4199              	.LBE10:
2577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4200              		.loc 1 2578 1
 4201 034a 2837     		adds	r7, r7, #40
 4202              	.LCFI133:
 4203              		.cfi_def_cfa_offset 8
 4204 034c BD46     		mov	sp, r7
 4205              	.LCFI134:
 4206              		.cfi_def_cfa_register 13
 4207              		@ sp needed
 4208 034e 80BD     		pop	{r7, pc}
 4209              	.L197:
 4210              		.align	2
 4211              	.L196:
 4212 0350 00000000 		.word	UART_DMAAbortOnError
 4213              		.cfi_endproc
 4214              	.LFE90:
 4216              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 4217              		.align	1
 4218              		.weak	HAL_UART_TxCpltCallback
 4219              		.syntax unified
 4220              		.thumb
 4221              		.thumb_func
 4223              	HAL_UART_TxCpltCallback:
 4224              	.LFB91:
2579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
2582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4225              		.loc 1 2587 1
 4226              		.cfi_startproc
 4227              		@ args = 0, pretend = 0, frame = 8
 4228              		@ frame_needed = 1, uses_anonymous_args = 0
 4229              		@ link register save eliminated.
 4230 0000 80B4     		push	{r7}
 4231              	.LCFI135:
 4232              		.cfi_def_cfa_offset 4
 4233              		.cfi_offset 7, -4
 4234 0002 83B0     		sub	sp, sp, #12
 4235              	.LCFI136:
 4236              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccKkagmp.s 			page 120


 4237 0004 00AF     		add	r7, sp, #0
 4238              	.LCFI137:
 4239              		.cfi_def_cfa_register 7
 4240 0006 7860     		str	r0, [r7, #4]
2588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4241              		.loc 1 2593 1
 4242 0008 00BF     		nop
 4243 000a 0C37     		adds	r7, r7, #12
 4244              	.LCFI138:
 4245              		.cfi_def_cfa_offset 4
 4246 000c BD46     		mov	sp, r7
 4247              	.LCFI139:
 4248              		.cfi_def_cfa_register 13
 4249              		@ sp needed
 4250 000e 80BC     		pop	{r7}
 4251              	.LCFI140:
 4252              		.cfi_restore 7
 4253              		.cfi_def_cfa_offset 0
 4254 0010 7047     		bx	lr
 4255              		.cfi_endproc
 4256              	.LFE91:
 4258              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 4259              		.align	1
 4260              		.weak	HAL_UART_TxHalfCpltCallback
 4261              		.syntax unified
 4262              		.thumb
 4263              		.thumb_func
 4265              	HAL_UART_TxHalfCpltCallback:
 4266              	.LFB92:
2594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4267              		.loc 1 2602 1
 4268              		.cfi_startproc
 4269              		@ args = 0, pretend = 0, frame = 8
 4270              		@ frame_needed = 1, uses_anonymous_args = 0
 4271              		@ link register save eliminated.
 4272 0000 80B4     		push	{r7}
 4273              	.LCFI141:
 4274              		.cfi_def_cfa_offset 4
 4275              		.cfi_offset 7, -4
 4276 0002 83B0     		sub	sp, sp, #12
 4277              	.LCFI142:
 4278              		.cfi_def_cfa_offset 16
 4279 0004 00AF     		add	r7, sp, #0
 4280              	.LCFI143:
ARM GAS  /tmp/ccKkagmp.s 			page 121


 4281              		.cfi_def_cfa_register 7
 4282 0006 7860     		str	r0, [r7, #4]
2603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4283              		.loc 1 2608 1
 4284 0008 00BF     		nop
 4285 000a 0C37     		adds	r7, r7, #12
 4286              	.LCFI144:
 4287              		.cfi_def_cfa_offset 4
 4288 000c BD46     		mov	sp, r7
 4289              	.LCFI145:
 4290              		.cfi_def_cfa_register 13
 4291              		@ sp needed
 4292 000e 80BC     		pop	{r7}
 4293              	.LCFI146:
 4294              		.cfi_restore 7
 4295              		.cfi_def_cfa_offset 0
 4296 0010 7047     		bx	lr
 4297              		.cfi_endproc
 4298              	.LFE92:
 4300              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 4301              		.align	1
 4302              		.weak	HAL_UART_RxCpltCallback
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4307              	HAL_UART_RxCpltCallback:
 4308              	.LFB93:
2609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4309              		.loc 1 2617 1
 4310              		.cfi_startproc
 4311              		@ args = 0, pretend = 0, frame = 8
 4312              		@ frame_needed = 1, uses_anonymous_args = 0
 4313              		@ link register save eliminated.
 4314 0000 80B4     		push	{r7}
 4315              	.LCFI147:
 4316              		.cfi_def_cfa_offset 4
 4317              		.cfi_offset 7, -4
 4318 0002 83B0     		sub	sp, sp, #12
 4319              	.LCFI148:
 4320              		.cfi_def_cfa_offset 16
 4321 0004 00AF     		add	r7, sp, #0
 4322              	.LCFI149:
 4323              		.cfi_def_cfa_register 7
 4324 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccKkagmp.s 			page 122


2618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4325              		.loc 1 2623 1
 4326 0008 00BF     		nop
 4327 000a 0C37     		adds	r7, r7, #12
 4328              	.LCFI150:
 4329              		.cfi_def_cfa_offset 4
 4330 000c BD46     		mov	sp, r7
 4331              	.LCFI151:
 4332              		.cfi_def_cfa_register 13
 4333              		@ sp needed
 4334 000e 80BC     		pop	{r7}
 4335              	.LCFI152:
 4336              		.cfi_restore 7
 4337              		.cfi_def_cfa_offset 0
 4338 0010 7047     		bx	lr
 4339              		.cfi_endproc
 4340              	.LFE93:
 4342              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 4343              		.align	1
 4344              		.weak	HAL_UART_RxHalfCpltCallback
 4345              		.syntax unified
 4346              		.thumb
 4347              		.thumb_func
 4349              	HAL_UART_RxHalfCpltCallback:
 4350              	.LFB94:
2624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4351              		.loc 1 2632 1
 4352              		.cfi_startproc
 4353              		@ args = 0, pretend = 0, frame = 8
 4354              		@ frame_needed = 1, uses_anonymous_args = 0
 4355              		@ link register save eliminated.
 4356 0000 80B4     		push	{r7}
 4357              	.LCFI153:
 4358              		.cfi_def_cfa_offset 4
 4359              		.cfi_offset 7, -4
 4360 0002 83B0     		sub	sp, sp, #12
 4361              	.LCFI154:
 4362              		.cfi_def_cfa_offset 16
 4363 0004 00AF     		add	r7, sp, #0
 4364              	.LCFI155:
 4365              		.cfi_def_cfa_register 7
 4366 0006 7860     		str	r0, [r7, #4]
2633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
ARM GAS  /tmp/ccKkagmp.s 			page 123


2635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4367              		.loc 1 2638 1
 4368 0008 00BF     		nop
 4369 000a 0C37     		adds	r7, r7, #12
 4370              	.LCFI156:
 4371              		.cfi_def_cfa_offset 4
 4372 000c BD46     		mov	sp, r7
 4373              	.LCFI157:
 4374              		.cfi_def_cfa_register 13
 4375              		@ sp needed
 4376 000e 80BC     		pop	{r7}
 4377              	.LCFI158:
 4378              		.cfi_restore 7
 4379              		.cfi_def_cfa_offset 0
 4380 0010 7047     		bx	lr
 4381              		.cfi_endproc
 4382              	.LFE94:
 4384              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 4385              		.align	1
 4386              		.weak	HAL_UART_ErrorCallback
 4387              		.syntax unified
 4388              		.thumb
 4389              		.thumb_func
 4391              	HAL_UART_ErrorCallback:
 4392              	.LFB95:
2639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART error callbacks.
2642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4393              		.loc 1 2647 1
 4394              		.cfi_startproc
 4395              		@ args = 0, pretend = 0, frame = 8
 4396              		@ frame_needed = 1, uses_anonymous_args = 0
 4397              		@ link register save eliminated.
 4398 0000 80B4     		push	{r7}
 4399              	.LCFI159:
 4400              		.cfi_def_cfa_offset 4
 4401              		.cfi_offset 7, -4
 4402 0002 83B0     		sub	sp, sp, #12
 4403              	.LCFI160:
 4404              		.cfi_def_cfa_offset 16
 4405 0004 00AF     		add	r7, sp, #0
 4406              	.LCFI161:
 4407              		.cfi_def_cfa_register 7
 4408 0006 7860     		str	r0, [r7, #4]
2648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
ARM GAS  /tmp/ccKkagmp.s 			page 124


2652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4409              		.loc 1 2653 1
 4410 0008 00BF     		nop
 4411 000a 0C37     		adds	r7, r7, #12
 4412              	.LCFI162:
 4413              		.cfi_def_cfa_offset 4
 4414 000c BD46     		mov	sp, r7
 4415              	.LCFI163:
 4416              		.cfi_def_cfa_register 13
 4417              		@ sp needed
 4418 000e 80BC     		pop	{r7}
 4419              	.LCFI164:
 4420              		.cfi_restore 7
 4421              		.cfi_def_cfa_offset 0
 4422 0010 7047     		bx	lr
 4423              		.cfi_endproc
 4424              	.LFE95:
 4426              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 4427              		.align	1
 4428              		.weak	HAL_UART_AbortCpltCallback
 4429              		.syntax unified
 4430              		.thumb
 4431              		.thumb_func
 4433              	HAL_UART_AbortCpltCallback:
 4434              	.LFB96:
2654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4435              		.loc 1 2661 1
 4436              		.cfi_startproc
 4437              		@ args = 0, pretend = 0, frame = 8
 4438              		@ frame_needed = 1, uses_anonymous_args = 0
 4439              		@ link register save eliminated.
 4440 0000 80B4     		push	{r7}
 4441              	.LCFI165:
 4442              		.cfi_def_cfa_offset 4
 4443              		.cfi_offset 7, -4
 4444 0002 83B0     		sub	sp, sp, #12
 4445              	.LCFI166:
 4446              		.cfi_def_cfa_offset 16
 4447 0004 00AF     		add	r7, sp, #0
 4448              	.LCFI167:
 4449              		.cfi_def_cfa_register 7
 4450 0006 7860     		str	r0, [r7, #4]
2662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccKkagmp.s 			page 125


 4451              		.loc 1 2668 1
 4452 0008 00BF     		nop
 4453 000a 0C37     		adds	r7, r7, #12
 4454              	.LCFI168:
 4455              		.cfi_def_cfa_offset 4
 4456 000c BD46     		mov	sp, r7
 4457              	.LCFI169:
 4458              		.cfi_def_cfa_register 13
 4459              		@ sp needed
 4460 000e 80BC     		pop	{r7}
 4461              	.LCFI170:
 4462              		.cfi_restore 7
 4463              		.cfi_def_cfa_offset 0
 4464 0010 7047     		bx	lr
 4465              		.cfi_endproc
 4466              	.LFE96:
 4468              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 4469              		.align	1
 4470              		.weak	HAL_UART_AbortTransmitCpltCallback
 4471              		.syntax unified
 4472              		.thumb
 4473              		.thumb_func
 4475              	HAL_UART_AbortTransmitCpltCallback:
 4476              	.LFB97:
2669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4477              		.loc 1 2676 1
 4478              		.cfi_startproc
 4479              		@ args = 0, pretend = 0, frame = 8
 4480              		@ frame_needed = 1, uses_anonymous_args = 0
 4481              		@ link register save eliminated.
 4482 0000 80B4     		push	{r7}
 4483              	.LCFI171:
 4484              		.cfi_def_cfa_offset 4
 4485              		.cfi_offset 7, -4
 4486 0002 83B0     		sub	sp, sp, #12
 4487              	.LCFI172:
 4488              		.cfi_def_cfa_offset 16
 4489 0004 00AF     		add	r7, sp, #0
 4490              	.LCFI173:
 4491              		.cfi_def_cfa_register 7
 4492 0006 7860     		str	r0, [r7, #4]
2677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4493              		.loc 1 2683 1
 4494 0008 00BF     		nop
ARM GAS  /tmp/ccKkagmp.s 			page 126


 4495 000a 0C37     		adds	r7, r7, #12
 4496              	.LCFI174:
 4497              		.cfi_def_cfa_offset 4
 4498 000c BD46     		mov	sp, r7
 4499              	.LCFI175:
 4500              		.cfi_def_cfa_register 13
 4501              		@ sp needed
 4502 000e 80BC     		pop	{r7}
 4503              	.LCFI176:
 4504              		.cfi_restore 7
 4505              		.cfi_def_cfa_offset 0
 4506 0010 7047     		bx	lr
 4507              		.cfi_endproc
 4508              	.LFE97:
 4510              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 4511              		.align	1
 4512              		.weak	HAL_UART_AbortReceiveCpltCallback
 4513              		.syntax unified
 4514              		.thumb
 4515              		.thumb_func
 4517              	HAL_UART_AbortReceiveCpltCallback:
 4518              	.LFB98:
2684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4519              		.loc 1 2691 1
 4520              		.cfi_startproc
 4521              		@ args = 0, pretend = 0, frame = 8
 4522              		@ frame_needed = 1, uses_anonymous_args = 0
 4523              		@ link register save eliminated.
 4524 0000 80B4     		push	{r7}
 4525              	.LCFI177:
 4526              		.cfi_def_cfa_offset 4
 4527              		.cfi_offset 7, -4
 4528 0002 83B0     		sub	sp, sp, #12
 4529              	.LCFI178:
 4530              		.cfi_def_cfa_offset 16
 4531 0004 00AF     		add	r7, sp, #0
 4532              	.LCFI179:
 4533              		.cfi_def_cfa_register 7
 4534 0006 7860     		str	r0, [r7, #4]
2692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4535              		.loc 1 2698 1
 4536 0008 00BF     		nop
 4537 000a 0C37     		adds	r7, r7, #12
 4538              	.LCFI180:
ARM GAS  /tmp/ccKkagmp.s 			page 127


 4539              		.cfi_def_cfa_offset 4
 4540 000c BD46     		mov	sp, r7
 4541              	.LCFI181:
 4542              		.cfi_def_cfa_register 13
 4543              		@ sp needed
 4544 000e 80BC     		pop	{r7}
 4545              	.LCFI182:
 4546              		.cfi_restore 7
 4547              		.cfi_def_cfa_offset 0
 4548 0010 7047     		bx	lr
 4549              		.cfi_endproc
 4550              	.LFE98:
 4552              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 4553              		.align	1
 4554              		.weak	HAL_UARTEx_RxEventCallback
 4555              		.syntax unified
 4556              		.thumb
 4557              		.thumb_func
 4559              	HAL_UARTEx_RxEventCallback:
 4560              	.LFB99:
2699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Reception Event Callback (Rx event notification called after use of advanced reception 
2702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle
2703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Number of data available in application reception buffer (indicates a position in
2704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               reception buffer until which, data are available)
2705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
2708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4561              		.loc 1 2708 1
 4562              		.cfi_startproc
 4563              		@ args = 0, pretend = 0, frame = 8
 4564              		@ frame_needed = 1, uses_anonymous_args = 0
 4565              		@ link register save eliminated.
 4566 0000 80B4     		push	{r7}
 4567              	.LCFI183:
 4568              		.cfi_def_cfa_offset 4
 4569              		.cfi_offset 7, -4
 4570 0002 83B0     		sub	sp, sp, #12
 4571              	.LCFI184:
 4572              		.cfi_def_cfa_offset 16
 4573 0004 00AF     		add	r7, sp, #0
 4574              	.LCFI185:
 4575              		.cfi_def_cfa_register 7
 4576 0006 7860     		str	r0, [r7, #4]
 4577 0008 0B46     		mov	r3, r1
 4578 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(Size);
2712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UARTEx_RxEventCallback can be implemented in the user file.
2715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4579              		.loc 1 2716 1
ARM GAS  /tmp/ccKkagmp.s 			page 128


 4580 000c 00BF     		nop
 4581 000e 0C37     		adds	r7, r7, #12
 4582              	.LCFI186:
 4583              		.cfi_def_cfa_offset 4
 4584 0010 BD46     		mov	sp, r7
 4585              	.LCFI187:
 4586              		.cfi_def_cfa_register 13
 4587              		@ sp needed
 4588 0012 80BC     		pop	{r7}
 4589              	.LCFI188:
 4590              		.cfi_restore 7
 4591              		.cfi_def_cfa_offset 0
 4592 0014 7047     		bx	lr
 4593              		.cfi_endproc
 4594              	.LFE99:
 4596              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 4597              		.align	1
 4598              		.global	HAL_LIN_SendBreak
 4599              		.syntax unified
 4600              		.thumb
 4601              		.thumb_func
 4603              	HAL_LIN_SendBreak:
 4604              	.LFB100:
2717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART control functions
2724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
2730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
2733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
2734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Transmits break characters.
2743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4605              		.loc 1 2748 1
 4606              		.cfi_startproc
ARM GAS  /tmp/ccKkagmp.s 			page 129


 4607              		@ args = 0, pretend = 0, frame = 8
 4608              		@ frame_needed = 1, uses_anonymous_args = 0
 4609              		@ link register save eliminated.
 4610 0000 80B4     		push	{r7}
 4611              	.LCFI189:
 4612              		.cfi_def_cfa_offset 4
 4613              		.cfi_offset 7, -4
 4614 0002 83B0     		sub	sp, sp, #12
 4615              	.LCFI190:
 4616              		.cfi_def_cfa_offset 16
 4617 0004 00AF     		add	r7, sp, #0
 4618              	.LCFI191:
 4619              		.cfi_def_cfa_register 7
 4620 0006 7860     		str	r0, [r7, #4]
2749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4621              		.loc 1 2753 3
 4622 0008 7B68     		ldr	r3, [r7, #4]
 4623 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4624 000e 012B     		cmp	r3, #1
 4625 0010 01D1     		bne	.L208
 4626              		.loc 1 2753 3 is_stmt 0 discriminator 1
 4627 0012 0223     		movs	r3, #2
 4628 0014 18E0     		b	.L209
 4629              	.L208:
 4630              		.loc 1 2753 3 discriminator 2
 4631 0016 7B68     		ldr	r3, [r7, #4]
 4632 0018 0122     		movs	r2, #1
 4633 001a 83F83C20 		strb	r2, [r3, #60]
2754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4634              		.loc 1 2755 17 is_stmt 1 discriminator 2
 4635 001e 7B68     		ldr	r3, [r7, #4]
 4636 0020 2422     		movs	r2, #36
 4637 0022 83F83D20 		strb	r2, [r3, #61]
2756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Send break characters */
2758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 4638              		.loc 1 2758 3 discriminator 2
 4639 0026 7B68     		ldr	r3, [r7, #4]
 4640 0028 1B68     		ldr	r3, [r3]
 4641 002a DA68     		ldr	r2, [r3, #12]
 4642 002c 7B68     		ldr	r3, [r7, #4]
 4643 002e 1B68     		ldr	r3, [r3]
 4644 0030 42F00102 		orr	r2, r2, #1
 4645 0034 DA60     		str	r2, [r3, #12]
2759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4646              		.loc 1 2760 17 discriminator 2
 4647 0036 7B68     		ldr	r3, [r7, #4]
 4648 0038 2022     		movs	r2, #32
 4649 003a 83F83D20 		strb	r2, [r3, #61]
2761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
ARM GAS  /tmp/ccKkagmp.s 			page 130


2763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4650              		.loc 1 2763 3 discriminator 2
 4651 003e 7B68     		ldr	r3, [r7, #4]
 4652 0040 0022     		movs	r2, #0
 4653 0042 83F83C20 		strb	r2, [r3, #60]
2764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4654              		.loc 1 2765 10 discriminator 2
 4655 0046 0023     		movs	r3, #0
 4656              	.L209:
2766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4657              		.loc 1 2766 1
 4658 0048 1846     		mov	r0, r3
 4659 004a 0C37     		adds	r7, r7, #12
 4660              	.LCFI192:
 4661              		.cfi_def_cfa_offset 4
 4662 004c BD46     		mov	sp, r7
 4663              	.LCFI193:
 4664              		.cfi_def_cfa_register 13
 4665              		@ sp needed
 4666 004e 80BC     		pop	{r7}
 4667              	.LCFI194:
 4668              		.cfi_restore 7
 4669              		.cfi_def_cfa_offset 0
 4670 0050 7047     		bx	lr
 4671              		.cfi_endproc
 4672              	.LFE100:
 4674              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 4675              		.align	1
 4676              		.global	HAL_MultiProcessor_EnterMuteMode
 4677              		.syntax unified
 4678              		.thumb
 4679              		.thumb_func
 4681              	HAL_MultiProcessor_EnterMuteMode:
 4682              	.LFB101:
2767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4683              		.loc 1 2775 1
 4684              		.cfi_startproc
 4685              		@ args = 0, pretend = 0, frame = 8
 4686              		@ frame_needed = 1, uses_anonymous_args = 0
 4687              		@ link register save eliminated.
 4688 0000 80B4     		push	{r7}
 4689              	.LCFI195:
 4690              		.cfi_def_cfa_offset 4
 4691              		.cfi_offset 7, -4
 4692 0002 83B0     		sub	sp, sp, #12
 4693              	.LCFI196:
 4694              		.cfi_def_cfa_offset 16
 4695 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccKkagmp.s 			page 131


 4696              	.LCFI197:
 4697              		.cfi_def_cfa_register 7
 4698 0006 7860     		str	r0, [r7, #4]
2776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4699              		.loc 1 2780 3
 4700 0008 7B68     		ldr	r3, [r7, #4]
 4701 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4702 000e 012B     		cmp	r3, #1
 4703 0010 01D1     		bne	.L211
 4704              		.loc 1 2780 3 is_stmt 0 discriminator 1
 4705 0012 0223     		movs	r3, #2
 4706 0014 18E0     		b	.L212
 4707              	.L211:
 4708              		.loc 1 2780 3 discriminator 2
 4709 0016 7B68     		ldr	r3, [r7, #4]
 4710 0018 0122     		movs	r2, #1
 4711 001a 83F83C20 		strb	r2, [r3, #60]
2781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4712              		.loc 1 2782 17 is_stmt 1 discriminator 2
 4713 001e 7B68     		ldr	r3, [r7, #4]
 4714 0020 2422     		movs	r2, #36
 4715 0022 83F83D20 		strb	r2, [r3, #61]
2783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 4716              		.loc 1 2785 3 discriminator 2
 4717 0026 7B68     		ldr	r3, [r7, #4]
 4718 0028 1B68     		ldr	r3, [r3]
 4719 002a DA68     		ldr	r2, [r3, #12]
 4720 002c 7B68     		ldr	r3, [r7, #4]
 4721 002e 1B68     		ldr	r3, [r3]
 4722 0030 42F00202 		orr	r2, r2, #2
 4723 0034 DA60     		str	r2, [r3, #12]
2786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4724              		.loc 1 2787 17 discriminator 2
 4725 0036 7B68     		ldr	r3, [r7, #4]
 4726 0038 2022     		movs	r2, #32
 4727 003a 83F83D20 		strb	r2, [r3, #61]
2788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4728              		.loc 1 2790 3 discriminator 2
 4729 003e 7B68     		ldr	r3, [r7, #4]
 4730 0040 0022     		movs	r2, #0
 4731 0042 83F83C20 		strb	r2, [r3, #60]
2791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4732              		.loc 1 2792 10 discriminator 2
 4733 0046 0023     		movs	r3, #0
 4734              	.L212:
2793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccKkagmp.s 			page 132


 4735              		.loc 1 2793 1
 4736 0048 1846     		mov	r0, r3
 4737 004a 0C37     		adds	r7, r7, #12
 4738              	.LCFI198:
 4739              		.cfi_def_cfa_offset 4
 4740 004c BD46     		mov	sp, r7
 4741              	.LCFI199:
 4742              		.cfi_def_cfa_register 13
 4743              		@ sp needed
 4744 004e 80BC     		pop	{r7}
 4745              	.LCFI200:
 4746              		.cfi_restore 7
 4747              		.cfi_def_cfa_offset 0
 4748 0050 7047     		bx	lr
 4749              		.cfi_endproc
 4750              	.LFE101:
 4752              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 4753              		.align	1
 4754              		.global	HAL_MultiProcessor_ExitMuteMode
 4755              		.syntax unified
 4756              		.thumb
 4757              		.thumb_func
 4759              	HAL_MultiProcessor_ExitMuteMode:
 4760              	.LFB102:
2794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4761              		.loc 1 2802 1
 4762              		.cfi_startproc
 4763              		@ args = 0, pretend = 0, frame = 8
 4764              		@ frame_needed = 1, uses_anonymous_args = 0
 4765              		@ link register save eliminated.
 4766 0000 80B4     		push	{r7}
 4767              	.LCFI201:
 4768              		.cfi_def_cfa_offset 4
 4769              		.cfi_offset 7, -4
 4770 0002 83B0     		sub	sp, sp, #12
 4771              	.LCFI202:
 4772              		.cfi_def_cfa_offset 16
 4773 0004 00AF     		add	r7, sp, #0
 4774              	.LCFI203:
 4775              		.cfi_def_cfa_register 7
 4776 0006 7860     		str	r0, [r7, #4]
2803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4777              		.loc 1 2807 3
 4778 0008 7B68     		ldr	r3, [r7, #4]
 4779 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
ARM GAS  /tmp/ccKkagmp.s 			page 133


 4780 000e 012B     		cmp	r3, #1
 4781 0010 01D1     		bne	.L214
 4782              		.loc 1 2807 3 is_stmt 0 discriminator 1
 4783 0012 0223     		movs	r3, #2
 4784 0014 18E0     		b	.L215
 4785              	.L214:
 4786              		.loc 1 2807 3 discriminator 2
 4787 0016 7B68     		ldr	r3, [r7, #4]
 4788 0018 0122     		movs	r2, #1
 4789 001a 83F83C20 		strb	r2, [r3, #60]
2808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4790              		.loc 1 2809 17 is_stmt 1 discriminator 2
 4791 001e 7B68     		ldr	r3, [r7, #4]
 4792 0020 2422     		movs	r2, #36
 4793 0022 83F83D20 		strb	r2, [r3, #61]
2810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
2812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 4794              		.loc 1 2812 3 discriminator 2
 4795 0026 7B68     		ldr	r3, [r7, #4]
 4796 0028 1B68     		ldr	r3, [r3]
 4797 002a DA68     		ldr	r2, [r3, #12]
 4798 002c 7B68     		ldr	r3, [r7, #4]
 4799 002e 1B68     		ldr	r3, [r3]
 4800 0030 22F00202 		bic	r2, r2, #2
 4801 0034 DA60     		str	r2, [r3, #12]
2813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4802              		.loc 1 2814 17 discriminator 2
 4803 0036 7B68     		ldr	r3, [r7, #4]
 4804 0038 2022     		movs	r2, #32
 4805 003a 83F83D20 		strb	r2, [r3, #61]
2815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4806              		.loc 1 2817 3 discriminator 2
 4807 003e 7B68     		ldr	r3, [r7, #4]
 4808 0040 0022     		movs	r2, #0
 4809 0042 83F83C20 		strb	r2, [r3, #60]
2818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4810              		.loc 1 2819 10 discriminator 2
 4811 0046 0023     		movs	r3, #0
 4812              	.L215:
2820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4813              		.loc 1 2820 1
 4814 0048 1846     		mov	r0, r3
 4815 004a 0C37     		adds	r7, r7, #12
 4816              	.LCFI204:
 4817              		.cfi_def_cfa_offset 4
 4818 004c BD46     		mov	sp, r7
 4819              	.LCFI205:
 4820              		.cfi_def_cfa_register 13
 4821              		@ sp needed
 4822 004e 80BC     		pop	{r7}
 4823              	.LCFI206:
ARM GAS  /tmp/ccKkagmp.s 			page 134


 4824              		.cfi_restore 7
 4825              		.cfi_def_cfa_offset 0
 4826 0050 7047     		bx	lr
 4827              		.cfi_endproc
 4828              	.LFE102:
 4830              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 4831              		.align	1
 4832              		.global	HAL_HalfDuplex_EnableTransmitter
 4833              		.syntax unified
 4834              		.thumb
 4835              		.thumb_func
 4837              	HAL_HalfDuplex_EnableTransmitter:
 4838              	.LFB103:
2821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4839              		.loc 1 2829 1
 4840              		.cfi_startproc
 4841              		@ args = 0, pretend = 0, frame = 16
 4842              		@ frame_needed = 1, uses_anonymous_args = 0
 4843              		@ link register save eliminated.
 4844 0000 80B4     		push	{r7}
 4845              	.LCFI207:
 4846              		.cfi_def_cfa_offset 4
 4847              		.cfi_offset 7, -4
 4848 0002 85B0     		sub	sp, sp, #20
 4849              	.LCFI208:
 4850              		.cfi_def_cfa_offset 24
 4851 0004 00AF     		add	r7, sp, #0
 4852              	.LCFI209:
 4853              		.cfi_def_cfa_register 7
 4854 0006 7860     		str	r0, [r7, #4]
2830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 4855              		.loc 1 2830 12
 4856 0008 0023     		movs	r3, #0
 4857 000a FB60     		str	r3, [r7, #12]
2831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4858              		.loc 1 2833 3
 4859 000c 7B68     		ldr	r3, [r7, #4]
 4860 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4861 0012 012B     		cmp	r3, #1
 4862 0014 01D1     		bne	.L217
 4863              		.loc 1 2833 3 is_stmt 0 discriminator 1
 4864 0016 0223     		movs	r3, #2
 4865 0018 20E0     		b	.L218
 4866              	.L217:
 4867              		.loc 1 2833 3 discriminator 2
 4868 001a 7B68     		ldr	r3, [r7, #4]
 4869 001c 0122     		movs	r2, #1
ARM GAS  /tmp/ccKkagmp.s 			page 135


 4870 001e 83F83C20 		strb	r2, [r3, #60]
2834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4871              		.loc 1 2835 17 is_stmt 1 discriminator 2
 4872 0022 7B68     		ldr	r3, [r7, #4]
 4873 0024 2422     		movs	r2, #36
 4874 0026 83F83D20 		strb	r2, [r3, #61]
2836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 4875              		.loc 1 2838 17 discriminator 2
 4876 002a 7B68     		ldr	r3, [r7, #4]
 4877 002c 1B68     		ldr	r3, [r3]
 4878              		.loc 1 2838 10 discriminator 2
 4879 002e DB68     		ldr	r3, [r3, #12]
 4880 0030 FB60     		str	r3, [r7, #12]
2839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 4881              		.loc 1 2841 10 discriminator 2
 4882 0032 FB68     		ldr	r3, [r7, #12]
 4883 0034 23F00C03 		bic	r3, r3, #12
 4884 0038 FB60     		str	r3, [r7, #12]
2842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 4885              		.loc 1 2844 10 discriminator 2
 4886 003a FB68     		ldr	r3, [r7, #12]
 4887 003c 43F00803 		orr	r3, r3, #8
 4888 0040 FB60     		str	r3, [r7, #12]
2845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 4889              		.loc 1 2847 3 discriminator 2
 4890 0042 7B68     		ldr	r3, [r7, #4]
 4891 0044 1B68     		ldr	r3, [r3]
 4892 0046 FA68     		ldr	r2, [r7, #12]
 4893 0048 DA60     		str	r2, [r3, #12]
2848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4894              		.loc 1 2849 17 discriminator 2
 4895 004a 7B68     		ldr	r3, [r7, #4]
 4896 004c 2022     		movs	r2, #32
 4897 004e 83F83D20 		strb	r2, [r3, #61]
2850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4898              		.loc 1 2852 3 discriminator 2
 4899 0052 7B68     		ldr	r3, [r7, #4]
 4900 0054 0022     		movs	r2, #0
 4901 0056 83F83C20 		strb	r2, [r3, #60]
2853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4902              		.loc 1 2854 10 discriminator 2
 4903 005a 0023     		movs	r3, #0
 4904              	.L218:
2855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccKkagmp.s 			page 136


 4905              		.loc 1 2855 1
 4906 005c 1846     		mov	r0, r3
 4907 005e 1437     		adds	r7, r7, #20
 4908              	.LCFI210:
 4909              		.cfi_def_cfa_offset 4
 4910 0060 BD46     		mov	sp, r7
 4911              	.LCFI211:
 4912              		.cfi_def_cfa_register 13
 4913              		@ sp needed
 4914 0062 80BC     		pop	{r7}
 4915              	.LCFI212:
 4916              		.cfi_restore 7
 4917              		.cfi_def_cfa_offset 0
 4918 0064 7047     		bx	lr
 4919              		.cfi_endproc
 4920              	.LFE103:
 4922              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 4923              		.align	1
 4924              		.global	HAL_HalfDuplex_EnableReceiver
 4925              		.syntax unified
 4926              		.thumb
 4927              		.thumb_func
 4929              	HAL_HalfDuplex_EnableReceiver:
 4930              	.LFB104:
2856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4931              		.loc 1 2864 1
 4932              		.cfi_startproc
 4933              		@ args = 0, pretend = 0, frame = 16
 4934              		@ frame_needed = 1, uses_anonymous_args = 0
 4935              		@ link register save eliminated.
 4936 0000 80B4     		push	{r7}
 4937              	.LCFI213:
 4938              		.cfi_def_cfa_offset 4
 4939              		.cfi_offset 7, -4
 4940 0002 85B0     		sub	sp, sp, #20
 4941              	.LCFI214:
 4942              		.cfi_def_cfa_offset 24
 4943 0004 00AF     		add	r7, sp, #0
 4944              	.LCFI215:
 4945              		.cfi_def_cfa_register 7
 4946 0006 7860     		str	r0, [r7, #4]
2865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 4947              		.loc 1 2865 12
 4948 0008 0023     		movs	r3, #0
 4949 000a FB60     		str	r3, [r7, #12]
2866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4950              		.loc 1 2868 3
ARM GAS  /tmp/ccKkagmp.s 			page 137


 4951 000c 7B68     		ldr	r3, [r7, #4]
 4952 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4953 0012 012B     		cmp	r3, #1
 4954 0014 01D1     		bne	.L220
 4955              		.loc 1 2868 3 is_stmt 0 discriminator 1
 4956 0016 0223     		movs	r3, #2
 4957 0018 20E0     		b	.L221
 4958              	.L220:
 4959              		.loc 1 2868 3 discriminator 2
 4960 001a 7B68     		ldr	r3, [r7, #4]
 4961 001c 0122     		movs	r2, #1
 4962 001e 83F83C20 		strb	r2, [r3, #60]
2869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4963              		.loc 1 2870 17 is_stmt 1 discriminator 2
 4964 0022 7B68     		ldr	r3, [r7, #4]
 4965 0024 2422     		movs	r2, #36
 4966 0026 83F83D20 		strb	r2, [r3, #61]
2871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 4967              		.loc 1 2873 17 discriminator 2
 4968 002a 7B68     		ldr	r3, [r7, #4]
 4969 002c 1B68     		ldr	r3, [r3]
 4970              		.loc 1 2873 10 discriminator 2
 4971 002e DB68     		ldr	r3, [r3, #12]
 4972 0030 FB60     		str	r3, [r7, #12]
2874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 4973              		.loc 1 2876 10 discriminator 2
 4974 0032 FB68     		ldr	r3, [r7, #12]
 4975 0034 23F00C03 		bic	r3, r3, #12
 4976 0038 FB60     		str	r3, [r7, #12]
2877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 4977              		.loc 1 2879 10 discriminator 2
 4978 003a FB68     		ldr	r3, [r7, #12]
 4979 003c 43F00403 		orr	r3, r3, #4
 4980 0040 FB60     		str	r3, [r7, #12]
2880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 4981              		.loc 1 2882 3 discriminator 2
 4982 0042 7B68     		ldr	r3, [r7, #4]
 4983 0044 1B68     		ldr	r3, [r3]
 4984 0046 FA68     		ldr	r2, [r7, #12]
 4985 0048 DA60     		str	r2, [r3, #12]
2883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4986              		.loc 1 2884 17 discriminator 2
 4987 004a 7B68     		ldr	r3, [r7, #4]
 4988 004c 2022     		movs	r2, #32
 4989 004e 83F83D20 		strb	r2, [r3, #61]
2885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
ARM GAS  /tmp/ccKkagmp.s 			page 138


2887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4990              		.loc 1 2887 3 discriminator 2
 4991 0052 7B68     		ldr	r3, [r7, #4]
 4992 0054 0022     		movs	r2, #0
 4993 0056 83F83C20 		strb	r2, [r3, #60]
2888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4994              		.loc 1 2889 10 discriminator 2
 4995 005a 0023     		movs	r3, #0
 4996              	.L221:
2890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4997              		.loc 1 2890 1
 4998 005c 1846     		mov	r0, r3
 4999 005e 1437     		adds	r7, r7, #20
 5000              	.LCFI216:
 5001              		.cfi_def_cfa_offset 4
 5002 0060 BD46     		mov	sp, r7
 5003              	.LCFI217:
 5004              		.cfi_def_cfa_register 13
 5005              		@ sp needed
 5006 0062 80BC     		pop	{r7}
 5007              	.LCFI218:
 5008              		.cfi_restore 7
 5009              		.cfi_def_cfa_offset 0
 5010 0064 7047     		bx	lr
 5011              		.cfi_endproc
 5012              	.LFE104:
 5014              		.section	.text.HAL_UART_GetState,"ax",%progbits
 5015              		.align	1
 5016              		.global	HAL_UART_GetState
 5017              		.syntax unified
 5018              		.thumb
 5019              		.thumb_func
 5021              	HAL_UART_GetState:
 5022              	.LFB105:
2891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  [..]
2904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    process
2907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp/ccKkagmp.s 			page 139


2913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Returns the UART state.
2916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL state
2919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5023              		.loc 1 2921 1
 5024              		.cfi_startproc
 5025              		@ args = 0, pretend = 0, frame = 16
 5026              		@ frame_needed = 1, uses_anonymous_args = 0
 5027              		@ link register save eliminated.
 5028 0000 80B4     		push	{r7}
 5029              	.LCFI219:
 5030              		.cfi_def_cfa_offset 4
 5031              		.cfi_offset 7, -4
 5032 0002 85B0     		sub	sp, sp, #20
 5033              	.LCFI220:
 5034              		.cfi_def_cfa_offset 24
 5035 0004 00AF     		add	r7, sp, #0
 5036              	.LCFI221:
 5037              		.cfi_def_cfa_register 7
 5038 0006 7860     		str	r0, [r7, #4]
2922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 5039              		.loc 1 2922 12
 5040 0008 0023     		movs	r3, #0
 5041 000a FB60     		str	r3, [r7, #12]
 5042              		.loc 1 2922 27
 5043 000c 0023     		movs	r3, #0
 5044 000e BB60     		str	r3, [r7, #8]
2923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp1 = huart->gState;
 5045              		.loc 1 2923 16
 5046 0010 7B68     		ldr	r3, [r7, #4]
 5047 0012 93F83D30 		ldrb	r3, [r3, #61]
 5048 0016 DBB2     		uxtb	r3, r3
 5049              		.loc 1 2923 9
 5050 0018 FB60     		str	r3, [r7, #12]
2924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
 5051              		.loc 1 2924 16
 5052 001a 7B68     		ldr	r3, [r7, #4]
 5053 001c 93F83E30 		ldrb	r3, [r3, #62]
 5054 0020 DBB2     		uxtb	r3, r3
 5055              		.loc 1 2924 9
 5056 0022 BB60     		str	r3, [r7, #8]
2925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 5057              		.loc 1 2926 10
 5058 0024 FB68     		ldr	r3, [r7, #12]
 5059 0026 DAB2     		uxtb	r2, r3
 5060 0028 BB68     		ldr	r3, [r7, #8]
 5061 002a DBB2     		uxtb	r3, r3
 5062 002c 1343     		orrs	r3, r3, r2
 5063 002e DBB2     		uxtb	r3, r3
2927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5064              		.loc 1 2927 1
ARM GAS  /tmp/ccKkagmp.s 			page 140


 5065 0030 1846     		mov	r0, r3
 5066 0032 1437     		adds	r7, r7, #20
 5067              	.LCFI222:
 5068              		.cfi_def_cfa_offset 4
 5069 0034 BD46     		mov	sp, r7
 5070              	.LCFI223:
 5071              		.cfi_def_cfa_register 13
 5072              		@ sp needed
 5073 0036 80BC     		pop	{r7}
 5074              	.LCFI224:
 5075              		.cfi_restore 7
 5076              		.cfi_def_cfa_offset 0
 5077 0038 7047     		bx	lr
 5078              		.cfi_endproc
 5079              	.LFE105:
 5081              		.section	.text.HAL_UART_GetError,"ax",%progbits
 5082              		.align	1
 5083              		.global	HAL_UART_GetError
 5084              		.syntax unified
 5085              		.thumb
 5086              		.thumb_func
 5088              	HAL_UART_GetError:
 5089              	.LFB106:
2928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Return the UART error code
2931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART.
2933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval UART Error Code
2934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5090              		.loc 1 2936 1
 5091              		.cfi_startproc
 5092              		@ args = 0, pretend = 0, frame = 8
 5093              		@ frame_needed = 1, uses_anonymous_args = 0
 5094              		@ link register save eliminated.
 5095 0000 80B4     		push	{r7}
 5096              	.LCFI225:
 5097              		.cfi_def_cfa_offset 4
 5098              		.cfi_offset 7, -4
 5099 0002 83B0     		sub	sp, sp, #12
 5100              	.LCFI226:
 5101              		.cfi_def_cfa_offset 16
 5102 0004 00AF     		add	r7, sp, #0
 5103              	.LCFI227:
 5104              		.cfi_def_cfa_register 7
 5105 0006 7860     		str	r0, [r7, #4]
2937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
 5106              		.loc 1 2937 15
 5107 0008 7B68     		ldr	r3, [r7, #4]
 5108 000a 1B6C     		ldr	r3, [r3, #64]
2938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5109              		.loc 1 2938 1
 5110 000c 1846     		mov	r0, r3
 5111 000e 0C37     		adds	r7, r7, #12
 5112              	.LCFI228:
ARM GAS  /tmp/ccKkagmp.s 			page 141


 5113              		.cfi_def_cfa_offset 4
 5114 0010 BD46     		mov	sp, r7
 5115              	.LCFI229:
 5116              		.cfi_def_cfa_register 13
 5117              		@ sp needed
 5118 0012 80BC     		pop	{r7}
 5119              	.LCFI230:
 5120              		.cfi_restore 7
 5121              		.cfi_def_cfa_offset 0
 5122 0014 7047     		bx	lr
 5123              		.cfi_endproc
 5124              	.LFE106:
 5126              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 5127              		.align	1
 5128              		.syntax unified
 5129              		.thumb
 5130              		.thumb_func
 5132              	UART_DMATransmitCplt:
 5133              	.LFB107:
2939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval none
2956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Init the UART Callback settings */
2961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCall
2970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
ARM GAS  /tmp/ccKkagmp.s 			page 142


2977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5134              		.loc 1 2981 1
 5135              		.cfi_startproc
 5136              		@ args = 0, pretend = 0, frame = 16
 5137              		@ frame_needed = 1, uses_anonymous_args = 0
 5138 0000 80B5     		push	{r7, lr}
 5139              	.LCFI231:
 5140              		.cfi_def_cfa_offset 8
 5141              		.cfi_offset 7, -8
 5142              		.cfi_offset 14, -4
 5143 0002 84B0     		sub	sp, sp, #16
 5144              	.LCFI232:
 5145              		.cfi_def_cfa_offset 24
 5146 0004 00AF     		add	r7, sp, #0
 5147              	.LCFI233:
 5148              		.cfi_def_cfa_register 7
 5149 0006 7860     		str	r0, [r7, #4]
2982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5150              		.loc 1 2982 23
 5151 0008 7B68     		ldr	r3, [r7, #4]
 5152 000a 5B6A     		ldr	r3, [r3, #36]
 5153 000c FB60     		str	r3, [r7, #12]
2983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 5154              		.loc 1 2984 12
 5155 000e 7B68     		ldr	r3, [r7, #4]
 5156 0010 1B68     		ldr	r3, [r3]
 5157              		.loc 1 2984 22
 5158 0012 1B68     		ldr	r3, [r3]
 5159              		.loc 1 2984 28
 5160 0014 03F02003 		and	r3, r3, #32
 5161              		.loc 1 2984 6
 5162 0018 002B     		cmp	r3, #0
 5163 001a 13D1     		bne	.L227
2985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 5164              		.loc 1 2986 24
 5165 001c FB68     		ldr	r3, [r7, #12]
 5166 001e 0022     		movs	r2, #0
 5167 0020 DA84     		strh	r2, [r3, #38]	@ movhi
2987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 5168              		.loc 1 2990 5
 5169 0022 FB68     		ldr	r3, [r7, #12]
 5170 0024 1B68     		ldr	r3, [r3]
 5171 0026 5A69     		ldr	r2, [r3, #20]
 5172 0028 FB68     		ldr	r3, [r7, #12]
 5173 002a 1B68     		ldr	r3, [r3]
 5174 002c 22F08002 		bic	r2, r2, #128
 5175 0030 5A61     		str	r2, [r3, #20]
2991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 143


2992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5176              		.loc 1 2993 5
 5177 0032 FB68     		ldr	r3, [r7, #12]
 5178 0034 1B68     		ldr	r3, [r3]
 5179 0036 DA68     		ldr	r2, [r3, #12]
 5180 0038 FB68     		ldr	r3, [r7, #12]
 5181 003a 1B68     		ldr	r3, [r3]
 5182 003c 42F04002 		orr	r2, r2, #64
 5183 0040 DA60     		str	r2, [r3, #12]
2994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Circular mode */
2997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5184              		.loc 1 3007 1
 5185 0042 02E0     		b	.L229
 5186              	.L227:
3004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 5187              		.loc 1 3004 5
 5188 0044 F868     		ldr	r0, [r7, #12]
 5189 0046 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 5190              	.L229:
 5191              		.loc 1 3007 1
 5192 004a 00BF     		nop
 5193 004c 1037     		adds	r7, r7, #16
 5194              	.LCFI234:
 5195              		.cfi_def_cfa_offset 8
 5196 004e BD46     		mov	sp, r7
 5197              	.LCFI235:
 5198              		.cfi_def_cfa_register 13
 5199              		@ sp needed
 5200 0050 80BD     		pop	{r7, pc}
 5201              		.cfi_endproc
 5202              	.LFE107:
 5204              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 5205              		.align	1
 5206              		.syntax unified
 5207              		.thumb
 5208              		.thumb_func
 5210              	UART_DMATxHalfCplt:
 5211              	.LFB108:
3008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
3011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccKkagmp.s 			page 144


3014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5212              		.loc 1 3016 1
 5213              		.cfi_startproc
 5214              		@ args = 0, pretend = 0, frame = 16
 5215              		@ frame_needed = 1, uses_anonymous_args = 0
 5216 0000 80B5     		push	{r7, lr}
 5217              	.LCFI236:
 5218              		.cfi_def_cfa_offset 8
 5219              		.cfi_offset 7, -8
 5220              		.cfi_offset 14, -4
 5221 0002 84B0     		sub	sp, sp, #16
 5222              	.LCFI237:
 5223              		.cfi_def_cfa_offset 24
 5224 0004 00AF     		add	r7, sp, #0
 5225              	.LCFI238:
 5226              		.cfi_def_cfa_register 7
 5227 0006 7860     		str	r0, [r7, #4]
3017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5228              		.loc 1 3017 23
 5229 0008 7B68     		ldr	r3, [r7, #4]
 5230 000a 5B6A     		ldr	r3, [r3, #36]
 5231 000c FB60     		str	r3, [r7, #12]
3018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 5232              		.loc 1 3024 3
 5233 000e F868     		ldr	r0, [r7, #12]
 5234 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
3025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5235              		.loc 1 3026 1
 5236 0014 00BF     		nop
 5237 0016 1037     		adds	r7, r7, #16
 5238              	.LCFI239:
 5239              		.cfi_def_cfa_offset 8
 5240 0018 BD46     		mov	sp, r7
 5241              	.LCFI240:
 5242              		.cfi_def_cfa_register 13
 5243              		@ sp needed
 5244 001a 80BD     		pop	{r7, pc}
 5245              		.cfi_endproc
 5246              	.LFE108:
 5248              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 5249              		.align	1
 5250              		.syntax unified
 5251              		.thumb
 5252              		.thumb_func
 5254              	UART_DMAReceiveCplt:
 5255              	.LFB109:
3027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
ARM GAS  /tmp/ccKkagmp.s 			page 145


3029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
3030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5256              		.loc 1 3035 1
 5257              		.cfi_startproc
 5258              		@ args = 0, pretend = 0, frame = 16
 5259              		@ frame_needed = 1, uses_anonymous_args = 0
 5260 0000 80B5     		push	{r7, lr}
 5261              	.LCFI241:
 5262              		.cfi_def_cfa_offset 8
 5263              		.cfi_offset 7, -8
 5264              		.cfi_offset 14, -4
 5265 0002 84B0     		sub	sp, sp, #16
 5266              	.LCFI242:
 5267              		.cfi_def_cfa_offset 24
 5268 0004 00AF     		add	r7, sp, #0
 5269              	.LCFI243:
 5270              		.cfi_def_cfa_register 7
 5271 0006 7860     		str	r0, [r7, #4]
3036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5272              		.loc 1 3036 23
 5273 0008 7B68     		ldr	r3, [r7, #4]
 5274 000a 5B6A     		ldr	r3, [r3, #36]
 5275 000c FB60     		str	r3, [r7, #12]
3037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
3038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 5276              		.loc 1 3038 12
 5277 000e 7B68     		ldr	r3, [r7, #4]
 5278 0010 1B68     		ldr	r3, [r3]
 5279              		.loc 1 3038 22
 5280 0012 1B68     		ldr	r3, [r3]
 5281              		.loc 1 3038 28
 5282 0014 03F02003 		and	r3, r3, #32
 5283              		.loc 1 3038 6
 5284 0018 002B     		cmp	r3, #0
 5285 001a 2AD1     		bne	.L232
3039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
 5286              		.loc 1 3040 24
 5287 001c FB68     		ldr	r3, [r7, #12]
 5288 001e 0022     		movs	r2, #0
 5289 0020 DA85     		strh	r2, [r3, #46]	@ movhi
3041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5290              		.loc 1 3043 5
 5291 0022 FB68     		ldr	r3, [r7, #12]
 5292 0024 1B68     		ldr	r3, [r3]
 5293 0026 DA68     		ldr	r2, [r3, #12]
 5294 0028 FB68     		ldr	r3, [r7, #12]
 5295 002a 1B68     		ldr	r3, [r3]
 5296 002c 22F48072 		bic	r2, r2, #256
 5297 0030 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 146


3044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5298              		.loc 1 3044 5
 5299 0032 FB68     		ldr	r3, [r7, #12]
 5300 0034 1B68     		ldr	r3, [r3]
 5301 0036 5A69     		ldr	r2, [r3, #20]
 5302 0038 FB68     		ldr	r3, [r7, #12]
 5303 003a 1B68     		ldr	r3, [r3]
 5304 003c 22F00102 		bic	r2, r2, #1
 5305 0040 5A61     		str	r2, [r3, #20]
3045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
3047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
3048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5306              		.loc 1 3048 5
 5307 0042 FB68     		ldr	r3, [r7, #12]
 5308 0044 1B68     		ldr	r3, [r3]
 5309 0046 5A69     		ldr	r2, [r3, #20]
 5310 0048 FB68     		ldr	r3, [r7, #12]
 5311 004a 1B68     		ldr	r3, [r3]
 5312 004c 22F04002 		bic	r2, r2, #64
 5313 0050 5A61     		str	r2, [r3, #20]
3049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 5314              		.loc 1 3051 20
 5315 0052 FB68     		ldr	r3, [r7, #12]
 5316 0054 2022     		movs	r2, #32
 5317 0056 83F83E20 		strb	r2, [r3, #62]
3052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
3054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5318              		.loc 1 3054 14
 5319 005a FB68     		ldr	r3, [r7, #12]
 5320 005c 1B6B     		ldr	r3, [r3, #48]
 5321              		.loc 1 3054 8
 5322 005e 012B     		cmp	r3, #1
 5323 0060 07D1     		bne	.L232
3055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5324              		.loc 1 3056 7
 5325 0062 FB68     		ldr	r3, [r7, #12]
 5326 0064 1B68     		ldr	r3, [r3]
 5327 0066 DA68     		ldr	r2, [r3, #12]
 5328 0068 FB68     		ldr	r3, [r7, #12]
 5329 006a 1B68     		ldr	r3, [r3]
 5330 006c 22F01002 		bic	r2, r2, #16
 5331 0070 DA60     		str	r2, [r3, #12]
 5332              	.L232:
3057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5333              		.loc 1 3062 12
 5334 0072 FB68     		ldr	r3, [r7, #12]
 5335 0074 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/ccKkagmp.s 			page 147


 5336              		.loc 1 3062 6
 5337 0076 012B     		cmp	r3, #1
 5338 0078 06D1     		bne	.L233
3063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {  
3064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize);
3067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 5339              		.loc 1 3069 5
 5340 007a FB68     		ldr	r3, [r7, #12]
 5341 007c 9B8D     		ldrh	r3, [r3, #44]
 5342 007e 1946     		mov	r1, r3
 5343 0080 F868     		ldr	r0, [r7, #12]
 5344 0082 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Complete callback */
3075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx complete callback*/
3077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxCpltCallback(huart);
3078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx complete callback*/
3080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxCpltCallback(huart);
3081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5345              		.loc 1 3083 1
 5346 0086 02E0     		b	.L235
 5347              	.L233:
3080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 5348              		.loc 1 3080 5
 5349 0088 F868     		ldr	r0, [r7, #12]
 5350 008a FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 5351              	.L235:
 5352              		.loc 1 3083 1
 5353 008e 00BF     		nop
 5354 0090 1037     		adds	r7, r7, #16
 5355              	.LCFI244:
 5356              		.cfi_def_cfa_offset 8
 5357 0092 BD46     		mov	sp, r7
 5358              	.LCFI245:
 5359              		.cfi_def_cfa_register 13
 5360              		@ sp needed
 5361 0094 80BD     		pop	{r7, pc}
 5362              		.cfi_endproc
 5363              	.LFE109:
 5365              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 5366              		.align	1
 5367              		.syntax unified
 5368              		.thumb
 5369              		.thumb_func
 5371              	UART_DMARxHalfCplt:
 5372              	.LFB110:
ARM GAS  /tmp/ccKkagmp.s 			page 148


3084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
3087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5373              		.loc 1 3092 1
 5374              		.cfi_startproc
 5375              		@ args = 0, pretend = 0, frame = 16
 5376              		@ frame_needed = 1, uses_anonymous_args = 0
 5377 0000 80B5     		push	{r7, lr}
 5378              	.LCFI246:
 5379              		.cfi_def_cfa_offset 8
 5380              		.cfi_offset 7, -8
 5381              		.cfi_offset 14, -4
 5382 0002 84B0     		sub	sp, sp, #16
 5383              	.LCFI247:
 5384              		.cfi_def_cfa_offset 24
 5385 0004 00AF     		add	r7, sp, #0
 5386              	.LCFI248:
 5387              		.cfi_def_cfa_register 7
 5388 0006 7860     		str	r0, [r7, #4]
3093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5389              		.loc 1 3093 23
 5390 0008 7B68     		ldr	r3, [r7, #4]
 5391 000a 5B6A     		ldr	r3, [r3, #36]
 5392 000c FB60     		str	r3, [r7, #12]
3094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5393              		.loc 1 3097 12
 5394 000e FB68     		ldr	r3, [r7, #12]
 5395 0010 1B6B     		ldr	r3, [r3, #48]
 5396              		.loc 1 3097 6
 5397 0012 012B     		cmp	r3, #1
 5398 0014 08D1     		bne	.L237
3098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize/2U);
3102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 5399              		.loc 1 3104 44
 5400 0016 FB68     		ldr	r3, [r7, #12]
 5401 0018 9B8D     		ldrh	r3, [r3, #44]
 5402              		.loc 1 3104 5
 5403 001a 5B08     		lsrs	r3, r3, #1
 5404 001c 9BB2     		uxth	r3, r3
 5405 001e 1946     		mov	r1, r3
 5406 0020 F868     		ldr	r0, [r7, #12]
 5407 0022 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccKkagmp.s 			page 149


3106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Half Complete callback */
3110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Half complete callback*/
3112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxHalfCpltCallback(huart);
3113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Half complete callback*/
3115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxHalfCpltCallback(huart);
3116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5408              		.loc 1 3118 1
 5409 0026 02E0     		b	.L239
 5410              	.L237:
3115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 5411              		.loc 1 3115 5
 5412 0028 F868     		ldr	r0, [r7, #12]
 5413 002a FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 5414              	.L239:
 5415              		.loc 1 3118 1
 5416 002e 00BF     		nop
 5417 0030 1037     		adds	r7, r7, #16
 5418              	.LCFI249:
 5419              		.cfi_def_cfa_offset 8
 5420 0032 BD46     		mov	sp, r7
 5421              	.LCFI250:
 5422              		.cfi_def_cfa_register 13
 5423              		@ sp needed
 5424 0034 80BD     		pop	{r7, pc}
 5425              		.cfi_endproc
 5426              	.LFE110:
 5428              		.section	.text.UART_DMAError,"ax",%progbits
 5429              		.align	1
 5430              		.syntax unified
 5431              		.thumb
 5432              		.thumb_func
 5434              	UART_DMAError:
 5435              	.LFB111:
3119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
3122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5436              		.loc 1 3127 1
 5437              		.cfi_startproc
 5438              		@ args = 0, pretend = 0, frame = 16
 5439              		@ frame_needed = 1, uses_anonymous_args = 0
 5440 0000 80B5     		push	{r7, lr}
 5441              	.LCFI251:
 5442              		.cfi_def_cfa_offset 8
 5443              		.cfi_offset 7, -8
ARM GAS  /tmp/ccKkagmp.s 			page 150


 5444              		.cfi_offset 14, -4
 5445 0002 84B0     		sub	sp, sp, #16
 5446              	.LCFI252:
 5447              		.cfi_def_cfa_offset 24
 5448 0004 00AF     		add	r7, sp, #0
 5449              	.LCFI253:
 5450              		.cfi_def_cfa_register 7
 5451 0006 7860     		str	r0, [r7, #4]
3128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 5452              		.loc 1 3128 12
 5453 0008 0023     		movs	r3, #0
 5454 000a FB60     		str	r3, [r7, #12]
3129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5455              		.loc 1 3129 23
 5456 000c 7B68     		ldr	r3, [r7, #4]
 5457 000e 5B6A     		ldr	r3, [r3, #36]
 5458 0010 BB60     		str	r3, [r7, #8]
3130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 5459              		.loc 1 3132 16
 5460 0012 BB68     		ldr	r3, [r7, #8]
 5461 0014 1B68     		ldr	r3, [r3]
 5462 0016 5B69     		ldr	r3, [r3, #20]
 5463 0018 03F08003 		and	r3, r3, #128
 5464 001c 002B     		cmp	r3, #0
 5465 001e 14BF     		ite	ne
 5466 0020 0123     		movne	r3, #1
 5467 0022 0023     		moveq	r3, #0
 5468 0024 DBB2     		uxtb	r3, r3
 5469              		.loc 1 3132 14
 5470 0026 FB60     		str	r3, [r7, #12]
3133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 5471              		.loc 1 3133 13
 5472 0028 BB68     		ldr	r3, [r7, #8]
 5473 002a 93F83D30 		ldrb	r3, [r3, #61]
 5474 002e DBB2     		uxtb	r3, r3
 5475              		.loc 1 3133 6
 5476 0030 212B     		cmp	r3, #33
 5477 0032 08D1     		bne	.L241
 5478              		.loc 1 3133 49 discriminator 1
 5479 0034 FB68     		ldr	r3, [r7, #12]
 5480 0036 002B     		cmp	r3, #0
 5481 0038 05D0     		beq	.L241
3134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 5482              		.loc 1 3135 24
 5483 003a BB68     		ldr	r3, [r7, #8]
 5484 003c 0022     		movs	r2, #0
 5485 003e DA84     		strh	r2, [r3, #38]	@ movhi
3136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 5486              		.loc 1 3136 5
 5487 0040 B868     		ldr	r0, [r7, #8]
 5488 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 5489              	.L241:
3137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 151


3139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 5490              		.loc 1 3140 16
 5491 0046 BB68     		ldr	r3, [r7, #8]
 5492 0048 1B68     		ldr	r3, [r3]
 5493 004a 5B69     		ldr	r3, [r3, #20]
 5494 004c 03F04003 		and	r3, r3, #64
 5495 0050 002B     		cmp	r3, #0
 5496 0052 14BF     		ite	ne
 5497 0054 0123     		movne	r3, #1
 5498 0056 0023     		moveq	r3, #0
 5499 0058 DBB2     		uxtb	r3, r3
 5500              		.loc 1 3140 14
 5501 005a FB60     		str	r3, [r7, #12]
3141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 5502              		.loc 1 3141 13
 5503 005c BB68     		ldr	r3, [r7, #8]
 5504 005e 93F83E30 		ldrb	r3, [r3, #62]
 5505 0062 DBB2     		uxtb	r3, r3
 5506              		.loc 1 3141 6
 5507 0064 222B     		cmp	r3, #34
 5508 0066 08D1     		bne	.L242
 5509              		.loc 1 3141 50 discriminator 1
 5510 0068 FB68     		ldr	r3, [r7, #12]
 5511 006a 002B     		cmp	r3, #0
 5512 006c 05D0     		beq	.L242
3142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 5513              		.loc 1 3143 24
 5514 006e BB68     		ldr	r3, [r7, #8]
 5515 0070 0022     		movs	r2, #0
 5516 0072 DA85     		strh	r2, [r3, #46]	@ movhi
3144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 5517              		.loc 1 3144 5
 5518 0074 B868     		ldr	r0, [r7, #8]
 5519 0076 FFF7FEFF 		bl	UART_EndRxTransfer
 5520              	.L242:
3145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 5521              		.loc 1 3147 20
 5522 007a BB68     		ldr	r3, [r7, #8]
 5523 007c 1B6C     		ldr	r3, [r3, #64]
 5524 007e 43F01002 		orr	r2, r3, #16
 5525 0082 BB68     		ldr	r3, [r7, #8]
 5526 0084 1A64     		str	r2, [r3, #64]
3148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 5527              		.loc 1 3153 3
 5528 0086 B868     		ldr	r0, [r7, #8]
 5529 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccKkagmp.s 			page 152


 5530              		.loc 1 3155 1
 5531 008c 00BF     		nop
 5532 008e 1037     		adds	r7, r7, #16
 5533              	.LCFI254:
 5534              		.cfi_def_cfa_offset 8
 5535 0090 BD46     		mov	sp, r7
 5536              	.LCFI255:
 5537              		.cfi_def_cfa_register 13
 5538              		@ sp needed
 5539 0092 80BD     		pop	{r7, pc}
 5540              		.cfi_endproc
 5541              	.LFE111:
 5543              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 5544              		.align	1
 5545              		.syntax unified
 5546              		.thumb
 5547              		.thumb_func
 5549              	UART_WaitOnFlagUntilTimeout:
 5550              	.LFB112:
3156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
3159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
3162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Status The new Flag status (SET or RESET).
3163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Tickstart Tick start value
3164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
3165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
3168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5551              		.loc 1 3168 1
 5552              		.cfi_startproc
 5553              		@ args = 4, pretend = 0, frame = 16
 5554              		@ frame_needed = 1, uses_anonymous_args = 0
 5555 0000 80B5     		push	{r7, lr}
 5556              	.LCFI256:
 5557              		.cfi_def_cfa_offset 8
 5558              		.cfi_offset 7, -8
 5559              		.cfi_offset 14, -4
 5560 0002 84B0     		sub	sp, sp, #16
 5561              	.LCFI257:
 5562              		.cfi_def_cfa_offset 24
 5563 0004 00AF     		add	r7, sp, #0
 5564              	.LCFI258:
 5565              		.cfi_def_cfa_register 7
 5566 0006 F860     		str	r0, [r7, #12]
 5567 0008 B960     		str	r1, [r7, #8]
 5568 000a 3B60     		str	r3, [r7]
 5569 000c 1346     		mov	r3, r2
 5570 000e FB71     		strb	r3, [r7, #7]
3169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 5571              		.loc 1 3170 9
 5572 0010 2CE0     		b	.L244
 5573              	.L247:
ARM GAS  /tmp/ccKkagmp.s 			page 153


3171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check for the Timeout */
3173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
 5574              		.loc 1 3173 8
 5575 0012 BB69     		ldr	r3, [r7, #24]
 5576 0014 B3F1FF3F 		cmp	r3, #-1
 5577 0018 28D0     		beq	.L244
3174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 5578              		.loc 1 3175 10
 5579 001a BB69     		ldr	r3, [r7, #24]
 5580 001c 002B     		cmp	r3, #0
 5581 001e 07D0     		beq	.L245
 5582              		.loc 1 3175 32 discriminator 1
 5583 0020 FFF7FEFF 		bl	HAL_GetTick
 5584 0024 0246     		mov	r2, r0
 5585              		.loc 1 3175 46 discriminator 1
 5586 0026 3B68     		ldr	r3, [r7]
 5587 0028 D31A     		subs	r3, r2, r3
 5588              		.loc 1 3175 27 discriminator 1
 5589 002a BA69     		ldr	r2, [r7, #24]
 5590 002c 9A42     		cmp	r2, r3
 5591 002e 1DD2     		bcs	.L244
 5592              	.L245:
3176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
3178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 5593              		.loc 1 3178 9
 5594 0030 FB68     		ldr	r3, [r7, #12]
 5595 0032 1B68     		ldr	r3, [r3]
 5596 0034 DA68     		ldr	r2, [r3, #12]
 5597 0036 FB68     		ldr	r3, [r7, #12]
 5598 0038 1B68     		ldr	r3, [r3]
 5599 003a 22F4D072 		bic	r2, r2, #416
 5600 003e DA60     		str	r2, [r3, #12]
3179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5601              		.loc 1 3179 9
 5602 0040 FB68     		ldr	r3, [r7, #12]
 5603 0042 1B68     		ldr	r3, [r3]
 5604 0044 5A69     		ldr	r2, [r3, #20]
 5605 0046 FB68     		ldr	r3, [r7, #12]
 5606 0048 1B68     		ldr	r3, [r3]
 5607 004a 22F00102 		bic	r2, r2, #1
 5608 004e 5A61     		str	r2, [r3, #20]
3180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 5609              		.loc 1 3181 24
 5610 0050 FB68     		ldr	r3, [r7, #12]
 5611 0052 2022     		movs	r2, #32
 5612 0054 83F83D20 		strb	r2, [r3, #61]
3182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 5613              		.loc 1 3182 24
 5614 0058 FB68     		ldr	r3, [r7, #12]
 5615 005a 2022     		movs	r2, #32
 5616 005c 83F83E20 		strb	r2, [r3, #62]
3183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Process Unlocked */
ARM GAS  /tmp/ccKkagmp.s 			page 154


3185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 5617              		.loc 1 3185 9
 5618 0060 FB68     		ldr	r3, [r7, #12]
 5619 0062 0022     		movs	r2, #0
 5620 0064 83F83C20 		strb	r2, [r3, #60]
3186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 5621              		.loc 1 3187 16
 5622 0068 0323     		movs	r3, #3
 5623 006a 0FE0     		b	.L246
 5624              	.L244:
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5625              		.loc 1 3170 11
 5626 006c FB68     		ldr	r3, [r7, #12]
 5627 006e 1B68     		ldr	r3, [r3]
 5628 0070 1A68     		ldr	r2, [r3]
 5629 0072 BB68     		ldr	r3, [r7, #8]
 5630 0074 1340     		ands	r3, r3, r2
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5631              		.loc 1 3170 50
 5632 0076 BA68     		ldr	r2, [r7, #8]
 5633 0078 9A42     		cmp	r2, r3
 5634 007a 0CBF     		ite	eq
 5635 007c 0123     		moveq	r3, #1
 5636 007e 0023     		movne	r3, #0
 5637 0080 DBB2     		uxtb	r3, r3
 5638 0082 1A46     		mov	r2, r3
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5639              		.loc 1 3170 59
 5640 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5641              		.loc 1 3170 9
 5642 0086 9A42     		cmp	r2, r3
 5643 0088 C3D0     		beq	.L247
3188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5644              		.loc 1 3191 10
 5645 008a 0023     		movs	r3, #0
 5646              	.L246:
3192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5647              		.loc 1 3192 1
 5648 008c 1846     		mov	r0, r3
 5649 008e 1037     		adds	r7, r7, #16
 5650              	.LCFI259:
 5651              		.cfi_def_cfa_offset 8
 5652 0090 BD46     		mov	sp, r7
 5653              	.LCFI260:
 5654              		.cfi_def_cfa_register 13
 5655              		@ sp needed
 5656 0092 80BD     		pop	{r7, pc}
 5657              		.cfi_endproc
 5658              	.LFE112:
 5660              		.section	.text.UART_Start_Receive_IT,"ax",%progbits
 5661              		.align	1
 5662              		.global	UART_Start_Receive_IT
ARM GAS  /tmp/ccKkagmp.s 			page 155


 5663              		.syntax unified
 5664              		.thumb
 5665              		.thumb_func
 5667              	UART_Start_Receive_IT:
 5668              	.LFB113:
3193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in interrupt mode.
3196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in Interrupt mode
3197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5669              		.loc 1 3206 1
 5670              		.cfi_startproc
 5671              		@ args = 0, pretend = 0, frame = 16
 5672              		@ frame_needed = 1, uses_anonymous_args = 0
 5673              		@ link register save eliminated.
 5674 0000 80B4     		push	{r7}
 5675              	.LCFI261:
 5676              		.cfi_def_cfa_offset 4
 5677              		.cfi_offset 7, -4
 5678 0002 85B0     		sub	sp, sp, #20
 5679              	.LCFI262:
 5680              		.cfi_def_cfa_offset 24
 5681 0004 00AF     		add	r7, sp, #0
 5682              	.LCFI263:
 5683              		.cfi_def_cfa_register 7
 5684 0006 F860     		str	r0, [r7, #12]
 5685 0008 B960     		str	r1, [r7, #8]
 5686 000a 1346     		mov	r3, r2
 5687 000c FB80     		strh	r3, [r7, #6]	@ movhi
3207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 5688              		.loc 1 3207 21
 5689 000e FB68     		ldr	r3, [r7, #12]
 5690 0010 BA68     		ldr	r2, [r7, #8]
 5691 0012 9A62     		str	r2, [r3, #40]
3208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 5692              		.loc 1 3208 21
 5693 0014 FB68     		ldr	r3, [r7, #12]
 5694 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5695 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = Size;
 5696              		.loc 1 3209 22
 5697 001a FB68     		ldr	r3, [r7, #12]
 5698 001c FA88     		ldrh	r2, [r7, #6]	@ movhi
 5699 001e DA85     		strh	r2, [r3, #46]	@ movhi
3210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5700              		.loc 1 3211 20
 5701 0020 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 156


 5702 0022 0022     		movs	r2, #0
 5703 0024 1A64     		str	r2, [r3, #64]
3212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 5704              		.loc 1 3212 18
 5705 0026 FB68     		ldr	r3, [r7, #12]
 5706 0028 2222     		movs	r2, #34
 5707 002a 83F83E20 		strb	r2, [r3, #62]
3213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
3215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 5708              		.loc 1 3215 3
 5709 002e FB68     		ldr	r3, [r7, #12]
 5710 0030 0022     		movs	r2, #0
 5711 0032 83F83C20 		strb	r2, [r3, #60]
3216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Parity Error Interrupt */
3218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 5712              		.loc 1 3218 3
 5713 0036 FB68     		ldr	r3, [r7, #12]
 5714 0038 1B68     		ldr	r3, [r3]
 5715 003a DA68     		ldr	r2, [r3, #12]
 5716 003c FB68     		ldr	r3, [r7, #12]
 5717 003e 1B68     		ldr	r3, [r3]
 5718 0040 42F48072 		orr	r2, r2, #256
 5719 0044 DA60     		str	r2, [r3, #12]
3219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 5720              		.loc 1 3221 3
 5721 0046 FB68     		ldr	r3, [r7, #12]
 5722 0048 1B68     		ldr	r3, [r3]
 5723 004a 5A69     		ldr	r2, [r3, #20]
 5724 004c FB68     		ldr	r3, [r7, #12]
 5725 004e 1B68     		ldr	r3, [r3]
 5726 0050 42F00102 		orr	r2, r2, #1
 5727 0054 5A61     		str	r2, [r3, #20]
3222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Data Register not empty Interrupt */
3224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 5728              		.loc 1 3224 3
 5729 0056 FB68     		ldr	r3, [r7, #12]
 5730 0058 1B68     		ldr	r3, [r3]
 5731 005a DA68     		ldr	r2, [r3, #12]
 5732 005c FB68     		ldr	r3, [r7, #12]
 5733 005e 1B68     		ldr	r3, [r3]
 5734 0060 42F02002 		orr	r2, r2, #32
 5735 0064 DA60     		str	r2, [r3, #12]
3225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5736              		.loc 1 3226 10
 5737 0066 0023     		movs	r3, #0
3227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5738              		.loc 1 3227 1
 5739 0068 1846     		mov	r0, r3
 5740 006a 1437     		adds	r7, r7, #20
 5741              	.LCFI264:
 5742              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccKkagmp.s 			page 157


 5743 006c BD46     		mov	sp, r7
 5744              	.LCFI265:
 5745              		.cfi_def_cfa_register 13
 5746              		@ sp needed
 5747 006e 80BC     		pop	{r7}
 5748              	.LCFI266:
 5749              		.cfi_restore 7
 5750              		.cfi_def_cfa_offset 0
 5751 0070 7047     		bx	lr
 5752              		.cfi_endproc
 5753              	.LFE113:
 5755              		.section	.text.UART_Start_Receive_DMA,"ax",%progbits
 5756              		.align	1
 5757              		.global	UART_Start_Receive_DMA
 5758              		.syntax unified
 5759              		.thumb
 5760              		.thumb_func
 5762              	UART_Start_Receive_DMA:
 5763              	.LFB114:
3228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in DMA mode.
3231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in DMA mode.
3232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5764              		.loc 1 3241 1
 5765              		.cfi_startproc
 5766              		@ args = 0, pretend = 0, frame = 24
 5767              		@ frame_needed = 1, uses_anonymous_args = 0
 5768 0000 80B5     		push	{r7, lr}
 5769              	.LCFI267:
 5770              		.cfi_def_cfa_offset 8
 5771              		.cfi_offset 7, -8
 5772              		.cfi_offset 14, -4
 5773 0002 86B0     		sub	sp, sp, #24
 5774              	.LCFI268:
 5775              		.cfi_def_cfa_offset 32
 5776 0004 00AF     		add	r7, sp, #0
 5777              	.LCFI269:
 5778              		.cfi_def_cfa_register 7
 5779 0006 F860     		str	r0, [r7, #12]
 5780 0008 B960     		str	r1, [r7, #8]
 5781 000a 1346     		mov	r3, r2
 5782 000c FB80     		strh	r3, [r7, #6]	@ movhi
3242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
3243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 5783              		.loc 1 3244 21
 5784 000e BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp/ccKkagmp.s 			page 158


 5785 0010 FB68     		ldr	r3, [r7, #12]
 5786 0012 9A62     		str	r2, [r3, #40]
3245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 5787              		.loc 1 3245 21
 5788 0014 FB68     		ldr	r3, [r7, #12]
 5789 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5790 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5791              		.loc 1 3247 20
 5792 001a FB68     		ldr	r3, [r7, #12]
 5793 001c 0022     		movs	r2, #0
 5794 001e 1A64     		str	r2, [r3, #64]
3248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 5795              		.loc 1 3248 18
 5796 0020 FB68     		ldr	r3, [r7, #12]
 5797 0022 2222     		movs	r2, #34
 5798 0024 83F83E20 		strb	r2, [r3, #62]
3249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA transfer complete callback */
3251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 5799              		.loc 1 3251 8
 5800 0028 FB68     		ldr	r3, [r7, #12]
 5801 002a 9B6B     		ldr	r3, [r3, #56]
 5802              		.loc 1 3251 35
 5803 002c 234A     		ldr	r2, .L252
 5804 002e 9A62     		str	r2, [r3, #40]
3252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA Half transfer complete callback */
3254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 5805              		.loc 1 3254 8
 5806 0030 FB68     		ldr	r3, [r7, #12]
 5807 0032 9B6B     		ldr	r3, [r3, #56]
 5808              		.loc 1 3254 39
 5809 0034 224A     		ldr	r2, .L252+4
 5810 0036 DA62     		str	r2, [r3, #44]
3255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA error callback */
3257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferErrorCallback = UART_DMAError;
 5811              		.loc 1 3257 8
 5812 0038 FB68     		ldr	r3, [r7, #12]
 5813 003a 9B6B     		ldr	r3, [r3, #56]
 5814              		.loc 1 3257 36
 5815 003c 214A     		ldr	r2, .L252+8
 5816 003e 1A63     		str	r2, [r3, #48]
3258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA abort callback */
3260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 5817              		.loc 1 3260 8
 5818 0040 FB68     		ldr	r3, [r7, #12]
 5819 0042 9B6B     		ldr	r3, [r3, #56]
 5820              		.loc 1 3260 36
 5821 0044 0022     		movs	r2, #0
 5822 0046 5A63     		str	r2, [r3, #52]
3261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA stream */
3263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmp = (uint32_t *)&pData;
ARM GAS  /tmp/ccKkagmp.s 			page 159


 5823              		.loc 1 3263 7
 5824 0048 07F10803 		add	r3, r7, #8
 5825 004c 7B61     		str	r3, [r7, #20]
3264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 5826              		.loc 1 3264 3
 5827 004e FB68     		ldr	r3, [r7, #12]
 5828 0050 986B     		ldr	r0, [r3, #56]
 5829              		.loc 1 3264 51
 5830 0052 FB68     		ldr	r3, [r7, #12]
 5831 0054 1B68     		ldr	r3, [r3]
 5832              		.loc 1 3264 45
 5833 0056 0433     		adds	r3, r3, #4
 5834              		.loc 1 3264 3
 5835 0058 1946     		mov	r1, r3
 5836 005a 7B69     		ldr	r3, [r7, #20]
 5837 005c 1A68     		ldr	r2, [r3]
 5838 005e FB88     		ldrh	r3, [r7, #6]
 5839 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 5840              	.LBB11:
3265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the secon
3267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_CLEAR_OREFLAG(huart);
 5841              		.loc 1 3267 3
 5842 0064 0023     		movs	r3, #0
 5843 0066 3B61     		str	r3, [r7, #16]
 5844 0068 FB68     		ldr	r3, [r7, #12]
 5845 006a 1B68     		ldr	r3, [r3]
 5846 006c 1B68     		ldr	r3, [r3]
 5847 006e 3B61     		str	r3, [r7, #16]
 5848 0070 FB68     		ldr	r3, [r7, #12]
 5849 0072 1B68     		ldr	r3, [r3]
 5850 0074 5B68     		ldr	r3, [r3, #4]
 5851 0076 3B61     		str	r3, [r7, #16]
 5852 0078 3B69     		ldr	r3, [r7, #16]
 5853              	.LBE11:
3268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
3270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 5854              		.loc 1 3270 3
 5855 007a FB68     		ldr	r3, [r7, #12]
 5856 007c 0022     		movs	r2, #0
 5857 007e 83F83C20 		strb	r2, [r3, #60]
3271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Parity Error Interrupt */
3273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5858              		.loc 1 3273 3
 5859 0082 FB68     		ldr	r3, [r7, #12]
 5860 0084 1B68     		ldr	r3, [r3]
 5861 0086 DA68     		ldr	r2, [r3, #12]
 5862 0088 FB68     		ldr	r3, [r7, #12]
 5863 008a 1B68     		ldr	r3, [r3]
 5864 008c 42F48072 		orr	r2, r2, #256
 5865 0090 DA60     		str	r2, [r3, #12]
3274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5866              		.loc 1 3276 3
ARM GAS  /tmp/ccKkagmp.s 			page 160


 5867 0092 FB68     		ldr	r3, [r7, #12]
 5868 0094 1B68     		ldr	r3, [r3]
 5869 0096 5A69     		ldr	r2, [r3, #20]
 5870 0098 FB68     		ldr	r3, [r7, #12]
 5871 009a 1B68     		ldr	r3, [r3]
 5872 009c 42F00102 		orr	r2, r2, #1
 5873 00a0 5A61     		str	r2, [r3, #20]
3277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA transfer for the receiver request by setting the DMAR bit
3279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   in the UART CR3 register */
3280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5874              		.loc 1 3280 3
 5875 00a2 FB68     		ldr	r3, [r7, #12]
 5876 00a4 1B68     		ldr	r3, [r3]
 5877 00a6 5A69     		ldr	r2, [r3, #20]
 5878 00a8 FB68     		ldr	r3, [r7, #12]
 5879 00aa 1B68     		ldr	r3, [r3]
 5880 00ac 42F04002 		orr	r2, r2, #64
 5881 00b0 5A61     		str	r2, [r3, #20]
3281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5882              		.loc 1 3282 10
 5883 00b2 0023     		movs	r3, #0
3283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5884              		.loc 1 3283 1
 5885 00b4 1846     		mov	r0, r3
 5886 00b6 1837     		adds	r7, r7, #24
 5887              	.LCFI270:
 5888              		.cfi_def_cfa_offset 8
 5889 00b8 BD46     		mov	sp, r7
 5890              	.LCFI271:
 5891              		.cfi_def_cfa_register 13
 5892              		@ sp needed
 5893 00ba 80BD     		pop	{r7, pc}
 5894              	.L253:
 5895              		.align	2
 5896              	.L252:
 5897 00bc 00000000 		.word	UART_DMAReceiveCplt
 5898 00c0 00000000 		.word	UART_DMARxHalfCplt
 5899 00c4 00000000 		.word	UART_DMAError
 5900              		.cfi_endproc
 5901              	.LFE114:
 5903              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 5904              		.align	1
 5905              		.syntax unified
 5906              		.thumb
 5907              		.thumb_func
 5909              	UART_EndTxTransfer:
 5910              	.LFB115:
3284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
ARM GAS  /tmp/ccKkagmp.s 			page 161


 5911              		.loc 1 3291 1
 5912              		.cfi_startproc
 5913              		@ args = 0, pretend = 0, frame = 8
 5914              		@ frame_needed = 1, uses_anonymous_args = 0
 5915              		@ link register save eliminated.
 5916 0000 80B4     		push	{r7}
 5917              	.LCFI272:
 5918              		.cfi_def_cfa_offset 4
 5919              		.cfi_offset 7, -4
 5920 0002 83B0     		sub	sp, sp, #12
 5921              	.LCFI273:
 5922              		.cfi_def_cfa_offset 16
 5923 0004 00AF     		add	r7, sp, #0
 5924              	.LCFI274:
 5925              		.cfi_def_cfa_register 7
 5926 0006 7860     		str	r0, [r7, #4]
3292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 5927              		.loc 1 3293 3
 5928 0008 7B68     		ldr	r3, [r7, #4]
 5929 000a 1B68     		ldr	r3, [r3]
 5930 000c DA68     		ldr	r2, [r3, #12]
 5931 000e 7B68     		ldr	r3, [r7, #4]
 5932 0010 1B68     		ldr	r3, [r3]
 5933 0012 22F0C002 		bic	r2, r2, #192
 5934 0016 DA60     		str	r2, [r3, #12]
3294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5935              		.loc 1 3296 17
 5936 0018 7B68     		ldr	r3, [r7, #4]
 5937 001a 2022     		movs	r2, #32
 5938 001c 83F83D20 		strb	r2, [r3, #61]
3297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5939              		.loc 1 3297 1
 5940 0020 00BF     		nop
 5941 0022 0C37     		adds	r7, r7, #12
 5942              	.LCFI275:
 5943              		.cfi_def_cfa_offset 4
 5944 0024 BD46     		mov	sp, r7
 5945              	.LCFI276:
 5946              		.cfi_def_cfa_register 13
 5947              		@ sp needed
 5948 0026 80BC     		pop	{r7}
 5949              	.LCFI277:
 5950              		.cfi_restore 7
 5951              		.cfi_def_cfa_offset 0
 5952 0028 7047     		bx	lr
 5953              		.cfi_endproc
 5954              	.LFE115:
 5956              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 5957              		.align	1
 5958              		.syntax unified
 5959              		.thumb
 5960              		.thumb_func
 5962              	UART_EndRxTransfer:
 5963              	.LFB116:
ARM GAS  /tmp/ccKkagmp.s 			page 162


3298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5964              		.loc 1 3305 1
 5965              		.cfi_startproc
 5966              		@ args = 0, pretend = 0, frame = 8
 5967              		@ frame_needed = 1, uses_anonymous_args = 0
 5968              		@ link register save eliminated.
 5969 0000 80B4     		push	{r7}
 5970              	.LCFI278:
 5971              		.cfi_def_cfa_offset 4
 5972              		.cfi_offset 7, -4
 5973 0002 83B0     		sub	sp, sp, #12
 5974              	.LCFI279:
 5975              		.cfi_def_cfa_offset 16
 5976 0004 00AF     		add	r7, sp, #0
 5977              	.LCFI280:
 5978              		.cfi_def_cfa_register 7
 5979 0006 7860     		str	r0, [r7, #4]
3306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 5980              		.loc 1 3307 3
 5981 0008 7B68     		ldr	r3, [r7, #4]
 5982 000a 1B68     		ldr	r3, [r3]
 5983 000c DA68     		ldr	r2, [r3, #12]
 5984 000e 7B68     		ldr	r3, [r7, #4]
 5985 0010 1B68     		ldr	r3, [r3]
 5986 0012 22F49072 		bic	r2, r2, #288
 5987 0016 DA60     		str	r2, [r3, #12]
3308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5988              		.loc 1 3308 3
 5989 0018 7B68     		ldr	r3, [r7, #4]
 5990 001a 1B68     		ldr	r3, [r3]
 5991 001c 5A69     		ldr	r2, [r3, #20]
 5992 001e 7B68     		ldr	r3, [r7, #4]
 5993 0020 1B68     		ldr	r3, [r3]
 5994 0022 22F00102 		bic	r2, r2, #1
 5995 0026 5A61     		str	r2, [r3, #20]
3309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
3311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5996              		.loc 1 3311 12
 5997 0028 7B68     		ldr	r3, [r7, #4]
 5998 002a 1B6B     		ldr	r3, [r3, #48]
 5999              		.loc 1 3311 6
 6000 002c 012B     		cmp	r3, #1
 6001 002e 07D1     		bne	.L256
3312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 6002              		.loc 1 3313 5
 6003 0030 7B68     		ldr	r3, [r7, #4]
 6004 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKkagmp.s 			page 163


 6005 0034 DA68     		ldr	r2, [r3, #12]
 6006 0036 7B68     		ldr	r3, [r7, #4]
 6007 0038 1B68     		ldr	r3, [r3]
 6008 003a 22F01002 		bic	r2, r2, #16
 6009 003e DA60     		str	r2, [r3, #12]
 6010              	.L256:
3314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6011              		.loc 1 3317 18
 6012 0040 7B68     		ldr	r3, [r7, #4]
 6013 0042 2022     		movs	r2, #32
 6014 0044 83F83E20 		strb	r2, [r3, #62]
3318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6015              		.loc 1 3318 24
 6016 0048 7B68     		ldr	r3, [r7, #4]
 6017 004a 0022     		movs	r2, #0
 6018 004c 1A63     		str	r2, [r3, #48]
3319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6019              		.loc 1 3319 1
 6020 004e 00BF     		nop
 6021 0050 0C37     		adds	r7, r7, #12
 6022              	.LCFI281:
 6023              		.cfi_def_cfa_offset 4
 6024 0052 BD46     		mov	sp, r7
 6025              	.LCFI282:
 6026              		.cfi_def_cfa_register 13
 6027              		@ sp needed
 6028 0054 80BC     		pop	{r7}
 6029              	.LCFI283:
 6030              		.cfi_restore 7
 6031              		.cfi_def_cfa_offset 0
 6032 0056 7047     		bx	lr
 6033              		.cfi_endproc
 6034              	.LFE116:
 6036              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 6037              		.align	1
 6038              		.syntax unified
 6039              		.thumb
 6040              		.thumb_func
 6042              	UART_DMAAbortOnError:
 6043              	.LFB117:
3320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6044              		.loc 1 3329 1
 6045              		.cfi_startproc
 6046              		@ args = 0, pretend = 0, frame = 16
 6047              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccKkagmp.s 			page 164


 6048 0000 80B5     		push	{r7, lr}
 6049              	.LCFI284:
 6050              		.cfi_def_cfa_offset 8
 6051              		.cfi_offset 7, -8
 6052              		.cfi_offset 14, -4
 6053 0002 84B0     		sub	sp, sp, #16
 6054              	.LCFI285:
 6055              		.cfi_def_cfa_offset 24
 6056 0004 00AF     		add	r7, sp, #0
 6057              	.LCFI286:
 6058              		.cfi_def_cfa_register 7
 6059 0006 7860     		str	r0, [r7, #4]
3330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6060              		.loc 1 3330 23
 6061 0008 7B68     		ldr	r3, [r7, #4]
 6062 000a 5B6A     		ldr	r3, [r3, #36]
 6063 000c FB60     		str	r3, [r7, #12]
3331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 6064              		.loc 1 3331 22
 6065 000e FB68     		ldr	r3, [r7, #12]
 6066 0010 0022     		movs	r2, #0
 6067 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 6068              		.loc 1 3332 22
 6069 0014 FB68     		ldr	r3, [r7, #12]
 6070 0016 0022     		movs	r2, #0
 6071 0018 DA84     		strh	r2, [r3, #38]	@ movhi
3333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 6072              		.loc 1 3339 3
 6073 001a F868     		ldr	r0, [r7, #12]
 6074 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
3340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6075              		.loc 1 3341 1
 6076 0020 00BF     		nop
 6077 0022 1037     		adds	r7, r7, #16
 6078              	.LCFI287:
 6079              		.cfi_def_cfa_offset 8
 6080 0024 BD46     		mov	sp, r7
 6081              	.LCFI288:
 6082              		.cfi_def_cfa_register 13
 6083              		@ sp needed
 6084 0026 80BD     		pop	{r7, pc}
 6085              		.cfi_endproc
 6086              	.LFE117:
 6088              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 6089              		.align	1
 6090              		.syntax unified
 6091              		.thumb
 6092              		.thumb_func
 6094              	UART_DMATxAbortCallback:
ARM GAS  /tmp/ccKkagmp.s 			page 165


 6095              	.LFB118:
3342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6096              		.loc 1 3353 1
 6097              		.cfi_startproc
 6098              		@ args = 0, pretend = 0, frame = 16
 6099              		@ frame_needed = 1, uses_anonymous_args = 0
 6100 0000 80B5     		push	{r7, lr}
 6101              	.LCFI289:
 6102              		.cfi_def_cfa_offset 8
 6103              		.cfi_offset 7, -8
 6104              		.cfi_offset 14, -4
 6105 0002 84B0     		sub	sp, sp, #16
 6106              	.LCFI290:
 6107              		.cfi_def_cfa_offset 24
 6108 0004 00AF     		add	r7, sp, #0
 6109              	.LCFI291:
 6110              		.cfi_def_cfa_register 7
 6111 0006 7860     		str	r0, [r7, #4]
3354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6112              		.loc 1 3354 23
 6113 0008 7B68     		ldr	r3, [r7, #4]
 6114 000a 5B6A     		ldr	r3, [r3, #36]
 6115 000c FB60     		str	r3, [r7, #12]
3355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 6116              		.loc 1 3356 8
 6117 000e FB68     		ldr	r3, [r7, #12]
 6118 0010 5B6B     		ldr	r3, [r3, #52]
 6119              		.loc 1 3356 36
 6120 0012 0022     		movs	r2, #0
 6121 0014 5A63     		str	r2, [r3, #52]
3357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 6122              		.loc 1 3359 12
 6123 0016 FB68     		ldr	r3, [r7, #12]
 6124 0018 9B6B     		ldr	r3, [r3, #56]
 6125              		.loc 1 3359 6
 6126 001a 002B     		cmp	r3, #0
 6127 001c 04D0     		beq	.L259
3360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
 6128              		.loc 1 3361 14
 6129 001e FB68     		ldr	r3, [r7, #12]
 6130 0020 9B6B     		ldr	r3, [r3, #56]
 6131              		.loc 1 3361 22
ARM GAS  /tmp/ccKkagmp.s 			page 166


 6132 0022 5B6B     		ldr	r3, [r3, #52]
 6133              		.loc 1 3361 8
 6134 0024 002B     		cmp	r3, #0
 6135 0026 17D1     		bne	.L261
 6136              	.L259:
3362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 6137              		.loc 1 3368 22
 6138 0028 FB68     		ldr	r3, [r7, #12]
 6139 002a 0022     		movs	r2, #0
 6140 002c DA84     		strh	r2, [r3, #38]	@ movhi
3369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 6141              		.loc 1 3369 22
 6142 002e FB68     		ldr	r3, [r7, #12]
 6143 0030 0022     		movs	r2, #0
 6144 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 6145              		.loc 1 3372 20
 6146 0034 FB68     		ldr	r3, [r7, #12]
 6147 0036 0022     		movs	r2, #0
 6148 0038 1A64     		str	r2, [r3, #64]
3373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 6149              		.loc 1 3375 18
 6150 003a FB68     		ldr	r3, [r7, #12]
 6151 003c 2022     		movs	r2, #32
 6152 003e 83F83D20 		strb	r2, [r3, #61]
3376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6153              		.loc 1 3376 18
 6154 0042 FB68     		ldr	r3, [r7, #12]
 6155 0044 2022     		movs	r2, #32
 6156 0046 83F83E20 		strb	r2, [r3, #62]
3377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6157              		.loc 1 3377 24
 6158 004a FB68     		ldr	r3, [r7, #12]
 6159 004c 0022     		movs	r2, #0
 6160 004e 1A63     		str	r2, [r3, #48]
3378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 6161              		.loc 1 3385 3
 6162 0050 F868     		ldr	r0, [r7, #12]
 6163 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 6164 0056 00E0     		b	.L258
ARM GAS  /tmp/ccKkagmp.s 			page 167


 6165              	.L261:
3363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 6166              		.loc 1 3363 7
 6167 0058 00BF     		nop
 6168              	.L258:
3386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6169              		.loc 1 3387 1
 6170 005a 1037     		adds	r7, r7, #16
 6171              	.LCFI292:
 6172              		.cfi_def_cfa_offset 8
 6173 005c BD46     		mov	sp, r7
 6174              	.LCFI293:
 6175              		.cfi_def_cfa_register 13
 6176              		@ sp needed
 6177 005e 80BD     		pop	{r7, pc}
 6178              		.cfi_endproc
 6179              	.LFE118:
 6181              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 6182              		.align	1
 6183              		.syntax unified
 6184              		.thumb
 6185              		.thumb_func
 6187              	UART_DMARxAbortCallback:
 6188              	.LFB119:
3388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6189              		.loc 1 3399 1
 6190              		.cfi_startproc
 6191              		@ args = 0, pretend = 0, frame = 16
 6192              		@ frame_needed = 1, uses_anonymous_args = 0
 6193 0000 80B5     		push	{r7, lr}
 6194              	.LCFI294:
 6195              		.cfi_def_cfa_offset 8
 6196              		.cfi_offset 7, -8
 6197              		.cfi_offset 14, -4
 6198 0002 84B0     		sub	sp, sp, #16
 6199              	.LCFI295:
 6200              		.cfi_def_cfa_offset 24
 6201 0004 00AF     		add	r7, sp, #0
 6202              	.LCFI296:
 6203              		.cfi_def_cfa_register 7
 6204 0006 7860     		str	r0, [r7, #4]
3400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6205              		.loc 1 3400 23
 6206 0008 7B68     		ldr	r3, [r7, #4]
 6207 000a 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccKkagmp.s 			page 168


 6208 000c FB60     		str	r3, [r7, #12]
3401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 6209              		.loc 1 3402 8
 6210 000e FB68     		ldr	r3, [r7, #12]
 6211 0010 9B6B     		ldr	r3, [r3, #56]
 6212              		.loc 1 3402 36
 6213 0012 0022     		movs	r2, #0
 6214 0014 5A63     		str	r2, [r3, #52]
3403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 6215              		.loc 1 3405 12
 6216 0016 FB68     		ldr	r3, [r7, #12]
 6217 0018 5B6B     		ldr	r3, [r3, #52]
 6218              		.loc 1 3405 6
 6219 001a 002B     		cmp	r3, #0
 6220 001c 04D0     		beq	.L263
3406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
 6221              		.loc 1 3407 14
 6222 001e FB68     		ldr	r3, [r7, #12]
 6223 0020 5B6B     		ldr	r3, [r3, #52]
 6224              		.loc 1 3407 22
 6225 0022 5B6B     		ldr	r3, [r3, #52]
 6226              		.loc 1 3407 8
 6227 0024 002B     		cmp	r3, #0
 6228 0026 17D1     		bne	.L265
 6229              	.L263:
3408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 6230              		.loc 1 3414 22
 6231 0028 FB68     		ldr	r3, [r7, #12]
 6232 002a 0022     		movs	r2, #0
 6233 002c DA84     		strh	r2, [r3, #38]	@ movhi
3415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 6234              		.loc 1 3415 22
 6235 002e FB68     		ldr	r3, [r7, #12]
 6236 0030 0022     		movs	r2, #0
 6237 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 6238              		.loc 1 3418 20
 6239 0034 FB68     		ldr	r3, [r7, #12]
 6240 0036 0022     		movs	r2, #0
 6241 0038 1A64     		str	r2, [r3, #64]
3419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 6242              		.loc 1 3421 18
 6243 003a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 169


 6244 003c 2022     		movs	r2, #32
 6245 003e 83F83D20 		strb	r2, [r3, #61]
3422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6246              		.loc 1 3422 18
 6247 0042 FB68     		ldr	r3, [r7, #12]
 6248 0044 2022     		movs	r2, #32
 6249 0046 83F83E20 		strb	r2, [r3, #62]
3423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6250              		.loc 1 3423 24
 6251 004a FB68     		ldr	r3, [r7, #12]
 6252 004c 0022     		movs	r2, #0
 6253 004e 1A63     		str	r2, [r3, #48]
3424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 6254              		.loc 1 3431 3
 6255 0050 F868     		ldr	r0, [r7, #12]
 6256 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 6257 0056 00E0     		b	.L262
 6258              	.L265:
3409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 6259              		.loc 1 3409 7
 6260 0058 00BF     		nop
 6261              	.L262:
3432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6262              		.loc 1 3433 1
 6263 005a 1037     		adds	r7, r7, #16
 6264              	.LCFI297:
 6265              		.cfi_def_cfa_offset 8
 6266 005c BD46     		mov	sp, r7
 6267              	.LCFI298:
 6268              		.cfi_def_cfa_register 13
 6269              		@ sp needed
 6270 005e 80BD     		pop	{r7, pc}
 6271              		.cfi_endproc
 6272              	.LFE119:
 6274              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 6275              		.align	1
 6276              		.syntax unified
 6277              		.thumb
 6278              		.thumb_func
 6280              	UART_DMATxOnlyAbortCallback:
 6281              	.LFB120:
3434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
ARM GAS  /tmp/ccKkagmp.s 			page 170


3442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6282              		.loc 1 3445 1
 6283              		.cfi_startproc
 6284              		@ args = 0, pretend = 0, frame = 16
 6285              		@ frame_needed = 1, uses_anonymous_args = 0
 6286 0000 80B5     		push	{r7, lr}
 6287              	.LCFI299:
 6288              		.cfi_def_cfa_offset 8
 6289              		.cfi_offset 7, -8
 6290              		.cfi_offset 14, -4
 6291 0002 84B0     		sub	sp, sp, #16
 6292              	.LCFI300:
 6293              		.cfi_def_cfa_offset 24
 6294 0004 00AF     		add	r7, sp, #0
 6295              	.LCFI301:
 6296              		.cfi_def_cfa_register 7
 6297 0006 7860     		str	r0, [r7, #4]
3446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6298              		.loc 1 3446 23
 6299 0008 7B68     		ldr	r3, [r7, #4]
 6300 000a 5B6A     		ldr	r3, [r3, #36]
 6301 000c FB60     		str	r3, [r7, #12]
3447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 6302              		.loc 1 3448 22
 6303 000e FB68     		ldr	r3, [r7, #12]
 6304 0010 0022     		movs	r2, #0
 6305 0012 DA84     		strh	r2, [r3, #38]	@ movhi
3449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6306              		.loc 1 3451 17
 6307 0014 FB68     		ldr	r3, [r7, #12]
 6308 0016 2022     		movs	r2, #32
 6309 0018 83F83D20 		strb	r2, [r3, #61]
3452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 6310              		.loc 1 3459 3
 6311 001c F868     		ldr	r0, [r7, #12]
 6312 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
3460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6313              		.loc 1 3461 1
 6314 0022 00BF     		nop
 6315 0024 1037     		adds	r7, r7, #16
 6316              	.LCFI302:
 6317              		.cfi_def_cfa_offset 8
 6318 0026 BD46     		mov	sp, r7
ARM GAS  /tmp/ccKkagmp.s 			page 171


 6319              	.LCFI303:
 6320              		.cfi_def_cfa_register 13
 6321              		@ sp needed
 6322 0028 80BD     		pop	{r7, pc}
 6323              		.cfi_endproc
 6324              	.LFE120:
 6326              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 6327              		.align	1
 6328              		.syntax unified
 6329              		.thumb
 6330              		.thumb_func
 6332              	UART_DMARxOnlyAbortCallback:
 6333              	.LFB121:
3462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6334              		.loc 1 3473 1
 6335              		.cfi_startproc
 6336              		@ args = 0, pretend = 0, frame = 16
 6337              		@ frame_needed = 1, uses_anonymous_args = 0
 6338 0000 80B5     		push	{r7, lr}
 6339              	.LCFI304:
 6340              		.cfi_def_cfa_offset 8
 6341              		.cfi_offset 7, -8
 6342              		.cfi_offset 14, -4
 6343 0002 84B0     		sub	sp, sp, #16
 6344              	.LCFI305:
 6345              		.cfi_def_cfa_offset 24
 6346 0004 00AF     		add	r7, sp, #0
 6347              	.LCFI306:
 6348              		.cfi_def_cfa_register 7
 6349 0006 7860     		str	r0, [r7, #4]
3474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6350              		.loc 1 3474 23
 6351 0008 7B68     		ldr	r3, [r7, #4]
 6352 000a 5B6A     		ldr	r3, [r3, #36]
 6353 000c FB60     		str	r3, [r7, #12]
3475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 6354              		.loc 1 3476 22
 6355 000e FB68     		ldr	r3, [r7, #12]
 6356 0010 0022     		movs	r2, #0
 6357 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6358              		.loc 1 3479 18
 6359 0014 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKkagmp.s 			page 172


 6360 0016 2022     		movs	r2, #32
 6361 0018 83F83E20 		strb	r2, [r3, #62]
3480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6362              		.loc 1 3480 24
 6363 001c FB68     		ldr	r3, [r7, #12]
 6364 001e 0022     		movs	r2, #0
 6365 0020 1A63     		str	r2, [r3, #48]
3481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 6366              		.loc 1 3488 3
 6367 0022 F868     		ldr	r0, [r7, #12]
 6368 0024 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
3489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6369              		.loc 1 3490 1
 6370 0028 00BF     		nop
 6371 002a 1037     		adds	r7, r7, #16
 6372              	.LCFI307:
 6373              		.cfi_def_cfa_offset 8
 6374 002c BD46     		mov	sp, r7
 6375              	.LCFI308:
 6376              		.cfi_def_cfa_register 13
 6377              		@ sp needed
 6378 002e 80BD     		pop	{r7, pc}
 6379              		.cfi_endproc
 6380              	.LFE121:
 6382              		.section	.text.UART_Transmit_IT,"ax",%progbits
 6383              		.align	1
 6384              		.syntax unified
 6385              		.thumb
 6386              		.thumb_func
 6388              	UART_Transmit_IT:
 6389              	.LFB122:
3491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
3494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
3499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6390              		.loc 1 3499 1
 6391              		.cfi_startproc
 6392              		@ args = 0, pretend = 0, frame = 16
 6393              		@ frame_needed = 1, uses_anonymous_args = 0
 6394              		@ link register save eliminated.
 6395 0000 80B4     		push	{r7}
 6396              	.LCFI309:
 6397              		.cfi_def_cfa_offset 4
 6398              		.cfi_offset 7, -4
ARM GAS  /tmp/ccKkagmp.s 			page 173


 6399 0002 85B0     		sub	sp, sp, #20
 6400              	.LCFI310:
 6401              		.cfi_def_cfa_offset 24
 6402 0004 00AF     		add	r7, sp, #0
 6403              	.LCFI311:
 6404              		.cfi_def_cfa_register 7
 6405 0006 7860     		str	r0, [r7, #4]
3500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
3501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 6406              		.loc 1 3503 12
 6407 0008 7B68     		ldr	r3, [r7, #4]
 6408 000a 93F83D30 		ldrb	r3, [r3, #61]
 6409 000e DBB2     		uxtb	r3, r3
 6410              		.loc 1 3503 6
 6411 0010 212B     		cmp	r3, #33
 6412 0012 3ED1     		bne	.L269
3504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 6413              		.loc 1 3505 21
 6414 0014 7B68     		ldr	r3, [r7, #4]
 6415 0016 9B68     		ldr	r3, [r3, #8]
 6416              		.loc 1 3505 8
 6417 0018 B3F5805F 		cmp	r3, #4096
 6418 001c 14D1     		bne	.L270
 6419              		.loc 1 3505 71 discriminator 1
 6420 001e 7B68     		ldr	r3, [r7, #4]
 6421 0020 1B69     		ldr	r3, [r3, #16]
 6422              		.loc 1 3505 56 discriminator 1
 6423 0022 002B     		cmp	r3, #0
 6424 0024 10D1     		bne	.L270
3506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
 6425              		.loc 1 3507 11
 6426 0026 7B68     		ldr	r3, [r7, #4]
 6427 0028 1B6A     		ldr	r3, [r3, #32]
 6428 002a FB60     		str	r3, [r7, #12]
3508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 6429              		.loc 1 3508 40
 6430 002c FB68     		ldr	r3, [r7, #12]
 6431 002e 1B88     		ldrh	r3, [r3]
 6432              		.loc 1 3508 29
 6433 0030 1A46     		mov	r2, r3
 6434              		.loc 1 3508 12
 6435 0032 7B68     		ldr	r3, [r7, #4]
 6436 0034 1B68     		ldr	r3, [r3]
 6437              		.loc 1 3508 29
 6438 0036 C2F30802 		ubfx	r2, r2, #0, #9
 6439              		.loc 1 3508 27
 6440 003a 5A60     		str	r2, [r3, #4]
3509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 6441              		.loc 1 3509 25
 6442 003c 7B68     		ldr	r3, [r7, #4]
 6443 003e 1B6A     		ldr	r3, [r3, #32]
 6444 0040 9A1C     		adds	r2, r3, #2
 6445 0042 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccKkagmp.s 			page 174


 6446 0044 1A62     		str	r2, [r3, #32]
 6447 0046 08E0     		b	.L271
 6448              	.L270:
3510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 6449              		.loc 1 3513 45
 6450 0048 7B68     		ldr	r3, [r7, #4]
 6451 004a 1B6A     		ldr	r3, [r3, #32]
 6452              		.loc 1 3513 57
 6453 004c 591C     		adds	r1, r3, #1
 6454 004e 7A68     		ldr	r2, [r7, #4]
 6455 0050 1162     		str	r1, [r2, #32]
 6456              		.loc 1 3513 39
 6457 0052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6458              		.loc 1 3513 12
 6459 0054 7B68     		ldr	r3, [r7, #4]
 6460 0056 1B68     		ldr	r3, [r3]
 6461              		.loc 1 3513 27
 6462 0058 5A60     		str	r2, [r3, #4]
 6463              	.L271:
3514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
 6464              		.loc 1 3516 16
 6465 005a 7B68     		ldr	r3, [r7, #4]
 6466 005c DB8C     		ldrh	r3, [r3, #38]	@ movhi
 6467 005e 9BB2     		uxth	r3, r3
 6468              		.loc 1 3516 9
 6469 0060 013B     		subs	r3, r3, #1
 6470 0062 9BB2     		uxth	r3, r3
 6471              		.loc 1 3516 8
 6472 0064 7A68     		ldr	r2, [r7, #4]
 6473 0066 1946     		mov	r1, r3	@ movhi
 6474 0068 D184     		strh	r1, [r2, #38]	@ movhi
 6475 006a 002B     		cmp	r3, #0
 6476 006c 0FD1     		bne	.L272
3517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
3519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 6477              		.loc 1 3519 7
 6478 006e 7B68     		ldr	r3, [r7, #4]
 6479 0070 1B68     		ldr	r3, [r3]
 6480 0072 DA68     		ldr	r2, [r3, #12]
 6481 0074 7B68     		ldr	r3, [r7, #4]
 6482 0076 1B68     		ldr	r3, [r3]
 6483 0078 22F08002 		bic	r2, r2, #128
 6484 007c DA60     		str	r2, [r3, #12]
3520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 6485              		.loc 1 3522 7
 6486 007e 7B68     		ldr	r3, [r7, #4]
 6487 0080 1B68     		ldr	r3, [r3]
 6488 0082 DA68     		ldr	r2, [r3, #12]
 6489 0084 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccKkagmp.s 			page 175


 6490 0086 1B68     		ldr	r3, [r3]
 6491 0088 42F04002 		orr	r2, r2, #64
 6492 008c DA60     		str	r2, [r3, #12]
 6493              	.L272:
3523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 6494              		.loc 1 3524 12
 6495 008e 0023     		movs	r3, #0
 6496 0090 00E0     		b	.L273
 6497              	.L269:
3525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 6498              		.loc 1 3528 12
 6499 0092 0223     		movs	r3, #2
 6500              	.L273:
3529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6501              		.loc 1 3530 1
 6502 0094 1846     		mov	r0, r3
 6503 0096 1437     		adds	r7, r7, #20
 6504              	.LCFI312:
 6505              		.cfi_def_cfa_offset 4
 6506 0098 BD46     		mov	sp, r7
 6507              	.LCFI313:
 6508              		.cfi_def_cfa_register 13
 6509              		@ sp needed
 6510 009a 80BC     		pop	{r7}
 6511              	.LCFI314:
 6512              		.cfi_restore 7
 6513              		.cfi_def_cfa_offset 0
 6514 009c 7047     		bx	lr
 6515              		.cfi_endproc
 6516              	.LFE122:
 6518              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 6519              		.align	1
 6520              		.syntax unified
 6521              		.thumb
 6522              		.thumb_func
 6524              	UART_EndTransmit_IT:
 6525              	.LFB123:
3531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
3534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6526              		.loc 1 3539 1
 6527              		.cfi_startproc
 6528              		@ args = 0, pretend = 0, frame = 8
 6529              		@ frame_needed = 1, uses_anonymous_args = 0
 6530 0000 80B5     		push	{r7, lr}
 6531              	.LCFI315:
ARM GAS  /tmp/ccKkagmp.s 			page 176


 6532              		.cfi_def_cfa_offset 8
 6533              		.cfi_offset 7, -8
 6534              		.cfi_offset 14, -4
 6535 0002 82B0     		sub	sp, sp, #8
 6536              	.LCFI316:
 6537              		.cfi_def_cfa_offset 16
 6538 0004 00AF     		add	r7, sp, #0
 6539              	.LCFI317:
 6540              		.cfi_def_cfa_register 7
 6541 0006 7860     		str	r0, [r7, #4]
3540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 6542              		.loc 1 3541 3
 6543 0008 7B68     		ldr	r3, [r7, #4]
 6544 000a 1B68     		ldr	r3, [r3]
 6545 000c DA68     		ldr	r2, [r3, #12]
 6546 000e 7B68     		ldr	r3, [r7, #4]
 6547 0010 1B68     		ldr	r3, [r3]
 6548 0012 22F04002 		bic	r2, r2, #64
 6549 0016 DA60     		str	r2, [r3, #12]
3542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6550              		.loc 1 3544 17
 6551 0018 7B68     		ldr	r3, [r7, #4]
 6552 001a 2022     		movs	r2, #32
 6553 001c 83F83D20 		strb	r2, [r3, #61]
3545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 6554              		.loc 1 3551 3
 6555 0020 7868     		ldr	r0, [r7, #4]
 6556 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
3552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6557              		.loc 1 3554 10
 6558 0026 0023     		movs	r3, #0
3555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6559              		.loc 1 3555 1
 6560 0028 1846     		mov	r0, r3
 6561 002a 0837     		adds	r7, r7, #8
 6562              	.LCFI318:
 6563              		.cfi_def_cfa_offset 8
 6564 002c BD46     		mov	sp, r7
 6565              	.LCFI319:
 6566              		.cfi_def_cfa_register 13
 6567              		@ sp needed
 6568 002e 80BD     		pop	{r7, pc}
 6569              		.cfi_endproc
 6570              	.LFE123:
 6572              		.section	.text.UART_Receive_IT,"ax",%progbits
 6573              		.align	1
ARM GAS  /tmp/ccKkagmp.s 			page 177


 6574              		.syntax unified
 6575              		.thumb
 6576              		.thumb_func
 6578              	UART_Receive_IT:
 6579              	.LFB124:
3556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
3559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
3564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6580              		.loc 1 3564 1
 6581              		.cfi_startproc
 6582              		@ args = 0, pretend = 0, frame = 24
 6583              		@ frame_needed = 1, uses_anonymous_args = 0
 6584 0000 80B5     		push	{r7, lr}
 6585              	.LCFI320:
 6586              		.cfi_def_cfa_offset 8
 6587              		.cfi_offset 7, -8
 6588              		.cfi_offset 14, -4
 6589 0002 86B0     		sub	sp, sp, #24
 6590              	.LCFI321:
 6591              		.cfi_def_cfa_offset 32
 6592 0004 00AF     		add	r7, sp, #0
 6593              	.LCFI322:
 6594              		.cfi_def_cfa_register 7
 6595 0006 7860     		str	r0, [r7, #4]
3565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
3566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
3567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 6596              		.loc 1 3569 12
 6597 0008 7B68     		ldr	r3, [r7, #4]
 6598 000a 93F83E30 		ldrb	r3, [r3, #62]
 6599 000e DBB2     		uxtb	r3, r3
 6600              		.loc 1 3569 6
 6601 0010 222B     		cmp	r3, #34
 6602 0012 40F09980 		bne	.L277
3570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 6603              		.loc 1 3571 21
 6604 0016 7B68     		ldr	r3, [r7, #4]
 6605 0018 9B68     		ldr	r3, [r3, #8]
 6606              		.loc 1 3571 8
 6607 001a B3F5805F 		cmp	r3, #4096
 6608 001e 17D1     		bne	.L278
 6609              		.loc 1 3571 71 discriminator 1
 6610 0020 7B68     		ldr	r3, [r7, #4]
 6611 0022 1B69     		ldr	r3, [r3, #16]
 6612              		.loc 1 3571 56 discriminator 1
 6613 0024 002B     		cmp	r3, #0
 6614 0026 13D1     		bne	.L278
3572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
ARM GAS  /tmp/ccKkagmp.s 			page 178


3573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 6615              		.loc 1 3573 19
 6616 0028 0023     		movs	r3, #0
 6617 002a 7B61     		str	r3, [r7, #20]
3574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 6618              		.loc 1 3574 19
 6619 002c 7B68     		ldr	r3, [r7, #4]
 6620 002e 9B6A     		ldr	r3, [r3, #40]
 6621 0030 3B61     		str	r3, [r7, #16]
3575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 6622              		.loc 1 3575 38
 6623 0032 7B68     		ldr	r3, [r7, #4]
 6624 0034 1B68     		ldr	r3, [r3]
 6625              		.loc 1 3575 48
 6626 0036 5B68     		ldr	r3, [r3, #4]
 6627              		.loc 1 3575 22
 6628 0038 9BB2     		uxth	r3, r3
 6629 003a C3F30803 		ubfx	r3, r3, #0, #9
 6630 003e 9AB2     		uxth	r2, r3
 6631              		.loc 1 3575 20
 6632 0040 3B69     		ldr	r3, [r7, #16]
 6633 0042 1A80     		strh	r2, [r3]	@ movhi
3576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 2U;
 6634              		.loc 1 3576 25
 6635 0044 7B68     		ldr	r3, [r7, #4]
 6636 0046 9B6A     		ldr	r3, [r3, #40]
 6637 0048 9A1C     		adds	r2, r3, #2
 6638 004a 7B68     		ldr	r3, [r7, #4]
 6639 004c 9A62     		str	r2, [r3, #40]
 6640 004e 26E0     		b	.L279
 6641              	.L278:
3577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 6642              		.loc 1 3580 18
 6643 0050 7B68     		ldr	r3, [r7, #4]
 6644 0052 9B6A     		ldr	r3, [r3, #40]
 6645 0054 7B61     		str	r3, [r7, #20]
3581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits  = NULL;
 6646              		.loc 1 3581 20
 6647 0056 0023     		movs	r3, #0
 6648 0058 3B61     		str	r3, [r7, #16]
3582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLE
 6649              		.loc 1 3583 23
 6650 005a 7B68     		ldr	r3, [r7, #4]
 6651 005c 9B68     		ldr	r3, [r3, #8]
 6652              		.loc 1 3583 10
 6653 005e B3F5805F 		cmp	r3, #4096
 6654 0062 07D0     		beq	.L280
 6655              		.loc 1 3583 74 discriminator 1
 6656 0064 7B68     		ldr	r3, [r7, #4]
 6657 0066 9B68     		ldr	r3, [r3, #8]
 6658              		.loc 1 3583 58 discriminator 1
 6659 0068 002B     		cmp	r3, #0
 6660 006a 0AD1     		bne	.L281
ARM GAS  /tmp/ccKkagmp.s 			page 179


 6661              		.loc 1 3583 124 discriminator 2
 6662 006c 7B68     		ldr	r3, [r7, #4]
 6663 006e 1B69     		ldr	r3, [r3, #16]
 6664              		.loc 1 3583 109 discriminator 2
 6665 0070 002B     		cmp	r3, #0
 6666 0072 06D1     		bne	.L281
 6667              	.L280:
3584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 6668              		.loc 1 3585 38
 6669 0074 7B68     		ldr	r3, [r7, #4]
 6670 0076 1B68     		ldr	r3, [r3]
 6671              		.loc 1 3585 48
 6672 0078 5B68     		ldr	r3, [r3, #4]
 6673              		.loc 1 3585 23
 6674 007a DAB2     		uxtb	r2, r3
 6675              		.loc 1 3585 21
 6676 007c 7B69     		ldr	r3, [r7, #20]
 6677 007e 1A70     		strb	r2, [r3]
 6678 0080 08E0     		b	.L282
 6679              	.L281:
3586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 6680              		.loc 1 3589 38
 6681 0082 7B68     		ldr	r3, [r7, #4]
 6682 0084 1B68     		ldr	r3, [r3]
 6683              		.loc 1 3589 48
 6684 0086 5B68     		ldr	r3, [r3, #4]
 6685              		.loc 1 3589 23
 6686 0088 DBB2     		uxtb	r3, r3
 6687 008a 03F07F03 		and	r3, r3, #127
 6688 008e DAB2     		uxtb	r2, r3
 6689              		.loc 1 3589 21
 6690 0090 7B69     		ldr	r3, [r7, #20]
 6691 0092 1A70     		strb	r2, [r3]
 6692              	.L282:
3590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 1U;
 6693              		.loc 1 3591 25
 6694 0094 7B68     		ldr	r3, [r7, #4]
 6695 0096 9B6A     		ldr	r3, [r3, #40]
 6696 0098 5A1C     		adds	r2, r3, #1
 6697 009a 7B68     		ldr	r3, [r7, #4]
 6698 009c 9A62     		str	r2, [r3, #40]
 6699              	.L279:
3592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
 6700              		.loc 1 3594 16
 6701 009e 7B68     		ldr	r3, [r7, #4]
 6702 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 6703 00a2 9BB2     		uxth	r3, r3
 6704              		.loc 1 3594 9
 6705 00a4 013B     		subs	r3, r3, #1
 6706 00a6 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccKkagmp.s 			page 180


 6707              		.loc 1 3594 8
 6708 00a8 7A68     		ldr	r2, [r7, #4]
 6709 00aa 1946     		mov	r1, r3	@ movhi
 6710 00ac D185     		strh	r1, [r2, #46]	@ movhi
 6711 00ae 002B     		cmp	r3, #0
 6712 00b0 48D1     		bne	.L283
3595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 6713              		.loc 1 3597 7
 6714 00b2 7B68     		ldr	r3, [r7, #4]
 6715 00b4 1B68     		ldr	r3, [r3]
 6716 00b6 DA68     		ldr	r2, [r3, #12]
 6717 00b8 7B68     		ldr	r3, [r7, #4]
 6718 00ba 1B68     		ldr	r3, [r3]
 6719 00bc 22F02002 		bic	r2, r2, #32
 6720 00c0 DA60     		str	r2, [r3, #12]
3598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 6721              		.loc 1 3600 7
 6722 00c2 7B68     		ldr	r3, [r7, #4]
 6723 00c4 1B68     		ldr	r3, [r3]
 6724 00c6 DA68     		ldr	r2, [r3, #12]
 6725 00c8 7B68     		ldr	r3, [r7, #4]
 6726 00ca 1B68     		ldr	r3, [r3]
 6727 00cc 22F48072 		bic	r2, r2, #256
 6728 00d0 DA60     		str	r2, [r3, #12]
3601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 6729              		.loc 1 3603 7
 6730 00d2 7B68     		ldr	r3, [r7, #4]
 6731 00d4 1B68     		ldr	r3, [r3]
 6732 00d6 5A69     		ldr	r2, [r3, #20]
 6733 00d8 7B68     		ldr	r3, [r7, #4]
 6734 00da 1B68     		ldr	r3, [r3]
 6735 00dc 22F00102 		bic	r2, r2, #1
 6736 00e0 5A61     		str	r2, [r3, #20]
3604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 6737              		.loc 1 3606 22
 6738 00e2 7B68     		ldr	r3, [r7, #4]
 6739 00e4 2022     		movs	r2, #32
 6740 00e6 83F83E20 		strb	r2, [r3, #62]
3607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check current reception Mode :
3609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 6741              		.loc 1 3610 16
 6742 00ea 7B68     		ldr	r3, [r7, #4]
 6743 00ec 1B6B     		ldr	r3, [r3, #48]
 6744              		.loc 1 3610 10
 6745 00ee 012B     		cmp	r3, #1
 6746 00f0 23D1     		bne	.L284
3611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
ARM GAS  /tmp/ccKkagmp.s 			page 181


3612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Set reception type to Standard */
3613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6747              		.loc 1 3613 30
 6748 00f2 7B68     		ldr	r3, [r7, #4]
 6749 00f4 0022     		movs	r2, #0
 6750 00f6 1A63     		str	r2, [r3, #48]
3614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable IDLE interrupt */
3616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 6751              		.loc 1 3616 9
 6752 00f8 7B68     		ldr	r3, [r7, #4]
 6753 00fa 1B68     		ldr	r3, [r3]
 6754 00fc DA68     		ldr	r2, [r3, #12]
 6755 00fe 7B68     		ldr	r3, [r7, #4]
 6756 0100 1B68     		ldr	r3, [r3]
 6757 0102 22F01002 		bic	r2, r2, #16
 6758 0106 DA60     		str	r2, [r3, #12]
3617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Check if IDLE flag is set */
3619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 6759              		.loc 1 3619 13
 6760 0108 7B68     		ldr	r3, [r7, #4]
 6761 010a 1B68     		ldr	r3, [r3]
 6762 010c 1B68     		ldr	r3, [r3]
 6763 010e 03F01003 		and	r3, r3, #16
 6764              		.loc 1 3619 12
 6765 0112 102B     		cmp	r3, #16
 6766 0114 0AD1     		bne	.L285
 6767              	.LBB12:
3620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
3621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Clear IDLE flag in ISR */
3622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           __HAL_UART_CLEAR_IDLEFLAG(huart);
 6768              		.loc 1 3622 11
 6769 0116 0023     		movs	r3, #0
 6770 0118 FB60     		str	r3, [r7, #12]
 6771 011a 7B68     		ldr	r3, [r7, #4]
 6772 011c 1B68     		ldr	r3, [r3]
 6773 011e 1B68     		ldr	r3, [r3]
 6774 0120 FB60     		str	r3, [r7, #12]
 6775 0122 7B68     		ldr	r3, [r7, #4]
 6776 0124 1B68     		ldr	r3, [r3]
 6777 0126 5B68     		ldr	r3, [r3, #4]
 6778 0128 FB60     		str	r3, [r7, #12]
 6779 012a FB68     		ldr	r3, [r7, #12]
 6780              	.L285:
 6781              	.LBE12:
3623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
3624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 6782              		.loc 1 3630 9
 6783 012c 7B68     		ldr	r3, [r7, #4]
 6784 012e 9B8D     		ldrh	r3, [r3, #44]
ARM GAS  /tmp/ccKkagmp.s 			page 182


 6785 0130 1946     		mov	r1, r3
 6786 0132 7868     		ldr	r0, [r7, #4]
 6787 0134 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 6788 0138 02E0     		b	.L286
 6789              	.L284:
3631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
3632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /* Standard reception API called */
3636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
3637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /*Call registered Rx complete callback*/
3638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        huart->RxCpltCallback(huart);
3639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /*Call legacy weak Rx complete callback*/
3641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        HAL_UART_RxCpltCallback(huart);
 6790              		.loc 1 3641 8
 6791 013a 7868     		ldr	r0, [r7, #4]
 6792 013c FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 6793              	.L286:
3642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_OK;
 6794              		.loc 1 3645 14
 6795 0140 0023     		movs	r3, #0
 6796 0142 02E0     		b	.L287
 6797              	.L283:
3646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 6798              		.loc 1 3647 12
 6799 0144 0023     		movs	r3, #0
 6800 0146 00E0     		b	.L287
 6801              	.L277:
3648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 6802              		.loc 1 3651 12
 6803 0148 0223     		movs	r3, #2
 6804              	.L287:
3652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6805              		.loc 1 3653 1
 6806 014a 1846     		mov	r0, r3
 6807 014c 1837     		adds	r7, r7, #24
 6808              	.LCFI323:
 6809              		.cfi_def_cfa_offset 8
 6810 014e BD46     		mov	sp, r7
 6811              	.LCFI324:
 6812              		.cfi_def_cfa_register 13
 6813              		@ sp needed
 6814 0150 80BD     		pop	{r7, pc}
 6815              		.cfi_endproc
 6816              	.LFE124:
 6818              		.section	.text.UART_SetConfig,"ax",%progbits
 6819              		.align	1
ARM GAS  /tmp/ccKkagmp.s 			page 183


 6820              		.syntax unified
 6821              		.thumb
 6822              		.thumb_func
 6824              	UART_SetConfig:
 6825              	.LFB125:
3654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6826              		.loc 1 3662 1
 6827              		.cfi_startproc
 6828              		@ args = 0, pretend = 0, frame = 16
 6829              		@ frame_needed = 1, uses_anonymous_args = 0
 6830 0000 80B5     		push	{r7, lr}
 6831              	.LCFI325:
 6832              		.cfi_def_cfa_offset 8
 6833              		.cfi_offset 7, -8
 6834              		.cfi_offset 14, -4
 6835 0002 84B0     		sub	sp, sp, #16
 6836              	.LCFI326:
 6837              		.cfi_def_cfa_offset 24
 6838 0004 00AF     		add	r7, sp, #0
 6839              	.LCFI327:
 6840              		.cfi_def_cfa_register 7
 6841 0006 7860     		str	r0, [r7, #4]
3663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg;
3664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t pclk;
3665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
3667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
3670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
3671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
3673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
3674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      according to huart->Init.StopBits value */
3675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 6842              		.loc 1 3675 3
 6843 0008 7B68     		ldr	r3, [r7, #4]
 6844 000a 1B68     		ldr	r3, [r3]
 6845 000c 1B69     		ldr	r3, [r3, #16]
 6846 000e 23F44051 		bic	r1, r3, #12288
 6847 0012 7B68     		ldr	r3, [r7, #4]
 6848 0014 DA68     		ldr	r2, [r3, #12]
 6849 0016 7B68     		ldr	r3, [r7, #4]
 6850 0018 1B68     		ldr	r3, [r3]
 6851 001a 0A43     		orrs	r2, r2, r1
 6852 001c 1A61     		str	r2, [r3, #16]
3676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
ARM GAS  /tmp/ccKkagmp.s 			page 184


3679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
3686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
3687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 6853              		.loc 1 3690 33
 6854 001e 7B68     		ldr	r3, [r7, #4]
 6855 0020 9A68     		ldr	r2, [r3, #8]
 6856              		.loc 1 3690 58
 6857 0022 7B68     		ldr	r3, [r7, #4]
 6858 0024 1B69     		ldr	r3, [r3, #16]
 6859              		.loc 1 3690 45
 6860 0026 1A43     		orrs	r2, r2, r3
 6861              		.loc 1 3690 79
 6862 0028 7B68     		ldr	r3, [r7, #4]
 6863 002a 5B69     		ldr	r3, [r3, #20]
 6864              		.loc 1 3690 10
 6865 002c 1343     		orrs	r3, r3, r2
 6866 002e BB60     		str	r3, [r7, #8]
3691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 6867              		.loc 1 3691 3
 6868 0030 7B68     		ldr	r3, [r7, #4]
 6869 0032 1B68     		ldr	r3, [r3]
 6870 0034 DB68     		ldr	r3, [r3, #12]
 6871 0036 23F4B053 		bic	r3, r3, #5632
 6872 003a 23F00C03 		bic	r3, r3, #12
 6873 003e 7A68     		ldr	r2, [r7, #4]
 6874 0040 1268     		ldr	r2, [r2]
 6875 0042 B968     		ldr	r1, [r7, #8]
 6876 0044 0B43     		orrs	r3, r3, r1
 6877 0046 D360     		str	r3, [r2, #12]
3692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
3693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
3697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 6878              		.loc 1 3698 3
 6879 0048 7B68     		ldr	r3, [r7, #4]
 6880 004a 1B68     		ldr	r3, [r3]
 6881 004c 5B69     		ldr	r3, [r3, #20]
 6882 004e 23F44071 		bic	r1, r3, #768
 6883 0052 7B68     		ldr	r3, [r7, #4]
 6884 0054 9A69     		ldr	r2, [r3, #24]
 6885 0056 7B68     		ldr	r3, [r7, #4]
 6886 0058 1B68     		ldr	r3, [r3]
 6887 005a 0A43     		orrs	r2, r2, r1
 6888 005c 5A61     		str	r2, [r3, #20]
3699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccKkagmp.s 			page 185


3700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Instance == USART1)
 6889              		.loc 1 3701 11
 6890 005e 7B68     		ldr	r3, [r7, #4]
 6891 0060 1B68     		ldr	r3, [r3]
 6892              		.loc 1 3701 5
 6893 0062 2C4A     		ldr	r2, .L291
 6894 0064 9342     		cmp	r3, r2
 6895 0066 03D1     		bne	.L289
3702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 6896              		.loc 1 3703 12
 6897 0068 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 6898 006c F860     		str	r0, [r7, #12]
 6899 006e 02E0     		b	.L290
 6900              	.L289:
3704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK1Freq();
 6901              		.loc 1 3707 12
 6902 0070 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 6903 0074 F860     		str	r0, [r7, #12]
 6904              	.L290:
3708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
3711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 6905              		.loc 1 3721 26
 6906 0076 FA68     		ldr	r2, [r7, #12]
 6907 0078 1346     		mov	r3, r2
 6908 007a 9B00     		lsls	r3, r3, #2
 6909 007c 1344     		add	r3, r3, r2
 6910 007e 9A00     		lsls	r2, r3, #2
 6911 0080 1A44     		add	r2, r2, r3
 6912 0082 7B68     		ldr	r3, [r7, #4]
 6913 0084 5B68     		ldr	r3, [r3, #4]
 6914 0086 9B00     		lsls	r3, r3, #2
 6915 0088 B2FBF3F3 		udiv	r3, r2, r3
 6916 008c 224A     		ldr	r2, .L291+4
 6917 008e A2FB0323 		umull	r2, r3, r2, r3
 6918 0092 5B09     		lsrs	r3, r3, #5
 6919 0094 1901     		lsls	r1, r3, #4
 6920 0096 FA68     		ldr	r2, [r7, #12]
 6921 0098 1346     		mov	r3, r2
 6922 009a 9B00     		lsls	r3, r3, #2
 6923 009c 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccKkagmp.s 			page 186


 6924 009e 9A00     		lsls	r2, r3, #2
 6925 00a0 1A44     		add	r2, r2, r3
 6926 00a2 7B68     		ldr	r3, [r7, #4]
 6927 00a4 5B68     		ldr	r3, [r3, #4]
 6928 00a6 9B00     		lsls	r3, r3, #2
 6929 00a8 B2FBF3F2 		udiv	r2, r2, r3
 6930 00ac 1A4B     		ldr	r3, .L291+4
 6931 00ae A3FB0203 		umull	r0, r3, r3, r2
 6932 00b2 5B09     		lsrs	r3, r3, #5
 6933 00b4 6420     		movs	r0, #100
 6934 00b6 00FB03F3 		mul	r3, r0, r3
 6935 00ba D31A     		subs	r3, r2, r3
 6936 00bc 1B01     		lsls	r3, r3, #4
 6937 00be 3233     		adds	r3, r3, #50
 6938 00c0 154A     		ldr	r2, .L291+4
 6939 00c2 A2FB0323 		umull	r2, r3, r2, r3
 6940 00c6 5B09     		lsrs	r3, r3, #5
 6941 00c8 03F0F003 		and	r3, r3, #240
 6942 00cc 1944     		add	r1, r1, r3
 6943 00ce FA68     		ldr	r2, [r7, #12]
 6944 00d0 1346     		mov	r3, r2
 6945 00d2 9B00     		lsls	r3, r3, #2
 6946 00d4 1344     		add	r3, r3, r2
 6947 00d6 9A00     		lsls	r2, r3, #2
 6948 00d8 1A44     		add	r2, r2, r3
 6949 00da 7B68     		ldr	r3, [r7, #4]
 6950 00dc 5B68     		ldr	r3, [r3, #4]
 6951 00de 9B00     		lsls	r3, r3, #2
 6952 00e0 B2FBF3F2 		udiv	r2, r2, r3
 6953 00e4 0C4B     		ldr	r3, .L291+4
 6954 00e6 A3FB0203 		umull	r0, r3, r3, r2
 6955 00ea 5B09     		lsrs	r3, r3, #5
 6956 00ec 6420     		movs	r0, #100
 6957 00ee 00FB03F3 		mul	r3, r0, r3
 6958 00f2 D31A     		subs	r3, r2, r3
 6959 00f4 1B01     		lsls	r3, r3, #4
 6960 00f6 3233     		adds	r3, r3, #50
 6961 00f8 074A     		ldr	r2, .L291+4
 6962 00fa A2FB0323 		umull	r2, r3, r2, r3
 6963 00fe 5B09     		lsrs	r3, r3, #5
 6964 0100 03F00F02 		and	r2, r3, #15
 6965              		.loc 1 3721 8
 6966 0104 7B68     		ldr	r3, [r7, #4]
 6967 0106 1B68     		ldr	r3, [r3]
 6968              		.loc 1 3721 26
 6969 0108 0A44     		add	r2, r2, r1
 6970              		.loc 1 3721 24
 6971 010a 9A60     		str	r2, [r3, #8]
3722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6972              		.loc 1 3723 1
 6973 010c 00BF     		nop
 6974 010e 1037     		adds	r7, r7, #16
 6975              	.LCFI328:
 6976              		.cfi_def_cfa_offset 8
 6977 0110 BD46     		mov	sp, r7
 6978              	.LCFI329:
ARM GAS  /tmp/ccKkagmp.s 			page 187


 6979              		.cfi_def_cfa_register 13
 6980              		@ sp needed
 6981 0112 80BD     		pop	{r7, pc}
 6982              	.L292:
 6983              		.align	2
 6984              	.L291:
 6985 0114 00380140 		.word	1073821696
 6986 0118 1F85EB51 		.word	1374389535
 6987              		.cfi_endproc
 6988              	.LFE125:
 6990              		.text
 6991              	.Letext0:
 6992              		.file 2 "/opt/st/stm32cubeclt_1.12.1/GNU-tools-for-STM32/arm-none-eabi/include/machine/_default_ty
 6993              		.file 3 "/opt/st/stm32cubeclt_1.12.1/GNU-tools-for-STM32/arm-none-eabi/include/sys/_stdint.h"
 6994              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 6995              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 6996              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 6997              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 6998              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 6999              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 7000              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccKkagmp.s 			page 188


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_uart.c
     /tmp/ccKkagmp.s:18     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccKkagmp.s:24     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccKkagmp.s:640    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccKkagmp.s:6824   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccKkagmp.s:134    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccKkagmp.s:140    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccKkagmp.s:257    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccKkagmp.s:263    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccKkagmp.s:398    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccKkagmp.s:404    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccKkagmp.s:550    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccKkagmp.s:556    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccKkagmp.s:682    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccKkagmp.s:634    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccKkagmp.s:676    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccKkagmp.s:718    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccKkagmp.s:724    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccKkagmp.s:5549   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccKkagmp.s:944    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccKkagmp.s:950    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccKkagmp.s:1194   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:1200   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccKkagmp.s:1311   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:1317   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccKkagmp.s:5667   .text.UART_Start_Receive_IT:0000000000000000 UART_Start_Receive_IT
     /tmp/ccKkagmp.s:1401   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccKkagmp.s:1407   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccKkagmp.s:1560   .text.HAL_UART_Transmit_DMA:00000000000000cc $d
     /tmp/ccKkagmp.s:5132   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccKkagmp.s:5210   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccKkagmp.s:5434   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccKkagmp.s:1567   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccKkagmp.s:1573   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccKkagmp.s:5762   .text.UART_Start_Receive_DMA:0000000000000000 UART_Start_Receive_DMA
     /tmp/ccKkagmp.s:1657   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccKkagmp.s:1663   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccKkagmp.s:1802   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccKkagmp.s:1808   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccKkagmp.s:1926   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccKkagmp.s:1932   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccKkagmp.s:5909   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccKkagmp.s:5962   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccKkagmp.s:2063   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 $t
     /tmp/ccKkagmp.s:2069   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 HAL_UARTEx_ReceiveToIdle
     /tmp/ccKkagmp.s:2389   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:2395   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 HAL_UARTEx_ReceiveToIdle_IT
     /tmp/ccKkagmp.s:2520   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 $t
     /tmp/ccKkagmp.s:2526   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 HAL_UARTEx_ReceiveToIdle_DMA
     /tmp/ccKkagmp.s:2651   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccKkagmp.s:2657   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccKkagmp.s:2855   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccKkagmp.s:2861   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccKkagmp.s:2966   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccKkagmp.s:2972   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccKkagmp.s:3104   .text.HAL_UART_Abort_IT:0000000000000000 $t
ARM GAS  /tmp/ccKkagmp.s 			page 189


     /tmp/ccKkagmp.s:3110   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccKkagmp.s:4433   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccKkagmp.s:3356   .text.HAL_UART_Abort_IT:0000000000000160 $d
     /tmp/ccKkagmp.s:6094   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccKkagmp.s:6187   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccKkagmp.s:3362   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:3368   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccKkagmp.s:4475   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccKkagmp.s:3485   .text.HAL_UART_AbortTransmit_IT:000000000000009c $d
     /tmp/ccKkagmp.s:6280   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccKkagmp.s:3490   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:3496   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccKkagmp.s:4517   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccKkagmp.s:3644   .text.HAL_UART_AbortReceive_IT:00000000000000d0 $d
     /tmp/ccKkagmp.s:6332   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccKkagmp.s:3649   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccKkagmp.s:3655   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccKkagmp.s:6578   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/ccKkagmp.s:4391   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccKkagmp.s:4559   .text.HAL_UARTEx_RxEventCallback:0000000000000000 HAL_UARTEx_RxEventCallback
     /tmp/ccKkagmp.s:6388   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/ccKkagmp.s:6524   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccKkagmp.s:4212   .text.HAL_UART_IRQHandler:0000000000000350 $d
     /tmp/ccKkagmp.s:6042   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccKkagmp.s:4217   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4223   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccKkagmp.s:4259   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4265   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccKkagmp.s:4301   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4307   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccKkagmp.s:4343   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4349   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccKkagmp.s:4385   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4427   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4469   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4511   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4553   .text.HAL_UARTEx_RxEventCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:4597   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccKkagmp.s:4603   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccKkagmp.s:4675   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccKkagmp.s:4681   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccKkagmp.s:4753   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/ccKkagmp.s:4759   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/ccKkagmp.s:4831   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccKkagmp.s:4837   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccKkagmp.s:4923   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccKkagmp.s:4929   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccKkagmp.s:5015   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccKkagmp.s:5021   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccKkagmp.s:5082   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccKkagmp.s:5088   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccKkagmp.s:5127   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccKkagmp.s:5205   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccKkagmp.s:5249   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccKkagmp.s:5254   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccKkagmp.s:5366   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccKkagmp.s:5371   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
ARM GAS  /tmp/ccKkagmp.s 			page 190


     /tmp/ccKkagmp.s:5429   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccKkagmp.s:5544   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccKkagmp.s:5661   .text.UART_Start_Receive_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:5756   .text.UART_Start_Receive_DMA:0000000000000000 $t
     /tmp/ccKkagmp.s:5897   .text.UART_Start_Receive_DMA:00000000000000bc $d
     /tmp/ccKkagmp.s:5904   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccKkagmp.s:5957   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccKkagmp.s:6037   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccKkagmp.s:6089   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:6182   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:6275   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:6327   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccKkagmp.s:6383   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:6519   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:6573   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/ccKkagmp.s:6819   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccKkagmp.s:6985   .text.UART_SetConfig:0000000000000114 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
