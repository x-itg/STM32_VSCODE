ARM GAS  /tmp/ccRUQzex.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_uart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_UART_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_UART_Init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_UART_Init:
  24              	.LFB65:
  25              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @file    stm32f1xx_hal_uart.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @verbatim
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                         ##### How to use this driver #####
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) UART pins configuration:
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the UART TX/RX pins as alternate function pull-up.
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
ARM GAS  /tmp/ccRUQzex.s 			page 2


  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   Tx/Rx parameters.
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_UART_Init() API.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             and receive process.
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ##### Callback registration #####
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ==================================
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and a pointer to the user callback function.
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
ARM GAS  /tmp/ccRUQzex.s 			page 3


  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     weak (surcharged) function.
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and the Callback ID.
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function allows to reset following callbacks:
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     For specific callback RxEventCallback, use dedicated registration/reset functions:
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     respectively @ref HAL_UART_RegisterRxEventCallback() , @ref HAL_UART_UnRegisterRxEventCallback(
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     not defined, the callback registration feature is not available
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Three operation modes are available within this driver :
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Polling mode IO operation ***
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =================================
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ===================================
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
ARM GAS  /tmp/ccRUQzex.s 			page 4


 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** DMA mode IO operation ***
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ==============================
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     services to user. (For example, these functions allow application to handle use cases
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     where number of data to be received is unknown).
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Compared to standard reception services which only consider number of received
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         data elements as reception completion criteria, these functions also consider additional ev
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         as triggers for updating reception status to caller :
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                for 1 frame time, after last received byte.
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two mode of transfer:
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            are returned by function after finishing transfer.
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            These API's return the HAL status.
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API:
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with Interrupt:
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccRUQzex.s 			page 5


 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with DMA:
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =============================================
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @endverbatim
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) Additional remark: If the parity is enabled, then the MSB bit of the data written
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @attention
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * All rights reserved.</center></h2>
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #include "stm32f1xx_hal.h"
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup STM32F1xx_HAL_Driver
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp/ccRUQzex.s 			page 6


 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART UART
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief HAL UART module driver
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
ARM GAS  /tmp/ccRUQzex.s 			page 7


 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in asynchronous mode.
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Baud Rate
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Word Length
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Stop Bit
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Hardware flow control
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Over Sampling Method
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     procedures (details for the procedures are available in reference manuals
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  26              		.loc 1 353 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
  42              		.loc 1 355 0
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 002B     		cmp	r3, #0
  45 000c 01D1     		bne	.L2
ARM GAS  /tmp/ccRUQzex.s 			page 8


 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
  46              		.loc 1 357 0
  47 000e 0123     		movs	r3, #1
  48 0010 3FE0     		b	.L3
  49              	.L2:
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2 and USART3 */
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  50              		.loc 1 376 0
  51 0012 7B68     		ldr	r3, [r7, #4]
  52 0014 93F83D30 		ldrb	r3, [r3, #61]
  53 0018 DBB2     		uxtb	r3, r3
  54 001a 002B     		cmp	r3, #0
  55 001c 06D1     		bne	.L4
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  56              		.loc 1 379 0
  57 001e 7B68     		ldr	r3, [r7, #4]
  58 0020 0022     		movs	r2, #0
  59 0022 83F83C20 		strb	r2, [r3, #60]
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  60              		.loc 1 393 0
  61 0026 7868     		ldr	r0, [r7, #4]
  62 0028 FFF7FEFF 		bl	HAL_UART_MspInit
  63              	.L4:
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
ARM GAS  /tmp/ccRUQzex.s 			page 9


 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  64              		.loc 1 397 0
  65 002c 7B68     		ldr	r3, [r7, #4]
  66 002e 2422     		movs	r2, #36
  67 0030 83F83D20 		strb	r2, [r3, #61]
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  68              		.loc 1 400 0
  69 0034 7B68     		ldr	r3, [r7, #4]
  70 0036 1B68     		ldr	r3, [r3]
  71 0038 7A68     		ldr	r2, [r7, #4]
  72 003a 1268     		ldr	r2, [r2]
  73 003c D268     		ldr	r2, [r2, #12]
  74 003e 22F40052 		bic	r2, r2, #8192
  75 0042 DA60     		str	r2, [r3, #12]
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
  76              		.loc 1 403 0
  77 0044 7868     		ldr	r0, [r7, #4]
  78 0046 FFF7FEFF 		bl	UART_SetConfig
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  79              		.loc 1 408 0
  80 004a 7B68     		ldr	r3, [r7, #4]
  81 004c 1B68     		ldr	r3, [r3]
  82 004e 7A68     		ldr	r2, [r7, #4]
  83 0050 1268     		ldr	r2, [r2]
  84 0052 1269     		ldr	r2, [r2, #16]
  85 0054 22F49042 		bic	r2, r2, #18432
  86 0058 1A61     		str	r2, [r3, #16]
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  87              		.loc 1 409 0
  88 005a 7B68     		ldr	r3, [r7, #4]
  89 005c 1B68     		ldr	r3, [r3]
  90 005e 7A68     		ldr	r2, [r7, #4]
  91 0060 1268     		ldr	r2, [r2]
  92 0062 5269     		ldr	r2, [r2, #20]
  93 0064 22F02A02 		bic	r2, r2, #42
  94 0068 5A61     		str	r2, [r3, #20]
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  95              		.loc 1 412 0
  96 006a 7B68     		ldr	r3, [r7, #4]
  97 006c 1B68     		ldr	r3, [r3]
  98 006e 7A68     		ldr	r2, [r7, #4]
  99 0070 1268     		ldr	r2, [r2]
 100 0072 D268     		ldr	r2, [r2, #12]
 101 0074 42F40052 		orr	r2, r2, #8192
 102 0078 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 10


 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 103              		.loc 1 415 0
 104 007a 7B68     		ldr	r3, [r7, #4]
 105 007c 0022     		movs	r2, #0
 106 007e 1A64     		str	r2, [r3, #64]
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 107              		.loc 1 416 0
 108 0080 7B68     		ldr	r3, [r7, #4]
 109 0082 2022     		movs	r2, #32
 110 0084 83F83D20 		strb	r2, [r3, #61]
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 111              		.loc 1 417 0
 112 0088 7B68     		ldr	r3, [r7, #4]
 113 008a 2022     		movs	r2, #32
 114 008c 83F83E20 		strb	r2, [r3, #62]
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 115              		.loc 1 419 0
 116 0090 0023     		movs	r3, #0
 117              	.L3:
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 118              		.loc 1 420 0
 119 0092 1846     		mov	r0, r3
 120 0094 0837     		adds	r7, r7, #8
 121              	.LCFI3:
 122              		.cfi_def_cfa_offset 8
 123 0096 BD46     		mov	sp, r7
 124              	.LCFI4:
 125              		.cfi_def_cfa_register 13
 126              		@ sp needed
 127 0098 80BD     		pop	{r7, pc}
 128              		.cfi_endproc
 129              	.LFE65:
 131              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 132              		.align	1
 133              		.global	HAL_HalfDuplex_Init
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	HAL_HalfDuplex_Init:
 140              	.LFB66:
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 141              		.loc 1 430 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccRUQzex.s 			page 11


 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145 0000 80B5     		push	{r7, lr}
 146              	.LCFI5:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              	.LCFI6:
 152              		.cfi_def_cfa_offset 16
 153 0004 00AF     		add	r7, sp, #0
 154              	.LCFI7:
 155              		.cfi_def_cfa_register 7
 156 0006 7860     		str	r0, [r7, #4]
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 157              		.loc 1 432 0
 158 0008 7B68     		ldr	r3, [r7, #4]
 159 000a 002B     		cmp	r3, #0
 160 000c 01D1     		bne	.L6
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 161              		.loc 1 434 0
 162 000e 0123     		movs	r3, #1
 163 0010 47E0     		b	.L7
 164              	.L6:
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 165              		.loc 1 444 0
 166 0012 7B68     		ldr	r3, [r7, #4]
 167 0014 93F83D30 		ldrb	r3, [r3, #61]
 168 0018 DBB2     		uxtb	r3, r3
 169 001a 002B     		cmp	r3, #0
 170 001c 06D1     		bne	.L8
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 171              		.loc 1 447 0
 172 001e 7B68     		ldr	r3, [r7, #4]
 173 0020 0022     		movs	r2, #0
 174 0022 83F83C20 		strb	r2, [r3, #60]
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccRUQzex.s 			page 12


 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 175              		.loc 1 461 0
 176 0026 7868     		ldr	r0, [r7, #4]
 177 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 178              	.L8:
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 179              		.loc 1 465 0
 180 002c 7B68     		ldr	r3, [r7, #4]
 181 002e 2422     		movs	r2, #36
 182 0030 83F83D20 		strb	r2, [r3, #61]
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 183              		.loc 1 468 0
 184 0034 7B68     		ldr	r3, [r7, #4]
 185 0036 1B68     		ldr	r3, [r3]
 186 0038 7A68     		ldr	r2, [r7, #4]
 187 003a 1268     		ldr	r2, [r2]
 188 003c D268     		ldr	r2, [r2, #12]
 189 003e 22F40052 		bic	r2, r2, #8192
 190 0042 DA60     		str	r2, [r3, #12]
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 191              		.loc 1 471 0
 192 0044 7868     		ldr	r0, [r7, #4]
 193 0046 FFF7FEFF 		bl	UART_SetConfig
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 194              		.loc 1 476 0
 195 004a 7B68     		ldr	r3, [r7, #4]
 196 004c 1B68     		ldr	r3, [r3]
 197 004e 7A68     		ldr	r2, [r7, #4]
 198 0050 1268     		ldr	r2, [r2]
 199 0052 1269     		ldr	r2, [r2, #16]
 200 0054 22F49042 		bic	r2, r2, #18432
 201 0058 1A61     		str	r2, [r3, #16]
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 202              		.loc 1 477 0
 203 005a 7B68     		ldr	r3, [r7, #4]
 204 005c 1B68     		ldr	r3, [r3]
 205 005e 7A68     		ldr	r2, [r7, #4]
 206 0060 1268     		ldr	r2, [r2]
 207 0062 5269     		ldr	r2, [r2, #20]
 208 0064 22F02202 		bic	r2, r2, #34
 209 0068 5A61     		str	r2, [r3, #20]
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccRUQzex.s 			page 13


 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 210              		.loc 1 480 0
 211 006a 7B68     		ldr	r3, [r7, #4]
 212 006c 1B68     		ldr	r3, [r3]
 213 006e 7A68     		ldr	r2, [r7, #4]
 214 0070 1268     		ldr	r2, [r2]
 215 0072 5269     		ldr	r2, [r2, #20]
 216 0074 42F00802 		orr	r2, r2, #8
 217 0078 5A61     		str	r2, [r3, #20]
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 218              		.loc 1 483 0
 219 007a 7B68     		ldr	r3, [r7, #4]
 220 007c 1B68     		ldr	r3, [r3]
 221 007e 7A68     		ldr	r2, [r7, #4]
 222 0080 1268     		ldr	r2, [r2]
 223 0082 D268     		ldr	r2, [r2, #12]
 224 0084 42F40052 		orr	r2, r2, #8192
 225 0088 DA60     		str	r2, [r3, #12]
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 226              		.loc 1 486 0
 227 008a 7B68     		ldr	r3, [r7, #4]
 228 008c 0022     		movs	r2, #0
 229 008e 1A64     		str	r2, [r3, #64]
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 230              		.loc 1 487 0
 231 0090 7B68     		ldr	r3, [r7, #4]
 232 0092 2022     		movs	r2, #32
 233 0094 83F83D20 		strb	r2, [r3, #61]
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 234              		.loc 1 488 0
 235 0098 7B68     		ldr	r3, [r7, #4]
 236 009a 2022     		movs	r2, #32
 237 009c 83F83E20 		strb	r2, [r3, #62]
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 238              		.loc 1 490 0
 239 00a0 0023     		movs	r3, #0
 240              	.L7:
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 241              		.loc 1 491 0
 242 00a2 1846     		mov	r0, r3
 243 00a4 0837     		adds	r7, r7, #8
 244              	.LCFI8:
 245              		.cfi_def_cfa_offset 8
 246 00a6 BD46     		mov	sp, r7
 247              	.LCFI9:
 248              		.cfi_def_cfa_register 13
 249              		@ sp needed
 250 00a8 80BD     		pop	{r7, pc}
 251              		.cfi_endproc
 252              	.LFE66:
 254              		.section	.text.HAL_LIN_Init,"ax",%progbits
ARM GAS  /tmp/ccRUQzex.s 			page 14


 255              		.align	1
 256              		.global	HAL_LIN_Init
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu softvfp
 262              	HAL_LIN_Init:
 263              	.LFB67:
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 264              		.loc 1 505 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 8
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268 0000 80B5     		push	{r7, lr}
 269              	.LCFI10:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              	.LCFI11:
 275              		.cfi_def_cfa_offset 16
 276 0004 00AF     		add	r7, sp, #0
 277              	.LCFI12:
 278              		.cfi_def_cfa_register 7
 279 0006 7860     		str	r0, [r7, #4]
 280 0008 3960     		str	r1, [r7]
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 281              		.loc 1 507 0
 282 000a 7B68     		ldr	r3, [r7, #4]
 283 000c 002B     		cmp	r3, #0
 284 000e 01D1     		bne	.L10
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 285              		.loc 1 509 0
 286 0010 0123     		movs	r3, #1
 287 0012 57E0     		b	.L11
 288              	.L10:
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the LIN UART instance */
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Break detection length parameter */
ARM GAS  /tmp/ccRUQzex.s 			page 15


 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 289              		.loc 1 522 0
 290 0014 7B68     		ldr	r3, [r7, #4]
 291 0016 93F83D30 		ldrb	r3, [r3, #61]
 292 001a DBB2     		uxtb	r3, r3
 293 001c 002B     		cmp	r3, #0
 294 001e 06D1     		bne	.L12
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 295              		.loc 1 525 0
 296 0020 7B68     		ldr	r3, [r7, #4]
 297 0022 0022     		movs	r2, #0
 298 0024 83F83C20 		strb	r2, [r3, #60]
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 299              		.loc 1 539 0
 300 0028 7868     		ldr	r0, [r7, #4]
 301 002a FFF7FEFF 		bl	HAL_UART_MspInit
 302              	.L12:
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 303              		.loc 1 543 0
 304 002e 7B68     		ldr	r3, [r7, #4]
 305 0030 2422     		movs	r2, #36
 306 0032 83F83D20 		strb	r2, [r3, #61]
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 307              		.loc 1 546 0
 308 0036 7B68     		ldr	r3, [r7, #4]
 309 0038 1B68     		ldr	r3, [r3]
 310 003a 7A68     		ldr	r2, [r7, #4]
 311 003c 1268     		ldr	r2, [r2]
 312 003e D268     		ldr	r2, [r2, #12]
 313 0040 22F40052 		bic	r2, r2, #8192
 314 0044 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 16


 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 315              		.loc 1 549 0
 316 0046 7868     		ldr	r0, [r7, #4]
 317 0048 FFF7FEFF 		bl	UART_SetConfig
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 318              		.loc 1 554 0
 319 004c 7B68     		ldr	r3, [r7, #4]
 320 004e 1B68     		ldr	r3, [r3]
 321 0050 7A68     		ldr	r2, [r7, #4]
 322 0052 1268     		ldr	r2, [r2]
 323 0054 1269     		ldr	r2, [r2, #16]
 324 0056 22F40062 		bic	r2, r2, #2048
 325 005a 1A61     		str	r2, [r3, #16]
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 326              		.loc 1 555 0
 327 005c 7B68     		ldr	r3, [r7, #4]
 328 005e 1B68     		ldr	r3, [r3]
 329 0060 7A68     		ldr	r2, [r7, #4]
 330 0062 1268     		ldr	r2, [r2]
 331 0064 5269     		ldr	r2, [r2, #20]
 332 0066 22F02A02 		bic	r2, r2, #42
 333 006a 5A61     		str	r2, [r3, #20]
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 334              		.loc 1 558 0
 335 006c 7B68     		ldr	r3, [r7, #4]
 336 006e 1B68     		ldr	r3, [r3]
 337 0070 7A68     		ldr	r2, [r7, #4]
 338 0072 1268     		ldr	r2, [r2]
 339 0074 1269     		ldr	r2, [r2, #16]
 340 0076 42F48042 		orr	r2, r2, #16384
 341 007a 1A61     		str	r2, [r3, #16]
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 342              		.loc 1 561 0
 343 007c 7B68     		ldr	r3, [r7, #4]
 344 007e 1B68     		ldr	r3, [r3]
 345 0080 7A68     		ldr	r2, [r7, #4]
 346 0082 1268     		ldr	r2, [r2]
 347 0084 1269     		ldr	r2, [r2, #16]
 348 0086 22F02002 		bic	r2, r2, #32
 349 008a 1A61     		str	r2, [r3, #16]
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 350              		.loc 1 562 0
 351 008c 7B68     		ldr	r3, [r7, #4]
 352 008e 1B68     		ldr	r3, [r3]
 353 0090 7A68     		ldr	r2, [r7, #4]
 354 0092 1268     		ldr	r2, [r2]
 355 0094 1169     		ldr	r1, [r2, #16]
ARM GAS  /tmp/ccRUQzex.s 			page 17


 356 0096 3A68     		ldr	r2, [r7]
 357 0098 0A43     		orrs	r2, r2, r1
 358 009a 1A61     		str	r2, [r3, #16]
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 359              		.loc 1 565 0
 360 009c 7B68     		ldr	r3, [r7, #4]
 361 009e 1B68     		ldr	r3, [r3]
 362 00a0 7A68     		ldr	r2, [r7, #4]
 363 00a2 1268     		ldr	r2, [r2]
 364 00a4 D268     		ldr	r2, [r2, #12]
 365 00a6 42F40052 		orr	r2, r2, #8192
 366 00aa DA60     		str	r2, [r3, #12]
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 367              		.loc 1 568 0
 368 00ac 7B68     		ldr	r3, [r7, #4]
 369 00ae 0022     		movs	r2, #0
 370 00b0 1A64     		str	r2, [r3, #64]
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 371              		.loc 1 569 0
 372 00b2 7B68     		ldr	r3, [r7, #4]
 373 00b4 2022     		movs	r2, #32
 374 00b6 83F83D20 		strb	r2, [r3, #61]
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 375              		.loc 1 570 0
 376 00ba 7B68     		ldr	r3, [r7, #4]
 377 00bc 2022     		movs	r2, #32
 378 00be 83F83E20 		strb	r2, [r3, #62]
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 379              		.loc 1 572 0
 380 00c2 0023     		movs	r3, #0
 381              	.L11:
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 382              		.loc 1 573 0
 383 00c4 1846     		mov	r0, r3
 384 00c6 0837     		adds	r7, r7, #8
 385              	.LCFI13:
 386              		.cfi_def_cfa_offset 8
 387 00c8 BD46     		mov	sp, r7
 388              	.LCFI14:
 389              		.cfi_def_cfa_register 13
 390              		@ sp needed
 391 00ca 80BD     		pop	{r7, pc}
 392              		.cfi_endproc
 393              	.LFE67:
 395              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 396              		.align	1
 397              		.global	HAL_MultiProcessor_Init
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 401              		.fpu softvfp
 403              	HAL_MultiProcessor_Init:
ARM GAS  /tmp/ccRUQzex.s 			page 18


 404              	.LFB68:
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Address USART address
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 405              		.loc 1 588 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 16
 408              		@ frame_needed = 1, uses_anonymous_args = 0
 409 0000 80B5     		push	{r7, lr}
 410              	.LCFI15:
 411              		.cfi_def_cfa_offset 8
 412              		.cfi_offset 7, -8
 413              		.cfi_offset 14, -4
 414 0002 84B0     		sub	sp, sp, #16
 415              	.LCFI16:
 416              		.cfi_def_cfa_offset 24
 417 0004 00AF     		add	r7, sp, #0
 418              	.LCFI17:
 419              		.cfi_def_cfa_register 7
 420 0006 F860     		str	r0, [r7, #12]
 421 0008 0B46     		mov	r3, r1
 422 000a 7A60     		str	r2, [r7, #4]
 423 000c FB72     		strb	r3, [r7, #11]
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 424              		.loc 1 590 0
 425 000e FB68     		ldr	r3, [r7, #12]
 426 0010 002B     		cmp	r3, #0
 427 0012 01D1     		bne	.L14
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 428              		.loc 1 592 0
 429 0014 0123     		movs	r3, #1
 430 0016 5FE0     		b	.L15
 431              	.L14:
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
ARM GAS  /tmp/ccRUQzex.s 			page 19


 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 432              		.loc 1 606 0
 433 0018 FB68     		ldr	r3, [r7, #12]
 434 001a 93F83D30 		ldrb	r3, [r3, #61]
 435 001e DBB2     		uxtb	r3, r3
 436 0020 002B     		cmp	r3, #0
 437 0022 06D1     		bne	.L16
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 438              		.loc 1 609 0
 439 0024 FB68     		ldr	r3, [r7, #12]
 440 0026 0022     		movs	r2, #0
 441 0028 83F83C20 		strb	r2, [r3, #60]
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 442              		.loc 1 623 0
 443 002c F868     		ldr	r0, [r7, #12]
 444 002e FFF7FEFF 		bl	HAL_UART_MspInit
 445              	.L16:
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 446              		.loc 1 627 0
 447 0032 FB68     		ldr	r3, [r7, #12]
 448 0034 2422     		movs	r2, #36
 449 0036 83F83D20 		strb	r2, [r3, #61]
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 450              		.loc 1 630 0
 451 003a FB68     		ldr	r3, [r7, #12]
 452 003c 1B68     		ldr	r3, [r3]
 453 003e FA68     		ldr	r2, [r7, #12]
 454 0040 1268     		ldr	r2, [r2]
 455 0042 D268     		ldr	r2, [r2, #12]
 456 0044 22F40052 		bic	r2, r2, #8192
 457 0048 DA60     		str	r2, [r3, #12]
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
ARM GAS  /tmp/ccRUQzex.s 			page 20


 458              		.loc 1 633 0
 459 004a F868     		ldr	r0, [r7, #12]
 460 004c FFF7FEFF 		bl	UART_SetConfig
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 461              		.loc 1 638 0
 462 0050 FB68     		ldr	r3, [r7, #12]
 463 0052 1B68     		ldr	r3, [r3]
 464 0054 FA68     		ldr	r2, [r7, #12]
 465 0056 1268     		ldr	r2, [r2]
 466 0058 1269     		ldr	r2, [r2, #16]
 467 005a 22F49042 		bic	r2, r2, #18432
 468 005e 1A61     		str	r2, [r3, #16]
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 469              		.loc 1 639 0
 470 0060 FB68     		ldr	r3, [r7, #12]
 471 0062 1B68     		ldr	r3, [r3]
 472 0064 FA68     		ldr	r2, [r7, #12]
 473 0066 1268     		ldr	r2, [r2]
 474 0068 5269     		ldr	r2, [r2, #20]
 475 006a 22F02A02 		bic	r2, r2, #42
 476 006e 5A61     		str	r2, [r3, #20]
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART address node */
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 477              		.loc 1 642 0
 478 0070 FB68     		ldr	r3, [r7, #12]
 479 0072 1B68     		ldr	r3, [r3]
 480 0074 FA68     		ldr	r2, [r7, #12]
 481 0076 1268     		ldr	r2, [r2]
 482 0078 1269     		ldr	r2, [r2, #16]
 483 007a 22F00F02 		bic	r2, r2, #15
 484 007e 1A61     		str	r2, [r3, #16]
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 485              		.loc 1 643 0
 486 0080 FB68     		ldr	r3, [r7, #12]
 487 0082 1B68     		ldr	r3, [r3]
 488 0084 FA68     		ldr	r2, [r7, #12]
 489 0086 1268     		ldr	r2, [r2]
 490 0088 1169     		ldr	r1, [r2, #16]
 491 008a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 492 008c 0A43     		orrs	r2, r2, r1
 493 008e 1A61     		str	r2, [r3, #16]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 494              		.loc 1 646 0
 495 0090 FB68     		ldr	r3, [r7, #12]
 496 0092 1B68     		ldr	r3, [r3]
 497 0094 FA68     		ldr	r2, [r7, #12]
 498 0096 1268     		ldr	r2, [r2]
 499 0098 D268     		ldr	r2, [r2, #12]
 500 009a 22F40062 		bic	r2, r2, #2048
 501 009e DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 21


 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 502              		.loc 1 647 0
 503 00a0 FB68     		ldr	r3, [r7, #12]
 504 00a2 1B68     		ldr	r3, [r3]
 505 00a4 FA68     		ldr	r2, [r7, #12]
 506 00a6 1268     		ldr	r2, [r2]
 507 00a8 D168     		ldr	r1, [r2, #12]
 508 00aa 7A68     		ldr	r2, [r7, #4]
 509 00ac 0A43     		orrs	r2, r2, r1
 510 00ae DA60     		str	r2, [r3, #12]
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 511              		.loc 1 650 0
 512 00b0 FB68     		ldr	r3, [r7, #12]
 513 00b2 1B68     		ldr	r3, [r3]
 514 00b4 FA68     		ldr	r2, [r7, #12]
 515 00b6 1268     		ldr	r2, [r2]
 516 00b8 D268     		ldr	r2, [r2, #12]
 517 00ba 42F40052 		orr	r2, r2, #8192
 518 00be DA60     		str	r2, [r3, #12]
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 519              		.loc 1 653 0
 520 00c0 FB68     		ldr	r3, [r7, #12]
 521 00c2 0022     		movs	r2, #0
 522 00c4 1A64     		str	r2, [r3, #64]
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 523              		.loc 1 654 0
 524 00c6 FB68     		ldr	r3, [r7, #12]
 525 00c8 2022     		movs	r2, #32
 526 00ca 83F83D20 		strb	r2, [r3, #61]
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 527              		.loc 1 655 0
 528 00ce FB68     		ldr	r3, [r7, #12]
 529 00d0 2022     		movs	r2, #32
 530 00d2 83F83E20 		strb	r2, [r3, #62]
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 531              		.loc 1 657 0
 532 00d6 0023     		movs	r3, #0
 533              	.L15:
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 534              		.loc 1 658 0
 535 00d8 1846     		mov	r0, r3
 536 00da 1037     		adds	r7, r7, #16
 537              	.LCFI18:
 538              		.cfi_def_cfa_offset 8
 539 00dc BD46     		mov	sp, r7
 540              	.LCFI19:
 541              		.cfi_def_cfa_register 13
 542              		@ sp needed
 543 00de 80BD     		pop	{r7, pc}
 544              		.cfi_endproc
 545              	.LFE68:
 547              		.section	.text.HAL_UART_DeInit,"ax",%progbits
ARM GAS  /tmp/ccRUQzex.s 			page 22


 548              		.align	1
 549              		.global	HAL_UART_DeInit
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu softvfp
 555              	HAL_UART_DeInit:
 556              	.LFB69:
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 557              		.loc 1 667 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 8
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561 0000 80B5     		push	{r7, lr}
 562              	.LCFI20:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 82B0     		sub	sp, sp, #8
 567              	.LCFI21:
 568              		.cfi_def_cfa_offset 16
 569 0004 00AF     		add	r7, sp, #0
 570              	.LCFI22:
 571              		.cfi_def_cfa_register 7
 572 0006 7860     		str	r0, [r7, #4]
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 573              		.loc 1 669 0
 574 0008 7B68     		ldr	r3, [r7, #4]
 575 000a 002B     		cmp	r3, #0
 576 000c 01D1     		bne	.L18
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 577              		.loc 1 671 0
 578 000e 0123     		movs	r3, #1
 579 0010 21E0     		b	.L19
 580              	.L18:
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 581              		.loc 1 677 0
 582 0012 7B68     		ldr	r3, [r7, #4]
 583 0014 2422     		movs	r2, #36
 584 0016 83F83D20 		strb	r2, [r3, #61]
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the Peripheral */
ARM GAS  /tmp/ccRUQzex.s 			page 23


 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 585              		.loc 1 680 0
 586 001a 7B68     		ldr	r3, [r7, #4]
 587 001c 1B68     		ldr	r3, [r3]
 588 001e 7A68     		ldr	r2, [r7, #4]
 589 0020 1268     		ldr	r2, [r2]
 590 0022 D268     		ldr	r2, [r2, #12]
 591 0024 22F40052 		bic	r2, r2, #8192
 592 0028 DA60     		str	r2, [r3, #12]
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 593              		.loc 1 691 0
 594 002a 7868     		ldr	r0, [r7, #4]
 595 002c FFF7FEFF 		bl	HAL_UART_MspDeInit
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 596              		.loc 1 694 0
 597 0030 7B68     		ldr	r3, [r7, #4]
 598 0032 0022     		movs	r2, #0
 599 0034 1A64     		str	r2, [r3, #64]
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 600              		.loc 1 695 0
 601 0036 7B68     		ldr	r3, [r7, #4]
 602 0038 0022     		movs	r2, #0
 603 003a 83F83D20 		strb	r2, [r3, #61]
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 604              		.loc 1 696 0
 605 003e 7B68     		ldr	r3, [r7, #4]
 606 0040 0022     		movs	r2, #0
 607 0042 83F83E20 		strb	r2, [r3, #62]
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 608              		.loc 1 697 0
 609 0046 7B68     		ldr	r3, [r7, #4]
 610 0048 0022     		movs	r2, #0
 611 004a 1A63     		str	r2, [r3, #48]
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlock */
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 612              		.loc 1 700 0
 613 004c 7B68     		ldr	r3, [r7, #4]
 614 004e 0022     		movs	r2, #0
 615 0050 83F83C20 		strb	r2, [r3, #60]
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 616              		.loc 1 702 0
 617 0054 0023     		movs	r3, #0
 618              	.L19:
ARM GAS  /tmp/ccRUQzex.s 			page 24


 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 619              		.loc 1 703 0
 620 0056 1846     		mov	r0, r3
 621 0058 0837     		adds	r7, r7, #8
 622              	.LCFI23:
 623              		.cfi_def_cfa_offset 8
 624 005a BD46     		mov	sp, r7
 625              	.LCFI24:
 626              		.cfi_def_cfa_register 13
 627              		@ sp needed
 628 005c 80BD     		pop	{r7, pc}
 629              		.cfi_endproc
 630              	.LFE69:
 632              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 633              		.align	1
 634              		.weak	HAL_UART_MspInit
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu softvfp
 640              	HAL_UART_MspInit:
 641              	.LFB70:
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP Init.
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 642              		.loc 1 712 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 8
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647 0000 80B4     		push	{r7}
 648              	.LCFI25:
 649              		.cfi_def_cfa_offset 4
 650              		.cfi_offset 7, -4
 651 0002 83B0     		sub	sp, sp, #12
 652              	.LCFI26:
 653              		.cfi_def_cfa_offset 16
 654 0004 00AF     		add	r7, sp, #0
 655              	.LCFI27:
 656              		.cfi_def_cfa_register 7
 657 0006 7860     		str	r0, [r7, #4]
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 658              		.loc 1 718 0
 659 0008 00BF     		nop
 660 000a 0C37     		adds	r7, r7, #12
 661              	.LCFI28:
ARM GAS  /tmp/ccRUQzex.s 			page 25


 662              		.cfi_def_cfa_offset 4
 663 000c BD46     		mov	sp, r7
 664              	.LCFI29:
 665              		.cfi_def_cfa_register 13
 666              		@ sp needed
 667 000e 80BC     		pop	{r7}
 668              	.LCFI30:
 669              		.cfi_restore 7
 670              		.cfi_def_cfa_offset 0
 671 0010 7047     		bx	lr
 672              		.cfi_endproc
 673              	.LFE70:
 675              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 676              		.align	1
 677              		.weak	HAL_UART_MspDeInit
 678              		.syntax unified
 679              		.thumb
 680              		.thumb_func
 681              		.fpu softvfp
 683              	HAL_UART_MspDeInit:
 684              	.LFB71:
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 685              		.loc 1 727 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 8
 688              		@ frame_needed = 1, uses_anonymous_args = 0
 689              		@ link register save eliminated.
 690 0000 80B4     		push	{r7}
 691              	.LCFI31:
 692              		.cfi_def_cfa_offset 4
 693              		.cfi_offset 7, -4
 694 0002 83B0     		sub	sp, sp, #12
 695              	.LCFI32:
 696              		.cfi_def_cfa_offset 16
 697 0004 00AF     		add	r7, sp, #0
 698              	.LCFI33:
 699              		.cfi_def_cfa_register 7
 700 0006 7860     		str	r0, [r7, #4]
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 701              		.loc 1 733 0
 702 0008 00BF     		nop
 703 000a 0C37     		adds	r7, r7, #12
 704              	.LCFI34:
 705              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRUQzex.s 			page 26


 706 000c BD46     		mov	sp, r7
 707              	.LCFI35:
 708              		.cfi_def_cfa_register 13
 709              		@ sp needed
 710 000e 80BC     		pop	{r7}
 711              	.LCFI36:
 712              		.cfi_restore 7
 713              		.cfi_def_cfa_offset 0
 714 0010 7047     		bx	lr
 715              		.cfi_endproc
 716              	.LFE71:
 718              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 719              		.align	1
 720              		.global	HAL_UART_Transmit
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu softvfp
 726              	HAL_UART_Transmit:
 727              	.LFB72:
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Callback
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccRUQzex.s 			page 27


 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
ARM GAS  /tmp/ccRUQzex.s 			page 28


 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccRUQzex.s 			page 29


 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
ARM GAS  /tmp/ccRUQzex.s 			page 30


 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Rx Event Callback
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback Pointer to the Rx Event Callback function
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallback
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = pCallback;
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp/ccRUQzex.s 			page 31


 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UnRegister the UART Rx Event Callback
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Rx Event Callback is redirected to the weak HAL_UARTEx_RxEventCallback() predefine
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterRxEventCallback(UART_HandleTypeDef *huart)
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### IO operation functions #####
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and Half duplex data transfers.
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two modes of transfer:
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
ARM GAS  /tmp/ccRUQzex.s 			page 32


1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            after finishing transfer.
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or DMA, these API's return the HAL status.
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            using DMA mode.
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API's are :
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive()
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort()
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A Rx Event Reception Callback (Rx event notification) is available for Non_Blocking modes o
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_RxEventCallback()
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Errors are handled as follows :
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
ARM GAS  /tmp/ccRUQzex.s 			page 33


1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 728              		.loc 1 1137 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 32
 731              		@ frame_needed = 1, uses_anonymous_args = 0
 732 0000 80B5     		push	{r7, lr}
 733              	.LCFI37:
 734              		.cfi_def_cfa_offset 8
 735              		.cfi_offset 7, -8
 736              		.cfi_offset 14, -4
 737 0002 8AB0     		sub	sp, sp, #40
 738              	.LCFI38:
 739              		.cfi_def_cfa_offset 48
 740 0004 02AF     		add	r7, sp, #8
 741              	.LCFI39:
 742              		.cfi_def_cfa 7, 40
 743 0006 F860     		str	r0, [r7, #12]
 744 0008 B960     		str	r1, [r7, #8]
 745 000a 3B60     		str	r3, [r7]
 746 000c 1346     		mov	r3, r2	@ movhi
 747 000e FB80     		strh	r3, [r7, #6]	@ movhi
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 748              		.loc 1 1140 0
 749 0010 0023     		movs	r3, #0
 750 0012 7B61     		str	r3, [r7, #20]
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 751              		.loc 1 1143 0
 752 0014 FB68     		ldr	r3, [r7, #12]
 753 0016 93F83D30 		ldrb	r3, [r3, #61]
ARM GAS  /tmp/ccRUQzex.s 			page 34


 754 001a DBB2     		uxtb	r3, r3
 755 001c 202B     		cmp	r3, #32
 756 001e 7BD1     		bne	.L23
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 757              		.loc 1 1145 0
 758 0020 BB68     		ldr	r3, [r7, #8]
 759 0022 002B     		cmp	r3, #0
 760 0024 02D0     		beq	.L24
 761              		.loc 1 1145 0 is_stmt 0 discriminator 1
 762 0026 FB88     		ldrh	r3, [r7, #6]
 763 0028 002B     		cmp	r3, #0
 764 002a 01D1     		bne	.L25
 765              	.L24:
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 766              		.loc 1 1147 0 is_stmt 1
 767 002c 0123     		movs	r3, #1
 768 002e 74E0     		b	.L26
 769              	.L25:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 770              		.loc 1 1151 0
 771 0030 FB68     		ldr	r3, [r7, #12]
 772 0032 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 773 0036 012B     		cmp	r3, #1
 774 0038 01D1     		bne	.L27
 775              		.loc 1 1151 0 is_stmt 0 discriminator 1
 776 003a 0223     		movs	r3, #2
 777 003c 6DE0     		b	.L26
 778              	.L27:
 779              		.loc 1 1151 0 discriminator 2
 780 003e FB68     		ldr	r3, [r7, #12]
 781 0040 0122     		movs	r2, #1
 782 0042 83F83C20 		strb	r2, [r3, #60]
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 783              		.loc 1 1153 0 is_stmt 1 discriminator 2
 784 0046 FB68     		ldr	r3, [r7, #12]
 785 0048 0022     		movs	r2, #0
 786 004a 1A64     		str	r2, [r3, #64]
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 787              		.loc 1 1154 0 discriminator 2
 788 004c FB68     		ldr	r3, [r7, #12]
 789 004e 2122     		movs	r2, #33
 790 0050 83F83D20 		strb	r2, [r3, #61]
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 791              		.loc 1 1157 0 discriminator 2
 792 0054 FFF7FEFF 		bl	HAL_GetTick
 793 0058 7861     		str	r0, [r7, #20]
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 794              		.loc 1 1159 0 discriminator 2
ARM GAS  /tmp/ccRUQzex.s 			page 35


 795 005a FB68     		ldr	r3, [r7, #12]
 796 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 797 005e 9A84     		strh	r2, [r3, #36]	@ movhi
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 798              		.loc 1 1160 0 discriminator 2
 799 0060 FB68     		ldr	r3, [r7, #12]
 800 0062 FA88     		ldrh	r2, [r7, #6]	@ movhi
 801 0064 DA84     		strh	r2, [r3, #38]	@ movhi
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802              		.loc 1 1163 0 discriminator 2
 803 0066 FB68     		ldr	r3, [r7, #12]
 804 0068 9B68     		ldr	r3, [r3, #8]
 805 006a B3F5805F 		cmp	r3, #4096
 806 006e 08D1     		bne	.L28
 807              		.loc 1 1163 0 is_stmt 0 discriminator 1
 808 0070 FB68     		ldr	r3, [r7, #12]
 809 0072 1B69     		ldr	r3, [r3, #16]
 810 0074 002B     		cmp	r3, #0
 811 0076 04D1     		bne	.L28
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 812              		.loc 1 1165 0 is_stmt 1
 813 0078 0023     		movs	r3, #0
 814 007a FB61     		str	r3, [r7, #28]
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 815              		.loc 1 1166 0
 816 007c BB68     		ldr	r3, [r7, #8]
 817 007e BB61     		str	r3, [r7, #24]
 818 0080 03E0     		b	.L29
 819              	.L28:
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 820              		.loc 1 1170 0
 821 0082 BB68     		ldr	r3, [r7, #8]
 822 0084 FB61     		str	r3, [r7, #28]
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 823              		.loc 1 1171 0
 824 0086 0023     		movs	r3, #0
 825 0088 BB61     		str	r3, [r7, #24]
 826              	.L29:
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 827              		.loc 1 1175 0
 828 008a FB68     		ldr	r3, [r7, #12]
 829 008c 0022     		movs	r2, #0
 830 008e 83F83C20 		strb	r2, [r3, #60]
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 831              		.loc 1 1177 0
 832 0092 29E0     		b	.L30
 833              	.L34:
ARM GAS  /tmp/ccRUQzex.s 			page 36


1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 834              		.loc 1 1179 0
 835 0094 3B68     		ldr	r3, [r7]
 836 0096 0093     		str	r3, [sp]
 837 0098 7B69     		ldr	r3, [r7, #20]
 838 009a 0022     		movs	r2, #0
 839 009c 8021     		movs	r1, #128
 840 009e F868     		ldr	r0, [r7, #12]
 841 00a0 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 842 00a4 0346     		mov	r3, r0
 843 00a6 002B     		cmp	r3, #0
 844 00a8 01D0     		beq	.L31
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 845              		.loc 1 1181 0
 846 00aa 0323     		movs	r3, #3
 847 00ac 35E0     		b	.L26
 848              	.L31:
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 849              		.loc 1 1183 0
 850 00ae FB69     		ldr	r3, [r7, #28]
 851 00b0 002B     		cmp	r3, #0
 852 00b2 0AD1     		bne	.L32
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 853              		.loc 1 1185 0
 854 00b4 FB68     		ldr	r3, [r7, #12]
 855 00b6 1B68     		ldr	r3, [r3]
 856 00b8 BA69     		ldr	r2, [r7, #24]
 857 00ba 1288     		ldrh	r2, [r2]
 858 00bc C2F30802 		ubfx	r2, r2, #0, #9
 859 00c0 5A60     		str	r2, [r3, #4]
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 860              		.loc 1 1186 0
 861 00c2 BB69     		ldr	r3, [r7, #24]
 862 00c4 0233     		adds	r3, r3, #2
 863 00c6 BB61     		str	r3, [r7, #24]
 864 00c8 07E0     		b	.L33
 865              	.L32:
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 866              		.loc 1 1190 0
 867 00ca FB68     		ldr	r3, [r7, #12]
 868 00cc 1B68     		ldr	r3, [r3]
 869 00ce FA69     		ldr	r2, [r7, #28]
 870 00d0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 871 00d2 5A60     		str	r2, [r3, #4]
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 872              		.loc 1 1191 0
 873 00d4 FB69     		ldr	r3, [r7, #28]
 874 00d6 0133     		adds	r3, r3, #1
 875 00d8 FB61     		str	r3, [r7, #28]
 876              	.L33:
ARM GAS  /tmp/ccRUQzex.s 			page 37


1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount--;
 877              		.loc 1 1193 0
 878 00da FB68     		ldr	r3, [r7, #12]
 879 00dc DB8C     		ldrh	r3, [r3, #38]	@ movhi
 880 00de 9BB2     		uxth	r3, r3
 881 00e0 013B     		subs	r3, r3, #1
 882 00e2 9AB2     		uxth	r2, r3
 883 00e4 FB68     		ldr	r3, [r7, #12]
 884 00e6 DA84     		strh	r2, [r3, #38]	@ movhi
 885              	.L30:
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 886              		.loc 1 1177 0
 887 00e8 FB68     		ldr	r3, [r7, #12]
 888 00ea DB8C     		ldrh	r3, [r3, #38]	@ movhi
 889 00ec 9BB2     		uxth	r3, r3
 890 00ee 002B     		cmp	r3, #0
 891 00f0 D0D1     		bne	.L34
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 892              		.loc 1 1196 0
 893 00f2 3B68     		ldr	r3, [r7]
 894 00f4 0093     		str	r3, [sp]
 895 00f6 7B69     		ldr	r3, [r7, #20]
 896 00f8 0022     		movs	r2, #0
 897 00fa 4021     		movs	r1, #64
 898 00fc F868     		ldr	r0, [r7, #12]
 899 00fe FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 900 0102 0346     		mov	r3, r0
 901 0104 002B     		cmp	r3, #0
 902 0106 01D0     		beq	.L35
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_TIMEOUT;
 903              		.loc 1 1198 0
 904 0108 0323     		movs	r3, #3
 905 010a 06E0     		b	.L26
 906              	.L35:
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 907              		.loc 1 1202 0
 908 010c FB68     		ldr	r3, [r7, #12]
 909 010e 2022     		movs	r2, #32
 910 0110 83F83D20 		strb	r2, [r3, #61]
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 911              		.loc 1 1204 0
 912 0114 0023     		movs	r3, #0
 913 0116 00E0     		b	.L26
 914              	.L23:
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 915              		.loc 1 1208 0
ARM GAS  /tmp/ccRUQzex.s 			page 38


 916 0118 0223     		movs	r3, #2
 917              	.L26:
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 918              		.loc 1 1210 0
 919 011a 1846     		mov	r0, r3
 920 011c 2037     		adds	r7, r7, #32
 921              	.LCFI40:
 922              		.cfi_def_cfa_offset 8
 923 011e BD46     		mov	sp, r7
 924              	.LCFI41:
 925              		.cfi_def_cfa_register 13
 926              		@ sp needed
 927 0120 80BD     		pop	{r7, pc}
 928              		.cfi_endproc
 929              	.LFE72:
 931              		.section	.text.HAL_UART_Receive,"ax",%progbits
 932              		.align	1
 933              		.global	HAL_UART_Receive
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 937              		.fpu softvfp
 939              	HAL_UART_Receive:
 940              	.LFB73:
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 941              		.loc 1 1225 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 32
 944              		@ frame_needed = 1, uses_anonymous_args = 0
 945 0000 80B5     		push	{r7, lr}
 946              	.LCFI42:
 947              		.cfi_def_cfa_offset 8
 948              		.cfi_offset 7, -8
 949              		.cfi_offset 14, -4
 950 0002 8AB0     		sub	sp, sp, #40
 951              	.LCFI43:
 952              		.cfi_def_cfa_offset 48
 953 0004 02AF     		add	r7, sp, #8
 954              	.LCFI44:
 955              		.cfi_def_cfa 7, 40
 956 0006 F860     		str	r0, [r7, #12]
 957 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccRUQzex.s 			page 39


 958 000a 3B60     		str	r3, [r7]
 959 000c 1346     		mov	r3, r2	@ movhi
 960 000e FB80     		strh	r3, [r7, #6]	@ movhi
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 961              		.loc 1 1228 0
 962 0010 0023     		movs	r3, #0
 963 0012 7B61     		str	r3, [r7, #20]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 964              		.loc 1 1231 0
 965 0014 FB68     		ldr	r3, [r7, #12]
 966 0016 93F83E30 		ldrb	r3, [r3, #62]
 967 001a DBB2     		uxtb	r3, r3
 968 001c 202B     		cmp	r3, #32
 969 001e 40F08C80 		bne	.L37
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 970              		.loc 1 1233 0
 971 0022 BB68     		ldr	r3, [r7, #8]
 972 0024 002B     		cmp	r3, #0
 973 0026 02D0     		beq	.L38
 974              		.loc 1 1233 0 is_stmt 0 discriminator 1
 975 0028 FB88     		ldrh	r3, [r7, #6]
 976 002a 002B     		cmp	r3, #0
 977 002c 01D1     		bne	.L39
 978              	.L38:
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 979              		.loc 1 1235 0 is_stmt 1
 980 002e 0123     		movs	r3, #1
 981 0030 84E0     		b	.L40
 982              	.L39:
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 983              		.loc 1 1239 0
 984 0032 FB68     		ldr	r3, [r7, #12]
 985 0034 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 986 0038 012B     		cmp	r3, #1
 987 003a 01D1     		bne	.L41
 988              		.loc 1 1239 0 is_stmt 0 discriminator 1
 989 003c 0223     		movs	r3, #2
 990 003e 7DE0     		b	.L40
 991              	.L41:
 992              		.loc 1 1239 0 discriminator 2
 993 0040 FB68     		ldr	r3, [r7, #12]
 994 0042 0122     		movs	r2, #1
 995 0044 83F83C20 		strb	r2, [r3, #60]
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 996              		.loc 1 1241 0 is_stmt 1 discriminator 2
 997 0048 FB68     		ldr	r3, [r7, #12]
 998 004a 0022     		movs	r2, #0
ARM GAS  /tmp/ccRUQzex.s 			page 40


 999 004c 1A64     		str	r2, [r3, #64]
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1000              		.loc 1 1242 0 discriminator 2
 1001 004e FB68     		ldr	r3, [r7, #12]
 1002 0050 2222     		movs	r2, #34
 1003 0052 83F83E20 		strb	r2, [r3, #62]
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1004              		.loc 1 1243 0 discriminator 2
 1005 0056 FB68     		ldr	r3, [r7, #12]
 1006 0058 0022     		movs	r2, #0
 1007 005a 1A63     		str	r2, [r3, #48]
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 1008              		.loc 1 1246 0 discriminator 2
 1009 005c FFF7FEFF 		bl	HAL_GetTick
 1010 0060 7861     		str	r0, [r7, #20]
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1011              		.loc 1 1248 0 discriminator 2
 1012 0062 FB68     		ldr	r3, [r7, #12]
 1013 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1014 0066 9A85     		strh	r2, [r3, #44]	@ movhi
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1015              		.loc 1 1249 0 discriminator 2
 1016 0068 FB68     		ldr	r3, [r7, #12]
 1017 006a FA88     		ldrh	r2, [r7, #6]	@ movhi
 1018 006c DA85     		strh	r2, [r3, #46]	@ movhi
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1019              		.loc 1 1252 0 discriminator 2
 1020 006e FB68     		ldr	r3, [r7, #12]
 1021 0070 9B68     		ldr	r3, [r3, #8]
 1022 0072 B3F5805F 		cmp	r3, #4096
 1023 0076 08D1     		bne	.L42
 1024              		.loc 1 1252 0 is_stmt 0 discriminator 1
 1025 0078 FB68     		ldr	r3, [r7, #12]
 1026 007a 1B69     		ldr	r3, [r3, #16]
 1027 007c 002B     		cmp	r3, #0
 1028 007e 04D1     		bne	.L42
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 1029              		.loc 1 1254 0 is_stmt 1
 1030 0080 0023     		movs	r3, #0
 1031 0082 FB61     		str	r3, [r7, #28]
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 1032              		.loc 1 1255 0
 1033 0084 BB68     		ldr	r3, [r7, #8]
 1034 0086 BB61     		str	r3, [r7, #24]
 1035 0088 03E0     		b	.L43
 1036              	.L42:
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 1037              		.loc 1 1259 0
ARM GAS  /tmp/ccRUQzex.s 			page 41


 1038 008a BB68     		ldr	r3, [r7, #8]
 1039 008c FB61     		str	r3, [r7, #28]
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 1040              		.loc 1 1260 0
 1041 008e 0023     		movs	r3, #0
 1042 0090 BB61     		str	r3, [r7, #24]
 1043              	.L43:
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1044              		.loc 1 1264 0
 1045 0092 FB68     		ldr	r3, [r7, #12]
 1046 0094 0022     		movs	r2, #0
 1047 0096 83F83C20 		strb	r2, [r3, #60]
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check the remain data to be received */
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 1048              		.loc 1 1267 0
 1049 009a 43E0     		b	.L44
 1050              	.L51:
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1051              		.loc 1 1269 0
 1052 009c 3B68     		ldr	r3, [r7]
 1053 009e 0093     		str	r3, [sp]
 1054 00a0 7B69     		ldr	r3, [r7, #20]
 1055 00a2 0022     		movs	r2, #0
 1056 00a4 2021     		movs	r1, #32
 1057 00a6 F868     		ldr	r0, [r7, #12]
 1058 00a8 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1059 00ac 0346     		mov	r3, r0
 1060 00ae 002B     		cmp	r3, #0
 1061 00b0 01D0     		beq	.L45
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 1062              		.loc 1 1271 0
 1063 00b2 0323     		movs	r3, #3
 1064 00b4 42E0     		b	.L40
 1065              	.L45:
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 1066              		.loc 1 1273 0
 1067 00b6 FB69     		ldr	r3, [r7, #28]
 1068 00b8 002B     		cmp	r3, #0
 1069 00ba 0CD1     		bne	.L46
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 1070              		.loc 1 1275 0
 1071 00bc FB68     		ldr	r3, [r7, #12]
 1072 00be 1B68     		ldr	r3, [r3]
 1073 00c0 5B68     		ldr	r3, [r3, #4]
 1074 00c2 9BB2     		uxth	r3, r3
 1075 00c4 C3F30803 		ubfx	r3, r3, #0, #9
 1076 00c8 9AB2     		uxth	r2, r3
 1077 00ca BB69     		ldr	r3, [r7, #24]
 1078 00cc 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/ccRUQzex.s 			page 42


1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 1079              		.loc 1 1276 0
 1080 00ce BB69     		ldr	r3, [r7, #24]
 1081 00d0 0233     		adds	r3, r3, #2
 1082 00d2 BB61     		str	r3, [r7, #24]
 1083 00d4 1FE0     		b	.L47
 1084              	.L46:
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORD
 1085              		.loc 1 1280 0
 1086 00d6 FB68     		ldr	r3, [r7, #12]
 1087 00d8 9B68     		ldr	r3, [r3, #8]
 1088 00da B3F5805F 		cmp	r3, #4096
 1089 00de 07D0     		beq	.L48
 1090              		.loc 1 1280 0 is_stmt 0 discriminator 1
 1091 00e0 FB68     		ldr	r3, [r7, #12]
 1092 00e2 9B68     		ldr	r3, [r3, #8]
 1093 00e4 002B     		cmp	r3, #0
 1094 00e6 0AD1     		bne	.L49
 1095              		.loc 1 1280 0 discriminator 2
 1096 00e8 FB68     		ldr	r3, [r7, #12]
 1097 00ea 1B69     		ldr	r3, [r3, #16]
 1098 00ec 002B     		cmp	r3, #0
 1099 00ee 06D1     		bne	.L49
 1100              	.L48:
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1101              		.loc 1 1282 0 is_stmt 1
 1102 00f0 FB68     		ldr	r3, [r7, #12]
 1103 00f2 1B68     		ldr	r3, [r3]
 1104 00f4 5B68     		ldr	r3, [r3, #4]
 1105 00f6 DAB2     		uxtb	r2, r3
 1106 00f8 FB69     		ldr	r3, [r7, #28]
 1107 00fa 1A70     		strb	r2, [r3]
 1108 00fc 08E0     		b	.L50
 1109              	.L49:
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1110              		.loc 1 1286 0
 1111 00fe FB68     		ldr	r3, [r7, #12]
 1112 0100 1B68     		ldr	r3, [r3]
 1113 0102 5B68     		ldr	r3, [r3, #4]
 1114 0104 DBB2     		uxtb	r3, r3
 1115 0106 03F07F03 		and	r3, r3, #127
 1116 010a DAB2     		uxtb	r2, r3
 1117 010c FB69     		ldr	r3, [r7, #28]
 1118 010e 1A70     		strb	r2, [r3]
 1119              	.L50:
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 1120              		.loc 1 1288 0
 1121 0110 FB69     		ldr	r3, [r7, #28]
 1122 0112 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccRUQzex.s 			page 43


 1123 0114 FB61     		str	r3, [r7, #28]
 1124              	.L47:
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount--;
 1125              		.loc 1 1290 0
 1126 0116 FB68     		ldr	r3, [r7, #12]
 1127 0118 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1128 011a 9BB2     		uxth	r3, r3
 1129 011c 013B     		subs	r3, r3, #1
 1130 011e 9AB2     		uxth	r2, r3
 1131 0120 FB68     		ldr	r3, [r7, #12]
 1132 0122 DA85     		strh	r2, [r3, #46]	@ movhi
 1133              	.L44:
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1134              		.loc 1 1267 0
 1135 0124 FB68     		ldr	r3, [r7, #12]
 1136 0126 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1137 0128 9BB2     		uxth	r3, r3
 1138 012a 002B     		cmp	r3, #0
 1139 012c B6D1     		bne	.L51
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1140              		.loc 1 1294 0
 1141 012e FB68     		ldr	r3, [r7, #12]
 1142 0130 2022     		movs	r2, #32
 1143 0132 83F83E20 		strb	r2, [r3, #62]
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1144              		.loc 1 1296 0
 1145 0136 0023     		movs	r3, #0
 1146 0138 00E0     		b	.L40
 1147              	.L37:
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1148              		.loc 1 1300 0
 1149 013a 0223     		movs	r3, #2
 1150              	.L40:
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1151              		.loc 1 1302 0
 1152 013c 1846     		mov	r0, r3
 1153 013e 2037     		adds	r7, r7, #32
 1154              	.LCFI45:
 1155              		.cfi_def_cfa_offset 8
 1156 0140 BD46     		mov	sp, r7
 1157              	.LCFI46:
 1158              		.cfi_def_cfa_register 13
 1159              		@ sp needed
 1160 0142 80BD     		pop	{r7, pc}
 1161              		.cfi_endproc
 1162              	.LFE73:
 1164              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1165              		.align	1
ARM GAS  /tmp/ccRUQzex.s 			page 44


 1166              		.global	HAL_UART_Transmit_IT
 1167              		.syntax unified
 1168              		.thumb
 1169              		.thumb_func
 1170              		.fpu softvfp
 1172              	HAL_UART_Transmit_IT:
 1173              	.LFB74:
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1174              		.loc 1 1316 0
 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 16
 1177              		@ frame_needed = 1, uses_anonymous_args = 0
 1178              		@ link register save eliminated.
 1179 0000 80B4     		push	{r7}
 1180              	.LCFI47:
 1181              		.cfi_def_cfa_offset 4
 1182              		.cfi_offset 7, -4
 1183 0002 85B0     		sub	sp, sp, #20
 1184              	.LCFI48:
 1185              		.cfi_def_cfa_offset 24
 1186 0004 00AF     		add	r7, sp, #0
 1187              	.LCFI49:
 1188              		.cfi_def_cfa_register 7
 1189 0006 F860     		str	r0, [r7, #12]
 1190 0008 B960     		str	r1, [r7, #8]
 1191 000a 1346     		mov	r3, r2
 1192 000c FB80     		strh	r3, [r7, #6]	@ movhi
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1193              		.loc 1 1318 0
 1194 000e FB68     		ldr	r3, [r7, #12]
 1195 0010 93F83D30 		ldrb	r3, [r3, #61]
 1196 0014 DBB2     		uxtb	r3, r3
 1197 0016 202B     		cmp	r3, #32
 1198 0018 30D1     		bne	.L53
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1199              		.loc 1 1320 0
 1200 001a BB68     		ldr	r3, [r7, #8]
 1201 001c 002B     		cmp	r3, #0
 1202 001e 02D0     		beq	.L54
 1203              		.loc 1 1320 0 is_stmt 0 discriminator 1
 1204 0020 FB88     		ldrh	r3, [r7, #6]
 1205 0022 002B     		cmp	r3, #0
ARM GAS  /tmp/ccRUQzex.s 			page 45


 1206 0024 01D1     		bne	.L55
 1207              	.L54:
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1208              		.loc 1 1322 0 is_stmt 1
 1209 0026 0123     		movs	r3, #1
 1210 0028 29E0     		b	.L56
 1211              	.L55:
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1212              		.loc 1 1326 0
 1213 002a FB68     		ldr	r3, [r7, #12]
 1214 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1215 0030 012B     		cmp	r3, #1
 1216 0032 01D1     		bne	.L57
 1217              		.loc 1 1326 0 is_stmt 0 discriminator 1
 1218 0034 0223     		movs	r3, #2
 1219 0036 22E0     		b	.L56
 1220              	.L57:
 1221              		.loc 1 1326 0 discriminator 2
 1222 0038 FB68     		ldr	r3, [r7, #12]
 1223 003a 0122     		movs	r2, #1
 1224 003c 83F83C20 		strb	r2, [r3, #60]
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1225              		.loc 1 1328 0 is_stmt 1 discriminator 2
 1226 0040 FB68     		ldr	r3, [r7, #12]
 1227 0042 BA68     		ldr	r2, [r7, #8]
 1228 0044 1A62     		str	r2, [r3, #32]
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1229              		.loc 1 1329 0 discriminator 2
 1230 0046 FB68     		ldr	r3, [r7, #12]
 1231 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1232 004a 9A84     		strh	r2, [r3, #36]	@ movhi
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1233              		.loc 1 1330 0 discriminator 2
 1234 004c FB68     		ldr	r3, [r7, #12]
 1235 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1236 0050 DA84     		strh	r2, [r3, #38]	@ movhi
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1237              		.loc 1 1332 0 discriminator 2
 1238 0052 FB68     		ldr	r3, [r7, #12]
 1239 0054 0022     		movs	r2, #0
 1240 0056 1A64     		str	r2, [r3, #64]
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1241              		.loc 1 1333 0 discriminator 2
 1242 0058 FB68     		ldr	r3, [r7, #12]
 1243 005a 2122     		movs	r2, #33
 1244 005c 83F83D20 		strb	r2, [r3, #61]
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1245              		.loc 1 1336 0 discriminator 2
 1246 0060 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 46


 1247 0062 0022     		movs	r2, #0
 1248 0064 83F83C20 		strb	r2, [r3, #60]
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 1249              		.loc 1 1339 0 discriminator 2
 1250 0068 FB68     		ldr	r3, [r7, #12]
 1251 006a 1B68     		ldr	r3, [r3]
 1252 006c FA68     		ldr	r2, [r7, #12]
 1253 006e 1268     		ldr	r2, [r2]
 1254 0070 D268     		ldr	r2, [r2, #12]
 1255 0072 42F08002 		orr	r2, r2, #128
 1256 0076 DA60     		str	r2, [r3, #12]
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1257              		.loc 1 1341 0 discriminator 2
 1258 0078 0023     		movs	r3, #0
 1259 007a 00E0     		b	.L56
 1260              	.L53:
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1261              		.loc 1 1345 0
 1262 007c 0223     		movs	r3, #2
 1263              	.L56:
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1264              		.loc 1 1347 0
 1265 007e 1846     		mov	r0, r3
 1266 0080 1437     		adds	r7, r7, #20
 1267              	.LCFI50:
 1268              		.cfi_def_cfa_offset 4
 1269 0082 BD46     		mov	sp, r7
 1270              	.LCFI51:
 1271              		.cfi_def_cfa_register 13
 1272              		@ sp needed
 1273 0084 80BC     		pop	{r7}
 1274              	.LCFI52:
 1275              		.cfi_restore 7
 1276              		.cfi_def_cfa_offset 0
 1277 0086 7047     		bx	lr
 1278              		.cfi_endproc
 1279              	.LFE74:
 1281              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1282              		.align	1
 1283              		.global	HAL_UART_Receive_IT
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1287              		.fpu softvfp
 1289              	HAL_UART_Receive_IT:
 1290              	.LFB75:
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
ARM GAS  /tmp/ccRUQzex.s 			page 47


1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1291              		.loc 1 1361 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 16
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0000 80B5     		push	{r7, lr}
 1296              	.LCFI53:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 84B0     		sub	sp, sp, #16
 1301              	.LCFI54:
 1302              		.cfi_def_cfa_offset 24
 1303 0004 00AF     		add	r7, sp, #0
 1304              	.LCFI55:
 1305              		.cfi_def_cfa_register 7
 1306 0006 F860     		str	r0, [r7, #12]
 1307 0008 B960     		str	r1, [r7, #8]
 1308 000a 1346     		mov	r3, r2
 1309 000c FB80     		strh	r3, [r7, #6]	@ movhi
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1310              		.loc 1 1363 0
 1311 000e FB68     		ldr	r3, [r7, #12]
 1312 0010 93F83E30 		ldrb	r3, [r3, #62]
 1313 0014 DBB2     		uxtb	r3, r3
 1314 0016 202B     		cmp	r3, #32
 1315 0018 1DD1     		bne	.L59
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1316              		.loc 1 1365 0
 1317 001a BB68     		ldr	r3, [r7, #8]
 1318 001c 002B     		cmp	r3, #0
 1319 001e 02D0     		beq	.L60
 1320              		.loc 1 1365 0 is_stmt 0 discriminator 1
 1321 0020 FB88     		ldrh	r3, [r7, #6]
 1322 0022 002B     		cmp	r3, #0
 1323 0024 01D1     		bne	.L61
 1324              	.L60:
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1325              		.loc 1 1367 0 is_stmt 1
 1326 0026 0123     		movs	r3, #1
 1327 0028 16E0     		b	.L62
 1328              	.L61:
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
ARM GAS  /tmp/ccRUQzex.s 			page 48


1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1329              		.loc 1 1371 0
 1330 002a FB68     		ldr	r3, [r7, #12]
 1331 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1332 0030 012B     		cmp	r3, #1
 1333 0032 01D1     		bne	.L63
 1334              		.loc 1 1371 0 is_stmt 0 discriminator 1
 1335 0034 0223     		movs	r3, #2
 1336 0036 0FE0     		b	.L62
 1337              	.L63:
 1338              		.loc 1 1371 0 discriminator 2
 1339 0038 FB68     		ldr	r3, [r7, #12]
 1340 003a 0122     		movs	r2, #1
 1341 003c 83F83C20 		strb	r2, [r3, #60]
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1342              		.loc 1 1374 0 is_stmt 1 discriminator 2
 1343 0040 FB68     		ldr	r3, [r7, #12]
 1344 0042 0022     		movs	r2, #0
 1345 0044 1A63     		str	r2, [r3, #48]
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return(UART_Start_Receive_IT(huart, pData, Size));
 1346              		.loc 1 1376 0 discriminator 2
 1347 0046 FB88     		ldrh	r3, [r7, #6]
 1348 0048 1A46     		mov	r2, r3
 1349 004a B968     		ldr	r1, [r7, #8]
 1350 004c F868     		ldr	r0, [r7, #12]
 1351 004e FFF7FEFF 		bl	UART_Start_Receive_IT
 1352 0052 0346     		mov	r3, r0
 1353 0054 00E0     		b	.L62
 1354              	.L59:
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1355              		.loc 1 1380 0
 1356 0056 0223     		movs	r3, #2
 1357              	.L62:
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1358              		.loc 1 1382 0
 1359 0058 1846     		mov	r0, r3
 1360 005a 1037     		adds	r7, r7, #16
 1361              	.LCFI56:
 1362              		.cfi_def_cfa_offset 8
 1363 005c BD46     		mov	sp, r7
 1364              	.LCFI57:
 1365              		.cfi_def_cfa_register 13
 1366              		@ sp needed
 1367 005e 80BD     		pop	{r7, pc}
 1368              		.cfi_endproc
 1369              	.LFE75:
 1371              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1372              		.align	1
 1373              		.global	HAL_UART_Transmit_DMA
 1374              		.syntax unified
ARM GAS  /tmp/ccRUQzex.s 			page 49


 1375              		.thumb
 1376              		.thumb_func
 1377              		.fpu softvfp
 1379              	HAL_UART_Transmit_DMA:
 1380              	.LFB76:
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in DMA mode.
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1381              		.loc 1 1396 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 24
 1384              		@ frame_needed = 1, uses_anonymous_args = 0
 1385 0000 80B5     		push	{r7, lr}
 1386              	.LCFI58:
 1387              		.cfi_def_cfa_offset 8
 1388              		.cfi_offset 7, -8
 1389              		.cfi_offset 14, -4
 1390 0002 86B0     		sub	sp, sp, #24
 1391              	.LCFI59:
 1392              		.cfi_def_cfa_offset 32
 1393 0004 00AF     		add	r7, sp, #0
 1394              	.LCFI60:
 1395              		.cfi_def_cfa_register 7
 1396 0006 F860     		str	r0, [r7, #12]
 1397 0008 B960     		str	r1, [r7, #8]
 1398 000a 1346     		mov	r3, r2
 1399 000c FB80     		strh	r3, [r7, #6]	@ movhi
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1400              		.loc 1 1400 0
 1401 000e FB68     		ldr	r3, [r7, #12]
 1402 0010 93F83D30 		ldrb	r3, [r3, #61]
 1403 0014 DBB2     		uxtb	r3, r3
 1404 0016 202B     		cmp	r3, #32
 1405 0018 53D1     		bne	.L65
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1406              		.loc 1 1402 0
 1407 001a BB68     		ldr	r3, [r7, #8]
 1408 001c 002B     		cmp	r3, #0
 1409 001e 02D0     		beq	.L66
 1410              		.loc 1 1402 0 is_stmt 0 discriminator 1
 1411 0020 FB88     		ldrh	r3, [r7, #6]
 1412 0022 002B     		cmp	r3, #0
ARM GAS  /tmp/ccRUQzex.s 			page 50


 1413 0024 01D1     		bne	.L67
 1414              	.L66:
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1415              		.loc 1 1404 0 is_stmt 1
 1416 0026 0123     		movs	r3, #1
 1417 0028 4CE0     		b	.L68
 1418              	.L67:
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1419              		.loc 1 1408 0
 1420 002a FB68     		ldr	r3, [r7, #12]
 1421 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1422 0030 012B     		cmp	r3, #1
 1423 0032 01D1     		bne	.L69
 1424              		.loc 1 1408 0 is_stmt 0 discriminator 1
 1425 0034 0223     		movs	r3, #2
 1426 0036 45E0     		b	.L68
 1427              	.L69:
 1428              		.loc 1 1408 0 discriminator 2
 1429 0038 FB68     		ldr	r3, [r7, #12]
 1430 003a 0122     		movs	r2, #1
 1431 003c 83F83C20 		strb	r2, [r3, #60]
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1432              		.loc 1 1410 0 is_stmt 1 discriminator 2
 1433 0040 BA68     		ldr	r2, [r7, #8]
 1434 0042 FB68     		ldr	r3, [r7, #12]
 1435 0044 1A62     		str	r2, [r3, #32]
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1436              		.loc 1 1411 0 discriminator 2
 1437 0046 FB68     		ldr	r3, [r7, #12]
 1438 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1439 004a 9A84     		strh	r2, [r3, #36]	@ movhi
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1440              		.loc 1 1412 0 discriminator 2
 1441 004c FB68     		ldr	r3, [r7, #12]
 1442 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1443 0050 DA84     		strh	r2, [r3, #38]	@ movhi
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1444              		.loc 1 1414 0 discriminator 2
 1445 0052 FB68     		ldr	r3, [r7, #12]
 1446 0054 0022     		movs	r2, #0
 1447 0056 1A64     		str	r2, [r3, #64]
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1448              		.loc 1 1415 0 discriminator 2
 1449 0058 FB68     		ldr	r3, [r7, #12]
 1450 005a 2122     		movs	r2, #33
 1451 005c 83F83D20 		strb	r2, [r3, #61]
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1452              		.loc 1 1418 0 discriminator 2
 1453 0060 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 51


 1454 0062 5B6B     		ldr	r3, [r3, #52]
 1455 0064 194A     		ldr	r2, .L70
 1456 0066 9A62     		str	r2, [r3, #40]
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1457              		.loc 1 1421 0 discriminator 2
 1458 0068 FB68     		ldr	r3, [r7, #12]
 1459 006a 5B6B     		ldr	r3, [r3, #52]
 1460 006c 184A     		ldr	r2, .L70+4
 1461 006e DA62     		str	r2, [r3, #44]
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1462              		.loc 1 1424 0 discriminator 2
 1463 0070 FB68     		ldr	r3, [r7, #12]
 1464 0072 5B6B     		ldr	r3, [r3, #52]
 1465 0074 174A     		ldr	r2, .L70+8
 1466 0076 1A63     		str	r2, [r3, #48]
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1467              		.loc 1 1427 0 discriminator 2
 1468 0078 FB68     		ldr	r3, [r7, #12]
 1469 007a 5B6B     		ldr	r3, [r3, #52]
 1470 007c 0022     		movs	r2, #0
 1471 007e 5A63     		str	r2, [r3, #52]
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
 1472              		.loc 1 1430 0 discriminator 2
 1473 0080 07F10803 		add	r3, r7, #8
 1474 0084 7B61     		str	r3, [r7, #20]
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 1475              		.loc 1 1431 0 discriminator 2
 1476 0086 FB68     		ldr	r3, [r7, #12]
 1477 0088 586B     		ldr	r0, [r3, #52]
 1478 008a 7B69     		ldr	r3, [r7, #20]
 1479 008c 1968     		ldr	r1, [r3]
 1480 008e FB68     		ldr	r3, [r7, #12]
 1481 0090 1B68     		ldr	r3, [r3]
 1482 0092 0433     		adds	r3, r3, #4
 1483 0094 1A46     		mov	r2, r3
 1484 0096 FB88     		ldrh	r3, [r7, #6]
 1485 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1486              		.loc 1 1434 0 discriminator 2
 1487 009c FB68     		ldr	r3, [r7, #12]
 1488 009e 1B68     		ldr	r3, [r3]
 1489 00a0 6FF04002 		mvn	r2, #64
 1490 00a4 1A60     		str	r2, [r3]
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1491              		.loc 1 1437 0 discriminator 2
ARM GAS  /tmp/ccRUQzex.s 			page 52


 1492 00a6 FB68     		ldr	r3, [r7, #12]
 1493 00a8 0022     		movs	r2, #0
 1494 00aa 83F83C20 		strb	r2, [r3, #60]
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1495              		.loc 1 1441 0 discriminator 2
 1496 00ae FB68     		ldr	r3, [r7, #12]
 1497 00b0 1B68     		ldr	r3, [r3]
 1498 00b2 FA68     		ldr	r2, [r7, #12]
 1499 00b4 1268     		ldr	r2, [r2]
 1500 00b6 5269     		ldr	r2, [r2, #20]
 1501 00b8 42F08002 		orr	r2, r2, #128
 1502 00bc 5A61     		str	r2, [r3, #20]
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1503              		.loc 1 1443 0 discriminator 2
 1504 00be 0023     		movs	r3, #0
 1505 00c0 00E0     		b	.L68
 1506              	.L65:
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1507              		.loc 1 1447 0
 1508 00c2 0223     		movs	r3, #2
 1509              	.L68:
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1510              		.loc 1 1449 0
 1511 00c4 1846     		mov	r0, r3
 1512 00c6 1837     		adds	r7, r7, #24
 1513              	.LCFI61:
 1514              		.cfi_def_cfa_offset 8
 1515 00c8 BD46     		mov	sp, r7
 1516              	.LCFI62:
 1517              		.cfi_def_cfa_register 13
 1518              		@ sp needed
 1519 00ca 80BD     		pop	{r7, pc}
 1520              	.L71:
 1521              		.align	2
 1522              	.L70:
 1523 00cc 00000000 		.word	UART_DMATransmitCplt
 1524 00d0 00000000 		.word	UART_DMATxHalfCplt
 1525 00d4 00000000 		.word	UART_DMAError
 1526              		.cfi_endproc
 1527              	.LFE76:
 1529              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1530              		.align	1
 1531              		.global	HAL_UART_Receive_DMA
 1532              		.syntax unified
 1533              		.thumb
 1534              		.thumb_func
 1535              		.fpu softvfp
 1537              	HAL_UART_Receive_DMA:
 1538              	.LFB77:
ARM GAS  /tmp/ccRUQzex.s 			page 53


1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in DMA mode.
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1539              		.loc 1 1464 0
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 16
 1542              		@ frame_needed = 1, uses_anonymous_args = 0
 1543 0000 80B5     		push	{r7, lr}
 1544              	.LCFI63:
 1545              		.cfi_def_cfa_offset 8
 1546              		.cfi_offset 7, -8
 1547              		.cfi_offset 14, -4
 1548 0002 84B0     		sub	sp, sp, #16
 1549              	.LCFI64:
 1550              		.cfi_def_cfa_offset 24
 1551 0004 00AF     		add	r7, sp, #0
 1552              	.LCFI65:
 1553              		.cfi_def_cfa_register 7
 1554 0006 F860     		str	r0, [r7, #12]
 1555 0008 B960     		str	r1, [r7, #8]
 1556 000a 1346     		mov	r3, r2
 1557 000c FB80     		strh	r3, [r7, #6]	@ movhi
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1558              		.loc 1 1466 0
 1559 000e FB68     		ldr	r3, [r7, #12]
 1560 0010 93F83E30 		ldrb	r3, [r3, #62]
 1561 0014 DBB2     		uxtb	r3, r3
 1562 0016 202B     		cmp	r3, #32
 1563 0018 1DD1     		bne	.L73
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1564              		.loc 1 1468 0
 1565 001a BB68     		ldr	r3, [r7, #8]
 1566 001c 002B     		cmp	r3, #0
 1567 001e 02D0     		beq	.L74
 1568              		.loc 1 1468 0 is_stmt 0 discriminator 1
 1569 0020 FB88     		ldrh	r3, [r7, #6]
 1570 0022 002B     		cmp	r3, #0
 1571 0024 01D1     		bne	.L75
 1572              	.L74:
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1573              		.loc 1 1470 0 is_stmt 1
 1574 0026 0123     		movs	r3, #1
ARM GAS  /tmp/ccRUQzex.s 			page 54


 1575 0028 16E0     		b	.L76
 1576              	.L75:
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 1577              		.loc 1 1474 0
 1578 002a FB68     		ldr	r3, [r7, #12]
 1579 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1580 0030 012B     		cmp	r3, #1
 1581 0032 01D1     		bne	.L77
 1582              		.loc 1 1474 0 is_stmt 0 discriminator 1
 1583 0034 0223     		movs	r3, #2
 1584 0036 0FE0     		b	.L76
 1585              	.L77:
 1586              		.loc 1 1474 0 discriminator 2
 1587 0038 FB68     		ldr	r3, [r7, #12]
 1588 003a 0122     		movs	r2, #1
 1589 003c 83F83C20 		strb	r2, [r3, #60]
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1590              		.loc 1 1477 0 is_stmt 1 discriminator 2
 1591 0040 FB68     		ldr	r3, [r7, #12]
 1592 0042 0022     		movs	r2, #0
 1593 0044 1A63     		str	r2, [r3, #48]
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return(UART_Start_Receive_DMA(huart, pData, Size));
 1594              		.loc 1 1479 0 discriminator 2
 1595 0046 FB88     		ldrh	r3, [r7, #6]
 1596 0048 1A46     		mov	r2, r3
 1597 004a B968     		ldr	r1, [r7, #8]
 1598 004c F868     		ldr	r0, [r7, #12]
 1599 004e FFF7FEFF 		bl	UART_Start_Receive_DMA
 1600 0052 0346     		mov	r3, r0
 1601 0054 00E0     		b	.L76
 1602              	.L73:
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1603              		.loc 1 1483 0
 1604 0056 0223     		movs	r3, #2
 1605              	.L76:
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1606              		.loc 1 1485 0
 1607 0058 1846     		mov	r0, r3
 1608 005a 1037     		adds	r7, r7, #16
 1609              	.LCFI66:
 1610              		.cfi_def_cfa_offset 8
 1611 005c BD46     		mov	sp, r7
 1612              	.LCFI67:
 1613              		.cfi_def_cfa_register 13
 1614              		@ sp needed
 1615 005e 80BD     		pop	{r7, pc}
 1616              		.cfi_endproc
ARM GAS  /tmp/ccRUQzex.s 			page 55


 1617              	.LFE77:
 1619              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1620              		.align	1
 1621              		.global	HAL_UART_DMAPause
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1625              		.fpu softvfp
 1627              	HAL_UART_DMAPause:
 1628              	.LFB78:
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1629              		.loc 1 1494 0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 16
 1632              		@ frame_needed = 1, uses_anonymous_args = 0
 1633              		@ link register save eliminated.
 1634 0000 80B4     		push	{r7}
 1635              	.LCFI68:
 1636              		.cfi_def_cfa_offset 4
 1637              		.cfi_offset 7, -4
 1638 0002 85B0     		sub	sp, sp, #20
 1639              	.LCFI69:
 1640              		.cfi_def_cfa_offset 24
 1641 0004 00AF     		add	r7, sp, #0
 1642              	.LCFI70:
 1643              		.cfi_def_cfa_register 7
 1644 0006 7860     		str	r0, [r7, #4]
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1645              		.loc 1 1495 0
 1646 0008 0023     		movs	r3, #0
 1647 000a FB60     		str	r3, [r7, #12]
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 1648              		.loc 1 1498 0
 1649 000c 7B68     		ldr	r3, [r7, #4]
 1650 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1651 0012 012B     		cmp	r3, #1
 1652 0014 01D1     		bne	.L79
 1653              		.loc 1 1498 0 is_stmt 0 discriminator 1
 1654 0016 0223     		movs	r3, #2
 1655 0018 50E0     		b	.L80
 1656              	.L79:
 1657              		.loc 1 1498 0 discriminator 2
 1658 001a 7B68     		ldr	r3, [r7, #4]
 1659 001c 0122     		movs	r2, #1
 1660 001e 83F83C20 		strb	r2, [r3, #60]
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
ARM GAS  /tmp/ccRUQzex.s 			page 56


 1661              		.loc 1 1500 0 is_stmt 1 discriminator 2
 1662 0022 7B68     		ldr	r3, [r7, #4]
 1663 0024 1B68     		ldr	r3, [r3]
 1664 0026 5B69     		ldr	r3, [r3, #20]
 1665 0028 03F08003 		and	r3, r3, #128
 1666 002c 002B     		cmp	r3, #0
 1667 002e 14BF     		ite	ne
 1668 0030 0123     		movne	r3, #1
 1669 0032 0023     		moveq	r3, #0
 1670 0034 DBB2     		uxtb	r3, r3
 1671 0036 FB60     		str	r3, [r7, #12]
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1672              		.loc 1 1501 0 discriminator 2
 1673 0038 7B68     		ldr	r3, [r7, #4]
 1674 003a 93F83D30 		ldrb	r3, [r3, #61]
 1675 003e DBB2     		uxtb	r3, r3
 1676 0040 212B     		cmp	r3, #33
 1677 0042 0AD1     		bne	.L81
 1678              		.loc 1 1501 0 is_stmt 0 discriminator 1
 1679 0044 FB68     		ldr	r3, [r7, #12]
 1680 0046 002B     		cmp	r3, #0
 1681 0048 07D0     		beq	.L81
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1682              		.loc 1 1504 0 is_stmt 1
 1683 004a 7B68     		ldr	r3, [r7, #4]
 1684 004c 1B68     		ldr	r3, [r3]
 1685 004e 7A68     		ldr	r2, [r7, #4]
 1686 0050 1268     		ldr	r2, [r2]
 1687 0052 5269     		ldr	r2, [r2, #20]
 1688 0054 22F08002 		bic	r2, r2, #128
 1689 0058 5A61     		str	r2, [r3, #20]
 1690              	.L81:
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1691              		.loc 1 1507 0
 1692 005a 7B68     		ldr	r3, [r7, #4]
 1693 005c 1B68     		ldr	r3, [r3]
 1694 005e 5B69     		ldr	r3, [r3, #20]
 1695 0060 03F04003 		and	r3, r3, #64
 1696 0064 002B     		cmp	r3, #0
 1697 0066 14BF     		ite	ne
 1698 0068 0123     		movne	r3, #1
 1699 006a 0023     		moveq	r3, #0
 1700 006c DBB2     		uxtb	r3, r3
 1701 006e FB60     		str	r3, [r7, #12]
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1702              		.loc 1 1508 0
 1703 0070 7B68     		ldr	r3, [r7, #4]
 1704 0072 93F83E30 		ldrb	r3, [r3, #62]
 1705 0076 DBB2     		uxtb	r3, r3
 1706 0078 222B     		cmp	r3, #34
 1707 007a 1AD1     		bne	.L82
 1708              		.loc 1 1508 0 is_stmt 0 discriminator 1
 1709 007c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 57


 1710 007e 002B     		cmp	r3, #0
 1711 0080 17D0     		beq	.L82
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1712              		.loc 1 1511 0 is_stmt 1
 1713 0082 7B68     		ldr	r3, [r7, #4]
 1714 0084 1B68     		ldr	r3, [r3]
 1715 0086 7A68     		ldr	r2, [r7, #4]
 1716 0088 1268     		ldr	r2, [r2]
 1717 008a D268     		ldr	r2, [r2, #12]
 1718 008c 22F48072 		bic	r2, r2, #256
 1719 0090 DA60     		str	r2, [r3, #12]
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1720              		.loc 1 1512 0
 1721 0092 7B68     		ldr	r3, [r7, #4]
 1722 0094 1B68     		ldr	r3, [r3]
 1723 0096 7A68     		ldr	r2, [r7, #4]
 1724 0098 1268     		ldr	r2, [r2]
 1725 009a 5269     		ldr	r2, [r2, #20]
 1726 009c 22F00102 		bic	r2, r2, #1
 1727 00a0 5A61     		str	r2, [r3, #20]
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1728              		.loc 1 1515 0
 1729 00a2 7B68     		ldr	r3, [r7, #4]
 1730 00a4 1B68     		ldr	r3, [r3]
 1731 00a6 7A68     		ldr	r2, [r7, #4]
 1732 00a8 1268     		ldr	r2, [r2]
 1733 00aa 5269     		ldr	r2, [r2, #20]
 1734 00ac 22F04002 		bic	r2, r2, #64
 1735 00b0 5A61     		str	r2, [r3, #20]
 1736              	.L82:
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1737              		.loc 1 1519 0
 1738 00b2 7B68     		ldr	r3, [r7, #4]
 1739 00b4 0022     		movs	r2, #0
 1740 00b6 83F83C20 		strb	r2, [r3, #60]
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1741              		.loc 1 1521 0
 1742 00ba 0023     		movs	r3, #0
 1743              	.L80:
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1744              		.loc 1 1522 0
 1745 00bc 1846     		mov	r0, r3
 1746 00be 1437     		adds	r7, r7, #20
 1747              	.LCFI71:
 1748              		.cfi_def_cfa_offset 4
 1749 00c0 BD46     		mov	sp, r7
 1750              	.LCFI72:
 1751              		.cfi_def_cfa_register 13
 1752              		@ sp needed
ARM GAS  /tmp/ccRUQzex.s 			page 58


 1753 00c2 80BC     		pop	{r7}
 1754              	.LCFI73:
 1755              		.cfi_restore 7
 1756              		.cfi_def_cfa_offset 0
 1757 00c4 7047     		bx	lr
 1758              		.cfi_endproc
 1759              	.LFE78:
 1761              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1762              		.align	1
 1763              		.global	HAL_UART_DMAResume
 1764              		.syntax unified
 1765              		.thumb
 1766              		.thumb_func
 1767              		.fpu softvfp
 1769              	HAL_UART_DMAResume:
 1770              	.LFB79:
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1771              		.loc 1 1531 0
 1772              		.cfi_startproc
 1773              		@ args = 0, pretend = 0, frame = 16
 1774              		@ frame_needed = 1, uses_anonymous_args = 0
 1775              		@ link register save eliminated.
 1776 0000 80B4     		push	{r7}
 1777              	.LCFI74:
 1778              		.cfi_def_cfa_offset 4
 1779              		.cfi_offset 7, -4
 1780 0002 85B0     		sub	sp, sp, #20
 1781              	.LCFI75:
 1782              		.cfi_def_cfa_offset 24
 1783 0004 00AF     		add	r7, sp, #0
 1784              	.LCFI76:
 1785              		.cfi_def_cfa_register 7
 1786 0006 7860     		str	r0, [r7, #4]
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 1787              		.loc 1 1533 0
 1788 0008 7B68     		ldr	r3, [r7, #4]
 1789 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1790 000e 012B     		cmp	r3, #1
 1791 0010 01D1     		bne	.L84
 1792              		.loc 1 1533 0 is_stmt 0 discriminator 1
 1793 0012 0223     		movs	r3, #2
 1794 0014 3FE0     		b	.L85
 1795              	.L84:
 1796              		.loc 1 1533 0 discriminator 2
 1797 0016 7B68     		ldr	r3, [r7, #4]
 1798 0018 0122     		movs	r2, #1
 1799 001a 83F83C20 		strb	r2, [r3, #60]
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccRUQzex.s 			page 59


1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 1800              		.loc 1 1535 0 is_stmt 1 discriminator 2
 1801 001e 7B68     		ldr	r3, [r7, #4]
 1802 0020 93F83D30 		ldrb	r3, [r3, #61]
 1803 0024 DBB2     		uxtb	r3, r3
 1804 0026 212B     		cmp	r3, #33
 1805 0028 07D1     		bne	.L86
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1806              		.loc 1 1538 0
 1807 002a 7B68     		ldr	r3, [r7, #4]
 1808 002c 1B68     		ldr	r3, [r3]
 1809 002e 7A68     		ldr	r2, [r7, #4]
 1810 0030 1268     		ldr	r2, [r2]
 1811 0032 5269     		ldr	r2, [r2, #20]
 1812 0034 42F08002 		orr	r2, r2, #128
 1813 0038 5A61     		str	r2, [r3, #20]
 1814              	.L86:
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1815              		.loc 1 1541 0
 1816 003a 7B68     		ldr	r3, [r7, #4]
 1817 003c 93F83E30 		ldrb	r3, [r3, #62]
 1818 0040 DBB2     		uxtb	r3, r3
 1819 0042 222B     		cmp	r3, #34
 1820 0044 22D1     		bne	.L87
 1821              	.LBB2:
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1822              		.loc 1 1544 0
 1823 0046 0023     		movs	r3, #0
 1824 0048 FB60     		str	r3, [r7, #12]
 1825 004a 7B68     		ldr	r3, [r7, #4]
 1826 004c 1B68     		ldr	r3, [r3]
 1827 004e 1B68     		ldr	r3, [r3]
 1828 0050 FB60     		str	r3, [r7, #12]
 1829 0052 7B68     		ldr	r3, [r7, #4]
 1830 0054 1B68     		ldr	r3, [r3]
 1831 0056 5B68     		ldr	r3, [r3, #4]
 1832 0058 FB60     		str	r3, [r7, #12]
 1833 005a FB68     		ldr	r3, [r7, #12]
 1834              	.LBE2:
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1835              		.loc 1 1547 0
 1836 005c 7B68     		ldr	r3, [r7, #4]
 1837 005e 1B68     		ldr	r3, [r3]
 1838 0060 7A68     		ldr	r2, [r7, #4]
 1839 0062 1268     		ldr	r2, [r2]
 1840 0064 D268     		ldr	r2, [r2, #12]
 1841 0066 42F48072 		orr	r2, r2, #256
 1842 006a DA60     		str	r2, [r3, #12]
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccRUQzex.s 			page 60


 1843              		.loc 1 1548 0
 1844 006c 7B68     		ldr	r3, [r7, #4]
 1845 006e 1B68     		ldr	r3, [r3]
 1846 0070 7A68     		ldr	r2, [r7, #4]
 1847 0072 1268     		ldr	r2, [r2]
 1848 0074 5269     		ldr	r2, [r2, #20]
 1849 0076 42F00102 		orr	r2, r2, #1
 1850 007a 5A61     		str	r2, [r3, #20]
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1851              		.loc 1 1551 0
 1852 007c 7B68     		ldr	r3, [r7, #4]
 1853 007e 1B68     		ldr	r3, [r3]
 1854 0080 7A68     		ldr	r2, [r7, #4]
 1855 0082 1268     		ldr	r2, [r2]
 1856 0084 5269     		ldr	r2, [r2, #20]
 1857 0086 42F04002 		orr	r2, r2, #64
 1858 008a 5A61     		str	r2, [r3, #20]
 1859              	.L87:
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1860              		.loc 1 1555 0
 1861 008c 7B68     		ldr	r3, [r7, #4]
 1862 008e 0022     		movs	r2, #0
 1863 0090 83F83C20 		strb	r2, [r3, #60]
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1864              		.loc 1 1557 0
 1865 0094 0023     		movs	r3, #0
 1866              	.L85:
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1867              		.loc 1 1558 0
 1868 0096 1846     		mov	r0, r3
 1869 0098 1437     		adds	r7, r7, #20
 1870              	.LCFI77:
 1871              		.cfi_def_cfa_offset 4
 1872 009a BD46     		mov	sp, r7
 1873              	.LCFI78:
 1874              		.cfi_def_cfa_register 13
 1875              		@ sp needed
 1876 009c 80BC     		pop	{r7}
 1877              	.LCFI79:
 1878              		.cfi_restore 7
 1879              		.cfi_def_cfa_offset 0
 1880 009e 7047     		bx	lr
 1881              		.cfi_endproc
 1882              	.LFE79:
 1884              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1885              		.align	1
 1886              		.global	HAL_UART_DMAStop
 1887              		.syntax unified
 1888              		.thumb
 1889              		.thumb_func
 1890              		.fpu softvfp
ARM GAS  /tmp/ccRUQzex.s 			page 61


 1892              	HAL_UART_DMAStop:
 1893              	.LFB80:
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1894              		.loc 1 1567 0
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 16
 1897              		@ frame_needed = 1, uses_anonymous_args = 0
 1898 0000 80B5     		push	{r7, lr}
 1899              	.LCFI80:
 1900              		.cfi_def_cfa_offset 8
 1901              		.cfi_offset 7, -8
 1902              		.cfi_offset 14, -4
 1903 0002 84B0     		sub	sp, sp, #16
 1904              	.LCFI81:
 1905              		.cfi_def_cfa_offset 24
 1906 0004 00AF     		add	r7, sp, #0
 1907              	.LCFI82:
 1908              		.cfi_def_cfa_register 7
 1909 0006 7860     		str	r0, [r7, #4]
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1910              		.loc 1 1568 0
 1911 0008 0023     		movs	r3, #0
 1912 000a FB60     		str	r3, [r7, #12]
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      */
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1913              		.loc 1 1576 0
 1914 000c 7B68     		ldr	r3, [r7, #4]
 1915 000e 1B68     		ldr	r3, [r3]
 1916 0010 5B69     		ldr	r3, [r3, #20]
 1917 0012 03F08003 		and	r3, r3, #128
 1918 0016 002B     		cmp	r3, #0
 1919 0018 14BF     		ite	ne
 1920 001a 0123     		movne	r3, #1
 1921 001c 0023     		moveq	r3, #0
 1922 001e DBB2     		uxtb	r3, r3
 1923 0020 FB60     		str	r3, [r7, #12]
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1924              		.loc 1 1577 0
 1925 0022 7B68     		ldr	r3, [r7, #4]
 1926 0024 93F83D30 		ldrb	r3, [r3, #61]
 1927 0028 DBB2     		uxtb	r3, r3
 1928 002a 212B     		cmp	r3, #33
 1929 002c 16D1     		bne	.L89
ARM GAS  /tmp/ccRUQzex.s 			page 62


 1930              		.loc 1 1577 0 is_stmt 0 discriminator 1
 1931 002e FB68     		ldr	r3, [r7, #12]
 1932 0030 002B     		cmp	r3, #0
 1933 0032 13D0     		beq	.L89
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1934              		.loc 1 1579 0 is_stmt 1
 1935 0034 7B68     		ldr	r3, [r7, #4]
 1936 0036 1B68     		ldr	r3, [r3]
 1937 0038 7A68     		ldr	r2, [r7, #4]
 1938 003a 1268     		ldr	r2, [r2]
 1939 003c 5269     		ldr	r2, [r2, #20]
 1940 003e 22F08002 		bic	r2, r2, #128
 1941 0042 5A61     		str	r2, [r3, #20]
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 1942              		.loc 1 1582 0
 1943 0044 7B68     		ldr	r3, [r7, #4]
 1944 0046 5B6B     		ldr	r3, [r3, #52]
 1945 0048 002B     		cmp	r3, #0
 1946 004a 04D0     		beq	.L90
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 1947              		.loc 1 1584 0
 1948 004c 7B68     		ldr	r3, [r7, #4]
 1949 004e 5B6B     		ldr	r3, [r3, #52]
 1950 0050 1846     		mov	r0, r3
 1951 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 1952              	.L90:
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 1953              		.loc 1 1586 0
 1954 0056 7868     		ldr	r0, [r7, #4]
 1955 0058 FFF7FEFF 		bl	UART_EndTxTransfer
 1956              	.L89:
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1957              		.loc 1 1590 0
 1958 005c 7B68     		ldr	r3, [r7, #4]
 1959 005e 1B68     		ldr	r3, [r3]
 1960 0060 5B69     		ldr	r3, [r3, #20]
 1961 0062 03F04003 		and	r3, r3, #64
 1962 0066 002B     		cmp	r3, #0
 1963 0068 14BF     		ite	ne
 1964 006a 0123     		movne	r3, #1
 1965 006c 0023     		moveq	r3, #0
 1966 006e DBB2     		uxtb	r3, r3
 1967 0070 FB60     		str	r3, [r7, #12]
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1968              		.loc 1 1591 0
 1969 0072 7B68     		ldr	r3, [r7, #4]
 1970 0074 93F83E30 		ldrb	r3, [r3, #62]
 1971 0078 DBB2     		uxtb	r3, r3
 1972 007a 222B     		cmp	r3, #34
ARM GAS  /tmp/ccRUQzex.s 			page 63


 1973 007c 16D1     		bne	.L91
 1974              		.loc 1 1591 0 is_stmt 0 discriminator 1
 1975 007e FB68     		ldr	r3, [r7, #12]
 1976 0080 002B     		cmp	r3, #0
 1977 0082 13D0     		beq	.L91
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1978              		.loc 1 1593 0 is_stmt 1
 1979 0084 7B68     		ldr	r3, [r7, #4]
 1980 0086 1B68     		ldr	r3, [r3]
 1981 0088 7A68     		ldr	r2, [r7, #4]
 1982 008a 1268     		ldr	r2, [r2]
 1983 008c 5269     		ldr	r2, [r2, #20]
 1984 008e 22F04002 		bic	r2, r2, #64
 1985 0092 5A61     		str	r2, [r3, #20]
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 1986              		.loc 1 1596 0
 1987 0094 7B68     		ldr	r3, [r7, #4]
 1988 0096 9B6B     		ldr	r3, [r3, #56]
 1989 0098 002B     		cmp	r3, #0
 1990 009a 04D0     		beq	.L92
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 1991              		.loc 1 1598 0
 1992 009c 7B68     		ldr	r3, [r7, #4]
 1993 009e 9B6B     		ldr	r3, [r3, #56]
 1994 00a0 1846     		mov	r0, r3
 1995 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 1996              	.L92:
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 1997              		.loc 1 1600 0
 1998 00a6 7868     		ldr	r0, [r7, #4]
 1999 00a8 FFF7FEFF 		bl	UART_EndRxTransfer
 2000              	.L91:
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2001              		.loc 1 1603 0
 2002 00ac 0023     		movs	r3, #0
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2003              		.loc 1 1604 0
 2004 00ae 1846     		mov	r0, r3
 2005 00b0 1037     		adds	r7, r7, #16
 2006              	.LCFI83:
 2007              		.cfi_def_cfa_offset 8
 2008 00b2 BD46     		mov	sp, r7
 2009              	.LCFI84:
 2010              		.cfi_def_cfa_register 13
 2011              		@ sp needed
 2012 00b4 80BD     		pop	{r7, pc}
 2013              		.cfi_endproc
 2014              	.LFE80:
 2016              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 2017              		.align	1
ARM GAS  /tmp/ccRUQzex.s 			page 64


 2018              		.global	HAL_UARTEx_ReceiveToIdle
 2019              		.syntax unified
 2020              		.thumb
 2021              		.thumb_func
 2022              		.fpu softvfp
 2024              	HAL_UARTEx_ReceiveToIdle:
 2025              	.LFB81:
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data is re
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   HAL_OK is returned if reception is completed (expected number of data has been received
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         or if reception is stopped after IDLE event (less than the expected number of data has 
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         In this case, RxLen output parameter indicates number of data available in reception bu
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart   UART handle.
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param RxLen   Number of data elements finally received (could be lower than Size, in case rece
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2026              		.loc 1 1622 0
 2027              		.cfi_startproc
 2028              		@ args = 4, pretend = 0, frame = 32
 2029              		@ frame_needed = 1, uses_anonymous_args = 0
 2030 0000 80B5     		push	{r7, lr}
 2031              	.LCFI85:
 2032              		.cfi_def_cfa_offset 8
 2033              		.cfi_offset 7, -8
 2034              		.cfi_offset 14, -4
 2035 0002 88B0     		sub	sp, sp, #32
 2036              	.LCFI86:
 2037              		.cfi_def_cfa_offset 40
 2038 0004 00AF     		add	r7, sp, #0
 2039              	.LCFI87:
 2040              		.cfi_def_cfa_register 7
 2041 0006 F860     		str	r0, [r7, #12]
 2042 0008 B960     		str	r1, [r7, #8]
 2043 000a 3B60     		str	r3, [r7]
 2044 000c 1346     		mov	r3, r2	@ movhi
 2045 000e FB80     		strh	r3, [r7, #6]	@ movhi
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart;
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2046              		.loc 1 1628 0
 2047 0010 FB68     		ldr	r3, [r7, #12]
 2048 0012 93F83E30 		ldrb	r3, [r3, #62]
 2049 0016 DBB2     		uxtb	r3, r3
 2050 0018 202B     		cmp	r3, #32
 2051 001a 40F0C980 		bne	.L95
ARM GAS  /tmp/ccRUQzex.s 			page 65


1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2052              		.loc 1 1630 0
 2053 001e BB68     		ldr	r3, [r7, #8]
 2054 0020 002B     		cmp	r3, #0
 2055 0022 02D0     		beq	.L96
 2056              		.loc 1 1630 0 is_stmt 0 discriminator 1
 2057 0024 FB88     		ldrh	r3, [r7, #6]
 2058 0026 002B     		cmp	r3, #0
 2059 0028 01D1     		bne	.L97
 2060              	.L96:
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 2061              		.loc 1 1632 0 is_stmt 1
 2062 002a 0123     		movs	r3, #1
 2063 002c C1E0     		b	.L98
 2064              	.L97:
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 2065              		.loc 1 1635 0
 2066 002e FB68     		ldr	r3, [r7, #12]
 2067 0030 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2068 0034 012B     		cmp	r3, #1
 2069 0036 01D1     		bne	.L99
 2070              		.loc 1 1635 0 is_stmt 0 discriminator 1
 2071 0038 0223     		movs	r3, #2
 2072 003a BAE0     		b	.L98
 2073              	.L99:
 2074              		.loc 1 1635 0 discriminator 2
 2075 003c FB68     		ldr	r3, [r7, #12]
 2076 003e 0122     		movs	r2, #1
 2077 0040 83F83C20 		strb	r2, [r3, #60]
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2078              		.loc 1 1637 0 is_stmt 1 discriminator 2
 2079 0044 FB68     		ldr	r3, [r7, #12]
 2080 0046 0022     		movs	r2, #0
 2081 0048 1A64     		str	r2, [r3, #64]
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2082              		.loc 1 1638 0 discriminator 2
 2083 004a FB68     		ldr	r3, [r7, #12]
 2084 004c 2222     		movs	r2, #34
 2085 004e 83F83E20 		strb	r2, [r3, #62]
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2086              		.loc 1 1639 0 discriminator 2
 2087 0052 FB68     		ldr	r3, [r7, #12]
 2088 0054 0122     		movs	r2, #1
 2089 0056 1A63     		str	r2, [r3, #48]
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 2090              		.loc 1 1642 0 discriminator 2
 2091 0058 FFF7FEFF 		bl	HAL_GetTick
 2092 005c 7861     		str	r0, [r7, #20]
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize  = Size;
ARM GAS  /tmp/ccRUQzex.s 			page 66


 2093              		.loc 1 1644 0 discriminator 2
 2094 005e FB68     		ldr	r3, [r7, #12]
 2095 0060 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2096 0062 9A85     		strh	r2, [r3, #44]	@ movhi
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 2097              		.loc 1 1645 0 discriminator 2
 2098 0064 FB68     		ldr	r3, [r7, #12]
 2099 0066 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2100 0068 DA85     		strh	r2, [r3, #46]	@ movhi
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 2101              		.loc 1 1648 0 discriminator 2
 2102 006a FB68     		ldr	r3, [r7, #12]
 2103 006c 9B68     		ldr	r3, [r3, #8]
 2104 006e B3F5805F 		cmp	r3, #4096
 2105 0072 08D1     		bne	.L100
 2106              		.loc 1 1648 0 is_stmt 0 discriminator 1
 2107 0074 FB68     		ldr	r3, [r7, #12]
 2108 0076 1B69     		ldr	r3, [r3, #16]
 2109 0078 002B     		cmp	r3, #0
 2110 007a 04D1     		bne	.L100
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 2111              		.loc 1 1650 0 is_stmt 1
 2112 007c 0023     		movs	r3, #0
 2113 007e FB61     		str	r3, [r7, #28]
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 2114              		.loc 1 1651 0
 2115 0080 BB68     		ldr	r3, [r7, #8]
 2116 0082 BB61     		str	r3, [r7, #24]
 2117 0084 03E0     		b	.L101
 2118              	.L100:
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 2119              		.loc 1 1655 0
 2120 0086 BB68     		ldr	r3, [r7, #8]
 2121 0088 FB61     		str	r3, [r7, #28]
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 2122              		.loc 1 1656 0
 2123 008a 0023     		movs	r3, #0
 2124 008c BB61     		str	r3, [r7, #24]
 2125              	.L101:
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 2126              		.loc 1 1659 0
 2127 008e FB68     		ldr	r3, [r7, #12]
 2128 0090 0022     		movs	r2, #0
 2129 0092 83F83C20 		strb	r2, [r3, #60]
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Initialize output number of received elements */
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = 0U;
 2130              		.loc 1 1662 0
 2131 0096 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccRUQzex.s 			page 67


 2132 0098 0022     		movs	r2, #0
 2133 009a 1A80     		strh	r2, [r3]	@ movhi
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* as long as data have to be received */
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 2134              		.loc 1 1665 0
 2135 009c 74E0     		b	.L102
 2136              	.L111:
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if IDLE flag is set */
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 2137              		.loc 1 1668 0
 2138 009e FB68     		ldr	r3, [r7, #12]
 2139 00a0 1B68     		ldr	r3, [r3]
 2140 00a2 1B68     		ldr	r3, [r3]
 2141 00a4 03F01003 		and	r3, r3, #16
 2142 00a8 102B     		cmp	r3, #16
 2143 00aa 14D1     		bne	.L103
 2144              	.LBB3:
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Clear IDLE flag in ISR */
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2145              		.loc 1 1671 0
 2146 00ac 0023     		movs	r3, #0
 2147 00ae 3B61     		str	r3, [r7, #16]
 2148 00b0 FB68     		ldr	r3, [r7, #12]
 2149 00b2 1B68     		ldr	r3, [r3]
 2150 00b4 1B68     		ldr	r3, [r3]
 2151 00b6 3B61     		str	r3, [r7, #16]
 2152 00b8 FB68     		ldr	r3, [r7, #12]
 2153 00ba 1B68     		ldr	r3, [r3]
 2154 00bc 5B68     		ldr	r3, [r3, #4]
 2155 00be 3B61     		str	r3, [r7, #16]
 2156 00c0 3B69     		ldr	r3, [r7, #16]
 2157              	.LBE3:
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (*RxLen > 0U)
 2158              		.loc 1 1675 0
 2159 00c2 3B68     		ldr	r3, [r7]
 2160 00c4 1B88     		ldrh	r3, [r3]
 2161 00c6 002B     		cmp	r3, #0
 2162 00c8 05D0     		beq	.L103
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2163              		.loc 1 1677 0
 2164 00ca FB68     		ldr	r3, [r7, #12]
 2165 00cc 2022     		movs	r2, #32
 2166 00ce 83F83E20 		strb	r2, [r3, #62]
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_OK;
 2167              		.loc 1 1679 0
 2168 00d2 0023     		movs	r3, #0
 2169 00d4 6DE0     		b	.L98
 2170              	.L103:
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
ARM GAS  /tmp/ccRUQzex.s 			page 68


1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if RXNE flag is set */
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 2171              		.loc 1 1684 0
 2172 00d6 FB68     		ldr	r3, [r7, #12]
 2173 00d8 1B68     		ldr	r3, [r3]
 2174 00da 1B68     		ldr	r3, [r3]
 2175 00dc 03F02003 		and	r3, r3, #32
 2176 00e0 202B     		cmp	r3, #32
 2177 00e2 3CD1     		bne	.L104
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (pdata8bits == NULL)
 2178              		.loc 1 1686 0
 2179 00e4 FB69     		ldr	r3, [r7, #28]
 2180 00e6 002B     		cmp	r3, #0
 2181 00e8 0CD1     		bne	.L105
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 2182              		.loc 1 1688 0
 2183 00ea FB68     		ldr	r3, [r7, #12]
 2184 00ec 1B68     		ldr	r3, [r3]
 2185 00ee 5B68     		ldr	r3, [r3, #4]
 2186 00f0 9BB2     		uxth	r3, r3
 2187 00f2 C3F30803 		ubfx	r3, r3, #0, #9
 2188 00f6 9AB2     		uxth	r2, r3
 2189 00f8 BB69     		ldr	r3, [r7, #24]
 2190 00fa 1A80     		strh	r2, [r3]	@ movhi
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata16bits++;
 2191              		.loc 1 1689 0
 2192 00fc BB69     		ldr	r3, [r7, #24]
 2193 00fe 0233     		adds	r3, r3, #2
 2194 0100 BB61     		str	r3, [r7, #24]
 2195 0102 1FE0     		b	.L106
 2196              	.L105:
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_W
 2197              		.loc 1 1693 0
 2198 0104 FB68     		ldr	r3, [r7, #12]
 2199 0106 9B68     		ldr	r3, [r3, #8]
 2200 0108 B3F5805F 		cmp	r3, #4096
 2201 010c 07D0     		beq	.L107
 2202              		.loc 1 1693 0 is_stmt 0 discriminator 1
 2203 010e FB68     		ldr	r3, [r7, #12]
 2204 0110 9B68     		ldr	r3, [r3, #8]
 2205 0112 002B     		cmp	r3, #0
 2206 0114 0AD1     		bne	.L108
 2207              		.loc 1 1693 0 discriminator 2
 2208 0116 FB68     		ldr	r3, [r7, #12]
 2209 0118 1B69     		ldr	r3, [r3, #16]
 2210 011a 002B     		cmp	r3, #0
 2211 011c 06D1     		bne	.L108
 2212              	.L107:
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            {
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
ARM GAS  /tmp/ccRUQzex.s 			page 69


 2213              		.loc 1 1695 0 is_stmt 1
 2214 011e FB68     		ldr	r3, [r7, #12]
 2215 0120 1B68     		ldr	r3, [r3]
 2216 0122 5B68     		ldr	r3, [r3, #4]
 2217 0124 DAB2     		uxtb	r2, r3
 2218 0126 FB69     		ldr	r3, [r7, #28]
 2219 0128 1A70     		strb	r2, [r3]
 2220 012a 08E0     		b	.L109
 2221              	.L108:
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            }
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            else
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            {
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 2222              		.loc 1 1699 0
 2223 012c FB68     		ldr	r3, [r7, #12]
 2224 012e 1B68     		ldr	r3, [r3]
 2225 0130 5B68     		ldr	r3, [r3, #4]
 2226 0132 DBB2     		uxtb	r3, r3
 2227 0134 03F07F03 		and	r3, r3, #127
 2228 0138 DAB2     		uxtb	r2, r3
 2229 013a FB69     		ldr	r3, [r7, #28]
 2230 013c 1A70     		strb	r2, [r3]
 2231              	.L109:
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            }
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata8bits++;
 2232              		.loc 1 1702 0
 2233 013e FB69     		ldr	r3, [r7, #28]
 2234 0140 0133     		adds	r3, r3, #1
 2235 0142 FB61     		str	r3, [r7, #28]
 2236              	.L106:
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Increment number of received elements */
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *RxLen += 1U;
 2237              		.loc 1 1705 0
 2238 0144 3B68     		ldr	r3, [r7]
 2239 0146 1B88     		ldrh	r3, [r3]
 2240 0148 0133     		adds	r3, r3, #1
 2241 014a 9AB2     		uxth	r2, r3
 2242 014c 3B68     		ldr	r3, [r7]
 2243 014e 1A80     		strh	r2, [r3]	@ movhi
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount--;
 2244              		.loc 1 1706 0
 2245 0150 FB68     		ldr	r3, [r7, #12]
 2246 0152 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2247 0154 9BB2     		uxth	r3, r3
 2248 0156 013B     		subs	r3, r3, #1
 2249 0158 9AB2     		uxth	r2, r3
 2250 015a FB68     		ldr	r3, [r7, #12]
 2251 015c DA85     		strh	r2, [r3, #46]	@ movhi
 2252              	.L104:
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check for the Timeout */
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (Timeout != HAL_MAX_DELAY)
 2253              		.loc 1 1710 0
 2254 015e BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/ccRUQzex.s 			page 70


 2255 0160 B3F1FF3F 		cmp	r3, #-1
 2256 0164 10D0     		beq	.L102
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 2257              		.loc 1 1712 0
 2258 0166 FFF7FEFF 		bl	HAL_GetTick
 2259 016a 0246     		mov	r2, r0
 2260 016c 7B69     		ldr	r3, [r7, #20]
 2261 016e D21A     		subs	r2, r2, r3
 2262 0170 BB6A     		ldr	r3, [r7, #40]
 2263 0172 9A42     		cmp	r2, r3
 2264 0174 02D8     		bhi	.L110
 2265              		.loc 1 1712 0 is_stmt 0 discriminator 1
 2266 0176 BB6A     		ldr	r3, [r7, #40]
 2267 0178 002B     		cmp	r3, #0
 2268 017a 05D1     		bne	.L102
 2269              	.L110:
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2270              		.loc 1 1714 0 is_stmt 1
 2271 017c FB68     		ldr	r3, [r7, #12]
 2272 017e 2022     		movs	r2, #32
 2273 0180 83F83E20 		strb	r2, [r3, #62]
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2274              		.loc 1 1716 0
 2275 0184 0323     		movs	r3, #3
 2276 0186 14E0     		b	.L98
 2277              	.L102:
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2278              		.loc 1 1665 0
 2279 0188 FB68     		ldr	r3, [r7, #12]
 2280 018a DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2281 018c 9BB2     		uxth	r3, r3
 2282 018e 002B     		cmp	r3, #0
 2283 0190 85D1     		bne	.L111
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set number of received elements in output parameter : RxLen */
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 2284              		.loc 1 1722 0
 2285 0192 FB68     		ldr	r3, [r7, #12]
 2286 0194 9A8D     		ldrh	r2, [r3, #44]
 2287 0196 FB68     		ldr	r3, [r7, #12]
 2288 0198 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2289 019a 9BB2     		uxth	r3, r3
 2290 019c D31A     		subs	r3, r2, r3
 2291 019e 9AB2     		uxth	r2, r3
 2292 01a0 3B68     		ldr	r3, [r7]
 2293 01a2 1A80     		strh	r2, [r3]	@ movhi
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2294              		.loc 1 1724 0
 2295 01a4 FB68     		ldr	r3, [r7, #12]
 2296 01a6 2022     		movs	r2, #32
ARM GAS  /tmp/ccRUQzex.s 			page 71


 2297 01a8 83F83E20 		strb	r2, [r3, #62]
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 2298              		.loc 1 1726 0
 2299 01ac 0023     		movs	r3, #0
 2300 01ae 00E0     		b	.L98
 2301              	.L95:
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2302              		.loc 1 1730 0
 2303 01b0 0223     		movs	r3, #2
 2304              	.L98:
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2305              		.loc 1 1732 0
 2306 01b2 1846     		mov	r0, r3
 2307 01b4 2037     		adds	r7, r7, #32
 2308              	.LCFI88:
 2309              		.cfi_def_cfa_offset 8
 2310 01b6 BD46     		mov	sp, r7
 2311              	.LCFI89:
 2312              		.cfi_def_cfa_register 13
 2313              		@ sp needed
 2314 01b8 80BD     		pop	{r7, pc}
 2315              		.cfi_endproc
 2316              	.LFE81:
 2318              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 2319              		.align	1
 2320              		.global	HAL_UARTEx_ReceiveToIdle_IT
 2321              		.syntax unified
 2322              		.thumb
 2323              		.thumb_func
 2324              		.fpu softvfp
 2326              	HAL_UARTEx_ReceiveToIdle_IT:
 2327              	.LFB82:
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data is r
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to UART interrupts raised by RXNE and IDLE events. Callback is called at end of recepti
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         number of received data elements.
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2328              		.loc 1 1748 0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 24
 2331              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccRUQzex.s 			page 72


 2332 0000 80B5     		push	{r7, lr}
 2333              	.LCFI90:
 2334              		.cfi_def_cfa_offset 8
 2335              		.cfi_offset 7, -8
 2336              		.cfi_offset 14, -4
 2337 0002 86B0     		sub	sp, sp, #24
 2338              	.LCFI91:
 2339              		.cfi_def_cfa_offset 32
 2340 0004 00AF     		add	r7, sp, #0
 2341              	.LCFI92:
 2342              		.cfi_def_cfa_register 7
 2343 0006 F860     		str	r0, [r7, #12]
 2344 0008 B960     		str	r1, [r7, #8]
 2345 000a 1346     		mov	r3, r2
 2346 000c FB80     		strh	r3, [r7, #6]	@ movhi
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2347              		.loc 1 1752 0
 2348 000e FB68     		ldr	r3, [r7, #12]
 2349 0010 93F83E30 		ldrb	r3, [r3, #62]
 2350 0014 DBB2     		uxtb	r3, r3
 2351 0016 202B     		cmp	r3, #32
 2352 0018 3CD1     		bne	.L113
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2353              		.loc 1 1754 0
 2354 001a BB68     		ldr	r3, [r7, #8]
 2355 001c 002B     		cmp	r3, #0
 2356 001e 02D0     		beq	.L114
 2357              		.loc 1 1754 0 is_stmt 0 discriminator 1
 2358 0020 FB88     		ldrh	r3, [r7, #6]
 2359 0022 002B     		cmp	r3, #0
 2360 0024 01D1     		bne	.L115
 2361              	.L114:
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2362              		.loc 1 1756 0 is_stmt 1
 2363 0026 0123     		movs	r3, #1
 2364 0028 35E0     		b	.L116
 2365              	.L115:
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 2366              		.loc 1 1759 0
 2367 002a FB68     		ldr	r3, [r7, #12]
 2368 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2369 0030 012B     		cmp	r3, #1
 2370 0032 01D1     		bne	.L117
 2371              		.loc 1 1759 0 is_stmt 0 discriminator 1
 2372 0034 0223     		movs	r3, #2
 2373 0036 2EE0     		b	.L116
 2374              	.L117:
 2375              		.loc 1 1759 0 discriminator 2
 2376 0038 FB68     		ldr	r3, [r7, #12]
 2377 003a 0122     		movs	r2, #1
ARM GAS  /tmp/ccRUQzex.s 			page 73


 2378 003c 83F83C20 		strb	r2, [r3, #60]
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2379              		.loc 1 1762 0 is_stmt 1 discriminator 2
 2380 0040 FB68     		ldr	r3, [r7, #12]
 2381 0042 0122     		movs	r2, #1
 2382 0044 1A63     		str	r2, [r3, #48]
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 2383              		.loc 1 1764 0 discriminator 2
 2384 0046 FB88     		ldrh	r3, [r7, #6]
 2385 0048 1A46     		mov	r2, r3
 2386 004a B968     		ldr	r1, [r7, #8]
 2387 004c F868     		ldr	r0, [r7, #12]
 2388 004e FFF7FEFF 		bl	UART_Start_Receive_IT
 2389 0052 0346     		mov	r3, r0
 2390 0054 FB75     		strb	r3, [r7, #23]
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2391              		.loc 1 1767 0 discriminator 2
 2392 0056 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2393 0058 002B     		cmp	r3, #0
 2394 005a 19D1     		bne	.L118
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2395              		.loc 1 1769 0
 2396 005c FB68     		ldr	r3, [r7, #12]
 2397 005e 1B6B     		ldr	r3, [r3, #48]
 2398 0060 012B     		cmp	r3, #1
 2399 0062 13D1     		bne	.L119
 2400              	.LBB4:
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2401              		.loc 1 1771 0
 2402 0064 0023     		movs	r3, #0
 2403 0066 3B61     		str	r3, [r7, #16]
 2404 0068 FB68     		ldr	r3, [r7, #12]
 2405 006a 1B68     		ldr	r3, [r3]
 2406 006c 1B68     		ldr	r3, [r3]
 2407 006e 3B61     		str	r3, [r7, #16]
 2408 0070 FB68     		ldr	r3, [r7, #12]
 2409 0072 1B68     		ldr	r3, [r3]
 2410 0074 5B68     		ldr	r3, [r3, #4]
 2411 0076 3B61     		str	r3, [r7, #16]
 2412 0078 3B69     		ldr	r3, [r7, #16]
 2413              	.LBE4:
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 2414              		.loc 1 1772 0
 2415 007a FB68     		ldr	r3, [r7, #12]
 2416 007c 1B68     		ldr	r3, [r3]
 2417 007e FA68     		ldr	r2, [r7, #12]
 2418 0080 1268     		ldr	r2, [r2]
 2419 0082 D268     		ldr	r2, [r2, #12]
 2420 0084 42F01002 		orr	r2, r2, #16
 2421 0088 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 74


 2422 008a 01E0     		b	.L118
 2423              	.L119:
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
 2424              		.loc 1 1780 0
 2425 008c 0123     		movs	r3, #1
 2426 008e FB75     		strb	r3, [r7, #23]
 2427              	.L118:
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 2428              		.loc 1 1784 0
 2429 0090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2430 0092 00E0     		b	.L116
 2431              	.L113:
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2432              		.loc 1 1788 0
 2433 0094 0223     		movs	r3, #2
 2434              	.L116:
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2435              		.loc 1 1790 0
 2436 0096 1846     		mov	r0, r3
 2437 0098 1837     		adds	r7, r7, #24
 2438              	.LCFI93:
 2439              		.cfi_def_cfa_offset 8
 2440 009a BD46     		mov	sp, r7
 2441              	.LCFI94:
 2442              		.cfi_def_cfa_register 13
 2443              		@ sp needed
 2444 009c 80BD     		pop	{r7, pc}
 2445              		.cfi_endproc
 2446              	.LFE82:
 2448              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 2449              		.align	1
 2450              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 2451              		.syntax unified
 2452              		.thumb
 2453              		.thumb_func
 2454              		.fpu softvfp
 2456              	HAL_UARTEx_ReceiveToIdle_DMA:
 2457              	.LFB83:
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode till either the expected number of data is receive
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to DMA services, transferring automatically received data elements in user reception bu
ARM GAS  /tmp/ccRUQzex.s 			page 75


1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         calling registered callbacks at half/end of reception. UART IDLE events are also used t
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         reception phase as ended. In all cases, callback execution will indicate number of rece
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the parity bit (MSB position).
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2458              		.loc 1 1809 0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 24
 2461              		@ frame_needed = 1, uses_anonymous_args = 0
 2462 0000 80B5     		push	{r7, lr}
 2463              	.LCFI95:
 2464              		.cfi_def_cfa_offset 8
 2465              		.cfi_offset 7, -8
 2466              		.cfi_offset 14, -4
 2467 0002 86B0     		sub	sp, sp, #24
 2468              	.LCFI96:
 2469              		.cfi_def_cfa_offset 32
 2470 0004 00AF     		add	r7, sp, #0
 2471              	.LCFI97:
 2472              		.cfi_def_cfa_register 7
 2473 0006 F860     		str	r0, [r7, #12]
 2474 0008 B960     		str	r1, [r7, #8]
 2475 000a 1346     		mov	r3, r2
 2476 000c FB80     		strh	r3, [r7, #6]	@ movhi
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2477              		.loc 1 1813 0
 2478 000e FB68     		ldr	r3, [r7, #12]
 2479 0010 93F83E30 		ldrb	r3, [r3, #62]
 2480 0014 DBB2     		uxtb	r3, r3
 2481 0016 202B     		cmp	r3, #32
 2482 0018 3CD1     		bne	.L121
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2483              		.loc 1 1815 0
 2484 001a BB68     		ldr	r3, [r7, #8]
 2485 001c 002B     		cmp	r3, #0
 2486 001e 02D0     		beq	.L122
 2487              		.loc 1 1815 0 is_stmt 0 discriminator 1
 2488 0020 FB88     		ldrh	r3, [r7, #6]
 2489 0022 002B     		cmp	r3, #0
 2490 0024 01D1     		bne	.L123
 2491              	.L122:
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2492              		.loc 1 1817 0 is_stmt 1
ARM GAS  /tmp/ccRUQzex.s 			page 76


 2493 0026 0123     		movs	r3, #1
 2494 0028 35E0     		b	.L124
 2495              	.L123:
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
 2496              		.loc 1 1820 0
 2497 002a FB68     		ldr	r3, [r7, #12]
 2498 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2499 0030 012B     		cmp	r3, #1
 2500 0032 01D1     		bne	.L125
 2501              		.loc 1 1820 0 is_stmt 0 discriminator 1
 2502 0034 0223     		movs	r3, #2
 2503 0036 2EE0     		b	.L124
 2504              	.L125:
 2505              		.loc 1 1820 0 discriminator 2
 2506 0038 FB68     		ldr	r3, [r7, #12]
 2507 003a 0122     		movs	r2, #1
 2508 003c 83F83C20 		strb	r2, [r3, #60]
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2509              		.loc 1 1823 0 is_stmt 1 discriminator 2
 2510 0040 FB68     		ldr	r3, [r7, #12]
 2511 0042 0122     		movs	r2, #1
 2512 0044 1A63     		str	r2, [r3, #48]
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 2513              		.loc 1 1825 0 discriminator 2
 2514 0046 FB88     		ldrh	r3, [r7, #6]
 2515 0048 1A46     		mov	r2, r3
 2516 004a B968     		ldr	r1, [r7, #8]
 2517 004c F868     		ldr	r0, [r7, #12]
 2518 004e FFF7FEFF 		bl	UART_Start_Receive_DMA
 2519 0052 0346     		mov	r3, r0
 2520 0054 FB75     		strb	r3, [r7, #23]
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2521              		.loc 1 1828 0 discriminator 2
 2522 0056 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2523 0058 002B     		cmp	r3, #0
 2524 005a 19D1     		bne	.L126
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2525              		.loc 1 1830 0
 2526 005c FB68     		ldr	r3, [r7, #12]
 2527 005e 1B6B     		ldr	r3, [r3, #48]
 2528 0060 012B     		cmp	r3, #1
 2529 0062 13D1     		bne	.L127
 2530              	.LBB5:
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2531              		.loc 1 1832 0
 2532 0064 0023     		movs	r3, #0
 2533 0066 3B61     		str	r3, [r7, #16]
 2534 0068 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 77


 2535 006a 1B68     		ldr	r3, [r3]
 2536 006c 1B68     		ldr	r3, [r3]
 2537 006e 3B61     		str	r3, [r7, #16]
 2538 0070 FB68     		ldr	r3, [r7, #12]
 2539 0072 1B68     		ldr	r3, [r3]
 2540 0074 5B68     		ldr	r3, [r3, #4]
 2541 0076 3B61     		str	r3, [r7, #16]
 2542 0078 3B69     		ldr	r3, [r7, #16]
 2543              	.LBE5:
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 2544              		.loc 1 1833 0
 2545 007a FB68     		ldr	r3, [r7, #12]
 2546 007c 1B68     		ldr	r3, [r3]
 2547 007e FA68     		ldr	r2, [r7, #12]
 2548 0080 1268     		ldr	r2, [r2]
 2549 0082 D268     		ldr	r2, [r2, #12]
 2550 0084 42F01002 		orr	r2, r2, #16
 2551 0088 DA60     		str	r2, [r3, #12]
 2552 008a 01E0     		b	.L126
 2553              	.L127:
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
 2554              		.loc 1 1841 0
 2555 008c 0123     		movs	r3, #1
 2556 008e FB75     		strb	r3, [r7, #23]
 2557              	.L126:
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 2558              		.loc 1 1845 0
 2559 0090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2560 0092 00E0     		b	.L124
 2561              	.L121:
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2562              		.loc 1 1849 0
 2563 0094 0223     		movs	r3, #2
 2564              	.L124:
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2565              		.loc 1 1851 0
 2566 0096 1846     		mov	r0, r3
 2567 0098 1837     		adds	r7, r7, #24
 2568              	.LCFI98:
 2569              		.cfi_def_cfa_offset 8
 2570 009a BD46     		mov	sp, r7
 2571              	.LCFI99:
 2572              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccRUQzex.s 			page 78


 2573              		@ sp needed
 2574 009c 80BD     		pop	{r7, pc}
 2575              		.cfi_endproc
 2576              	.LFE83:
 2578              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2579              		.align	1
 2580              		.global	HAL_UART_Abort
 2581              		.syntax unified
 2582              		.thumb
 2583              		.thumb_func
 2584              		.fpu softvfp
 2586              	HAL_UART_Abort:
 2587              	.LFB84:
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2588              		.loc 1 1866 0
 2589              		.cfi_startproc
 2590              		@ args = 0, pretend = 0, frame = 8
 2591              		@ frame_needed = 1, uses_anonymous_args = 0
 2592 0000 80B5     		push	{r7, lr}
 2593              	.LCFI100:
 2594              		.cfi_def_cfa_offset 8
 2595              		.cfi_offset 7, -8
 2596              		.cfi_offset 14, -4
 2597 0002 82B0     		sub	sp, sp, #8
 2598              	.LCFI101:
 2599              		.cfi_def_cfa_offset 16
 2600 0004 00AF     		add	r7, sp, #0
 2601              	.LCFI102:
 2602              		.cfi_def_cfa_register 7
 2603 0006 7860     		str	r0, [r7, #4]
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2604              		.loc 1 1868 0
 2605 0008 7B68     		ldr	r3, [r7, #4]
 2606 000a 1B68     		ldr	r3, [r3]
 2607 000c 7A68     		ldr	r2, [r7, #4]
 2608 000e 1268     		ldr	r2, [r2]
 2609 0010 D268     		ldr	r2, [r2, #12]
 2610 0012 22F4F072 		bic	r2, r2, #480
 2611 0016 DA60     		str	r2, [r3, #12]
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2612              		.loc 1 1869 0
 2613 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 79


 2614 001a 1B68     		ldr	r3, [r3]
 2615 001c 7A68     		ldr	r2, [r7, #4]
 2616 001e 1268     		ldr	r2, [r2]
 2617 0020 5269     		ldr	r2, [r2, #20]
 2618 0022 22F00102 		bic	r2, r2, #1
 2619 0026 5A61     		str	r2, [r3, #20]
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2620              		.loc 1 1872 0
 2621 0028 7B68     		ldr	r3, [r7, #4]
 2622 002a 1B6B     		ldr	r3, [r3, #48]
 2623 002c 012B     		cmp	r3, #1
 2624 002e 07D1     		bne	.L129
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 2625              		.loc 1 1874 0
 2626 0030 7B68     		ldr	r3, [r7, #4]
 2627 0032 1B68     		ldr	r3, [r3]
 2628 0034 7A68     		ldr	r2, [r7, #4]
 2629 0036 1268     		ldr	r2, [r2]
 2630 0038 D268     		ldr	r2, [r2, #12]
 2631 003a 22F01002 		bic	r2, r2, #16
 2632 003e DA60     		str	r2, [r3, #12]
 2633              	.L129:
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2634              		.loc 1 1878 0
 2635 0040 7B68     		ldr	r3, [r7, #4]
 2636 0042 1B68     		ldr	r3, [r3]
 2637 0044 5B69     		ldr	r3, [r3, #20]
 2638 0046 03F08003 		and	r3, r3, #128
 2639 004a 002B     		cmp	r3, #0
 2640 004c 24D0     		beq	.L130
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2641              		.loc 1 1880 0
 2642 004e 7B68     		ldr	r3, [r7, #4]
 2643 0050 1B68     		ldr	r3, [r3]
 2644 0052 7A68     		ldr	r2, [r7, #4]
 2645 0054 1268     		ldr	r2, [r2]
 2646 0056 5269     		ldr	r2, [r2, #20]
 2647 0058 22F08002 		bic	r2, r2, #128
 2648 005c 5A61     		str	r2, [r3, #20]
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2649              		.loc 1 1883 0
 2650 005e 7B68     		ldr	r3, [r7, #4]
 2651 0060 5B6B     		ldr	r3, [r3, #52]
 2652 0062 002B     		cmp	r3, #0
 2653 0064 18D0     		beq	.L130
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
ARM GAS  /tmp/ccRUQzex.s 			page 80


1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2654              		.loc 1 1887 0
 2655 0066 7B68     		ldr	r3, [r7, #4]
 2656 0068 5B6B     		ldr	r3, [r3, #52]
 2657 006a 0022     		movs	r2, #0
 2658 006c 5A63     		str	r2, [r3, #52]
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2659              		.loc 1 1889 0
 2660 006e 7B68     		ldr	r3, [r7, #4]
 2661 0070 5B6B     		ldr	r3, [r3, #52]
 2662 0072 1846     		mov	r0, r3
 2663 0074 FFF7FEFF 		bl	HAL_DMA_Abort
 2664 0078 0346     		mov	r3, r0
 2665 007a 002B     		cmp	r3, #0
 2666 007c 0CD0     		beq	.L130
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2667              		.loc 1 1891 0
 2668 007e 7B68     		ldr	r3, [r7, #4]
 2669 0080 5B6B     		ldr	r3, [r3, #52]
 2670 0082 1846     		mov	r0, r3
 2671 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2672 0088 0346     		mov	r3, r0
 2673 008a 202B     		cmp	r3, #32
 2674 008c 04D1     		bne	.L130
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2675              		.loc 1 1894 0
 2676 008e 7B68     		ldr	r3, [r7, #4]
 2677 0090 1022     		movs	r2, #16
 2678 0092 1A64     		str	r2, [r3, #64]
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2679              		.loc 1 1896 0
 2680 0094 0323     		movs	r3, #3
 2681 0096 40E0     		b	.L131
 2682              	.L130:
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2683              		.loc 1 1903 0
 2684 0098 7B68     		ldr	r3, [r7, #4]
 2685 009a 1B68     		ldr	r3, [r3]
 2686 009c 5B69     		ldr	r3, [r3, #20]
 2687 009e 03F04003 		and	r3, r3, #64
 2688 00a2 002B     		cmp	r3, #0
 2689 00a4 24D0     		beq	.L132
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2690              		.loc 1 1905 0
 2691 00a6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 81


 2692 00a8 1B68     		ldr	r3, [r3]
 2693 00aa 7A68     		ldr	r2, [r7, #4]
 2694 00ac 1268     		ldr	r2, [r2]
 2695 00ae 5269     		ldr	r2, [r2, #20]
 2696 00b0 22F04002 		bic	r2, r2, #64
 2697 00b4 5A61     		str	r2, [r3, #20]
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2698              		.loc 1 1908 0
 2699 00b6 7B68     		ldr	r3, [r7, #4]
 2700 00b8 9B6B     		ldr	r3, [r3, #56]
 2701 00ba 002B     		cmp	r3, #0
 2702 00bc 18D0     		beq	.L132
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2703              		.loc 1 1912 0
 2704 00be 7B68     		ldr	r3, [r7, #4]
 2705 00c0 9B6B     		ldr	r3, [r3, #56]
 2706 00c2 0022     		movs	r2, #0
 2707 00c4 5A63     		str	r2, [r3, #52]
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2708              		.loc 1 1914 0
 2709 00c6 7B68     		ldr	r3, [r7, #4]
 2710 00c8 9B6B     		ldr	r3, [r3, #56]
 2711 00ca 1846     		mov	r0, r3
 2712 00cc FFF7FEFF 		bl	HAL_DMA_Abort
 2713 00d0 0346     		mov	r3, r0
 2714 00d2 002B     		cmp	r3, #0
 2715 00d4 0CD0     		beq	.L132
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2716              		.loc 1 1916 0
 2717 00d6 7B68     		ldr	r3, [r7, #4]
 2718 00d8 9B6B     		ldr	r3, [r3, #56]
 2719 00da 1846     		mov	r0, r3
 2720 00dc FFF7FEFF 		bl	HAL_DMA_GetError
 2721 00e0 0346     		mov	r3, r0
 2722 00e2 202B     		cmp	r3, #32
 2723 00e4 04D1     		bne	.L132
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2724              		.loc 1 1919 0
 2725 00e6 7B68     		ldr	r3, [r7, #4]
 2726 00e8 1022     		movs	r2, #16
 2727 00ea 1A64     		str	r2, [r3, #64]
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2728              		.loc 1 1921 0
 2729 00ec 0323     		movs	r3, #3
 2730 00ee 14E0     		b	.L131
 2731              	.L132:
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
ARM GAS  /tmp/ccRUQzex.s 			page 82


1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2732              		.loc 1 1928 0
 2733 00f0 7B68     		ldr	r3, [r7, #4]
 2734 00f2 0022     		movs	r2, #0
 2735 00f4 DA84     		strh	r2, [r3, #38]	@ movhi
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2736              		.loc 1 1929 0
 2737 00f6 7B68     		ldr	r3, [r7, #4]
 2738 00f8 0022     		movs	r2, #0
 2739 00fa DA85     		strh	r2, [r3, #46]	@ movhi
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2740              		.loc 1 1932 0
 2741 00fc 7B68     		ldr	r3, [r7, #4]
 2742 00fe 0022     		movs	r2, #0
 2743 0100 1A64     		str	r2, [r3, #64]
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2744              		.loc 1 1935 0
 2745 0102 7B68     		ldr	r3, [r7, #4]
 2746 0104 2022     		movs	r2, #32
 2747 0106 83F83E20 		strb	r2, [r3, #62]
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2748              		.loc 1 1936 0
 2749 010a 7B68     		ldr	r3, [r7, #4]
 2750 010c 2022     		movs	r2, #32
 2751 010e 83F83D20 		strb	r2, [r3, #61]
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2752              		.loc 1 1937 0
 2753 0112 7B68     		ldr	r3, [r7, #4]
 2754 0114 0022     		movs	r2, #0
 2755 0116 1A63     		str	r2, [r3, #48]
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2756              		.loc 1 1939 0
 2757 0118 0023     		movs	r3, #0
 2758              	.L131:
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2759              		.loc 1 1940 0
 2760 011a 1846     		mov	r0, r3
 2761 011c 0837     		adds	r7, r7, #8
 2762              	.LCFI103:
 2763              		.cfi_def_cfa_offset 8
 2764 011e BD46     		mov	sp, r7
 2765              	.LCFI104:
 2766              		.cfi_def_cfa_register 13
 2767              		@ sp needed
 2768 0120 80BD     		pop	{r7, pc}
 2769              		.cfi_endproc
 2770              	.LFE84:
ARM GAS  /tmp/ccRUQzex.s 			page 83


 2772              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2773              		.align	1
 2774              		.global	HAL_UART_AbortTransmit
 2775              		.syntax unified
 2776              		.thumb
 2777              		.thumb_func
 2778              		.fpu softvfp
 2780              	HAL_UART_AbortTransmit:
 2781              	.LFB85:
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2782              		.loc 1 1955 0
 2783              		.cfi_startproc
 2784              		@ args = 0, pretend = 0, frame = 8
 2785              		@ frame_needed = 1, uses_anonymous_args = 0
 2786 0000 80B5     		push	{r7, lr}
 2787              	.LCFI105:
 2788              		.cfi_def_cfa_offset 8
 2789              		.cfi_offset 7, -8
 2790              		.cfi_offset 14, -4
 2791 0002 82B0     		sub	sp, sp, #8
 2792              	.LCFI106:
 2793              		.cfi_def_cfa_offset 16
 2794 0004 00AF     		add	r7, sp, #0
 2795              	.LCFI107:
 2796              		.cfi_def_cfa_register 7
 2797 0006 7860     		str	r0, [r7, #4]
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2798              		.loc 1 1957 0
 2799 0008 7B68     		ldr	r3, [r7, #4]
 2800 000a 1B68     		ldr	r3, [r3]
 2801 000c 7A68     		ldr	r2, [r7, #4]
 2802 000e 1268     		ldr	r2, [r2]
 2803 0010 D268     		ldr	r2, [r2, #12]
 2804 0012 22F0C002 		bic	r2, r2, #192
 2805 0016 DA60     		str	r2, [r3, #12]
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2806              		.loc 1 1960 0
 2807 0018 7B68     		ldr	r3, [r7, #4]
 2808 001a 1B68     		ldr	r3, [r3]
 2809 001c 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccRUQzex.s 			page 84


 2810 001e 03F08003 		and	r3, r3, #128
 2811 0022 002B     		cmp	r3, #0
 2812 0024 24D0     		beq	.L134
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2813              		.loc 1 1962 0
 2814 0026 7B68     		ldr	r3, [r7, #4]
 2815 0028 1B68     		ldr	r3, [r3]
 2816 002a 7A68     		ldr	r2, [r7, #4]
 2817 002c 1268     		ldr	r2, [r2]
 2818 002e 5269     		ldr	r2, [r2, #20]
 2819 0030 22F08002 		bic	r2, r2, #128
 2820 0034 5A61     		str	r2, [r3, #20]
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2821              		.loc 1 1965 0
 2822 0036 7B68     		ldr	r3, [r7, #4]
 2823 0038 5B6B     		ldr	r3, [r3, #52]
 2824 003a 002B     		cmp	r3, #0
 2825 003c 18D0     		beq	.L134
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2826              		.loc 1 1969 0
 2827 003e 7B68     		ldr	r3, [r7, #4]
 2828 0040 5B6B     		ldr	r3, [r3, #52]
 2829 0042 0022     		movs	r2, #0
 2830 0044 5A63     		str	r2, [r3, #52]
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2831              		.loc 1 1971 0
 2832 0046 7B68     		ldr	r3, [r7, #4]
 2833 0048 5B6B     		ldr	r3, [r3, #52]
 2834 004a 1846     		mov	r0, r3
 2835 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2836 0050 0346     		mov	r3, r0
 2837 0052 002B     		cmp	r3, #0
 2838 0054 0CD0     		beq	.L134
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2839              		.loc 1 1973 0
 2840 0056 7B68     		ldr	r3, [r7, #4]
 2841 0058 5B6B     		ldr	r3, [r3, #52]
 2842 005a 1846     		mov	r0, r3
 2843 005c FFF7FEFF 		bl	HAL_DMA_GetError
 2844 0060 0346     		mov	r3, r0
 2845 0062 202B     		cmp	r3, #32
 2846 0064 04D1     		bne	.L134
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2847              		.loc 1 1976 0
 2848 0066 7B68     		ldr	r3, [r7, #4]
 2849 0068 1022     		movs	r2, #16
 2850 006a 1A64     		str	r2, [r3, #64]
ARM GAS  /tmp/ccRUQzex.s 			page 85


1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2851              		.loc 1 1978 0
 2852 006c 0323     		movs	r3, #3
 2853 006e 07E0     		b	.L135
 2854              	.L134:
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2855              		.loc 1 1985 0
 2856 0070 7B68     		ldr	r3, [r7, #4]
 2857 0072 0022     		movs	r2, #0
 2858 0074 DA84     		strh	r2, [r3, #38]	@ movhi
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2859              		.loc 1 1988 0
 2860 0076 7B68     		ldr	r3, [r7, #4]
 2861 0078 2022     		movs	r2, #32
 2862 007a 83F83D20 		strb	r2, [r3, #61]
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2863              		.loc 1 1990 0
 2864 007e 0023     		movs	r3, #0
 2865              	.L135:
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2866              		.loc 1 1991 0
 2867 0080 1846     		mov	r0, r3
 2868 0082 0837     		adds	r7, r7, #8
 2869              	.LCFI108:
 2870              		.cfi_def_cfa_offset 8
 2871 0084 BD46     		mov	sp, r7
 2872              	.LCFI109:
 2873              		.cfi_def_cfa_register 13
 2874              		@ sp needed
 2875 0086 80BD     		pop	{r7, pc}
 2876              		.cfi_endproc
 2877              	.LFE85:
 2879              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2880              		.align	1
 2881              		.global	HAL_UART_AbortReceive
 2882              		.syntax unified
 2883              		.thumb
 2884              		.thumb_func
 2885              		.fpu softvfp
 2887              	HAL_UART_AbortReceive:
 2888              	.LFB86:
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
ARM GAS  /tmp/ccRUQzex.s 			page 86


1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2889              		.loc 1 2006 0
 2890              		.cfi_startproc
 2891              		@ args = 0, pretend = 0, frame = 8
 2892              		@ frame_needed = 1, uses_anonymous_args = 0
 2893 0000 80B5     		push	{r7, lr}
 2894              	.LCFI110:
 2895              		.cfi_def_cfa_offset 8
 2896              		.cfi_offset 7, -8
 2897              		.cfi_offset 14, -4
 2898 0002 82B0     		sub	sp, sp, #8
 2899              	.LCFI111:
 2900              		.cfi_def_cfa_offset 16
 2901 0004 00AF     		add	r7, sp, #0
 2902              	.LCFI112:
 2903              		.cfi_def_cfa_register 7
 2904 0006 7860     		str	r0, [r7, #4]
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2905              		.loc 1 2008 0
 2906 0008 7B68     		ldr	r3, [r7, #4]
 2907 000a 1B68     		ldr	r3, [r3]
 2908 000c 7A68     		ldr	r2, [r7, #4]
 2909 000e 1268     		ldr	r2, [r2]
 2910 0010 D268     		ldr	r2, [r2, #12]
 2911 0012 22F49072 		bic	r2, r2, #288
 2912 0016 DA60     		str	r2, [r3, #12]
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2913              		.loc 1 2009 0
 2914 0018 7B68     		ldr	r3, [r7, #4]
 2915 001a 1B68     		ldr	r3, [r3]
 2916 001c 7A68     		ldr	r2, [r7, #4]
 2917 001e 1268     		ldr	r2, [r2]
 2918 0020 5269     		ldr	r2, [r2, #20]
 2919 0022 22F00102 		bic	r2, r2, #1
 2920 0026 5A61     		str	r2, [r3, #20]
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2921              		.loc 1 2012 0
 2922 0028 7B68     		ldr	r3, [r7, #4]
 2923 002a 1B6B     		ldr	r3, [r3, #48]
 2924 002c 012B     		cmp	r3, #1
 2925 002e 07D1     		bne	.L137
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 2926              		.loc 1 2014 0
 2927 0030 7B68     		ldr	r3, [r7, #4]
 2928 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccRUQzex.s 			page 87


 2929 0034 7A68     		ldr	r2, [r7, #4]
 2930 0036 1268     		ldr	r2, [r2]
 2931 0038 D268     		ldr	r2, [r2, #12]
 2932 003a 22F01002 		bic	r2, r2, #16
 2933 003e DA60     		str	r2, [r3, #12]
 2934              	.L137:
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2935              		.loc 1 2018 0
 2936 0040 7B68     		ldr	r3, [r7, #4]
 2937 0042 1B68     		ldr	r3, [r3]
 2938 0044 5B69     		ldr	r3, [r3, #20]
 2939 0046 03F04003 		and	r3, r3, #64
 2940 004a 002B     		cmp	r3, #0
 2941 004c 24D0     		beq	.L138
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2942              		.loc 1 2020 0
 2943 004e 7B68     		ldr	r3, [r7, #4]
 2944 0050 1B68     		ldr	r3, [r3]
 2945 0052 7A68     		ldr	r2, [r7, #4]
 2946 0054 1268     		ldr	r2, [r2]
 2947 0056 5269     		ldr	r2, [r2, #20]
 2948 0058 22F04002 		bic	r2, r2, #64
 2949 005c 5A61     		str	r2, [r3, #20]
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2950              		.loc 1 2023 0
 2951 005e 7B68     		ldr	r3, [r7, #4]
 2952 0060 9B6B     		ldr	r3, [r3, #56]
 2953 0062 002B     		cmp	r3, #0
 2954 0064 18D0     		beq	.L138
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2955              		.loc 1 2027 0
 2956 0066 7B68     		ldr	r3, [r7, #4]
 2957 0068 9B6B     		ldr	r3, [r3, #56]
 2958 006a 0022     		movs	r2, #0
 2959 006c 5A63     		str	r2, [r3, #52]
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2960              		.loc 1 2029 0
 2961 006e 7B68     		ldr	r3, [r7, #4]
 2962 0070 9B6B     		ldr	r3, [r3, #56]
 2963 0072 1846     		mov	r0, r3
 2964 0074 FFF7FEFF 		bl	HAL_DMA_Abort
 2965 0078 0346     		mov	r3, r0
 2966 007a 002B     		cmp	r3, #0
 2967 007c 0CD0     		beq	.L138
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2968              		.loc 1 2031 0
ARM GAS  /tmp/ccRUQzex.s 			page 88


 2969 007e 7B68     		ldr	r3, [r7, #4]
 2970 0080 9B6B     		ldr	r3, [r3, #56]
 2971 0082 1846     		mov	r0, r3
 2972 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2973 0088 0346     		mov	r3, r0
 2974 008a 202B     		cmp	r3, #32
 2975 008c 04D1     		bne	.L138
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2976              		.loc 1 2034 0
 2977 008e 7B68     		ldr	r3, [r7, #4]
 2978 0090 1022     		movs	r2, #16
 2979 0092 1A64     		str	r2, [r3, #64]
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2980              		.loc 1 2036 0
 2981 0094 0323     		movs	r3, #3
 2982 0096 0AE0     		b	.L139
 2983              	.L138:
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Rx transfer counter */
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2984              		.loc 1 2043 0
 2985 0098 7B68     		ldr	r3, [r7, #4]
 2986 009a 0022     		movs	r2, #0
 2987 009c DA85     		strh	r2, [r3, #46]	@ movhi
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2988              		.loc 1 2046 0
 2989 009e 7B68     		ldr	r3, [r7, #4]
 2990 00a0 2022     		movs	r2, #32
 2991 00a2 83F83E20 		strb	r2, [r3, #62]
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2992              		.loc 1 2047 0
 2993 00a6 7B68     		ldr	r3, [r7, #4]
 2994 00a8 0022     		movs	r2, #0
 2995 00aa 1A63     		str	r2, [r3, #48]
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2996              		.loc 1 2049 0
 2997 00ac 0023     		movs	r3, #0
 2998              	.L139:
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2999              		.loc 1 2050 0
 3000 00ae 1846     		mov	r0, r3
 3001 00b0 0837     		adds	r7, r7, #8
 3002              	.LCFI113:
 3003              		.cfi_def_cfa_offset 8
 3004 00b2 BD46     		mov	sp, r7
 3005              	.LCFI114:
 3006              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccRUQzex.s 			page 89


 3007              		@ sp needed
 3008 00b4 80BD     		pop	{r7, pc}
 3009              		.cfi_endproc
 3010              	.LFE86:
 3012              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 3013              		.align	1
 3014              		.global	HAL_UART_Abort_IT
 3015              		.syntax unified
 3016              		.thumb
 3017              		.thumb_func
 3018              		.fpu softvfp
 3020              	HAL_UART_Abort_IT:
 3021              	.LFB87:
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3022              		.loc 1 2067 0
 3023              		.cfi_startproc
 3024              		@ args = 0, pretend = 0, frame = 16
 3025              		@ frame_needed = 1, uses_anonymous_args = 0
 3026 0000 80B5     		push	{r7, lr}
 3027              	.LCFI115:
 3028              		.cfi_def_cfa_offset 8
 3029              		.cfi_offset 7, -8
 3030              		.cfi_offset 14, -4
 3031 0002 84B0     		sub	sp, sp, #16
 3032              	.LCFI116:
 3033              		.cfi_def_cfa_offset 24
 3034 0004 00AF     		add	r7, sp, #0
 3035              	.LCFI117:
 3036              		.cfi_def_cfa_register 7
 3037 0006 7860     		str	r0, [r7, #4]
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 3038              		.loc 1 2068 0
 3039 0008 0123     		movs	r3, #1
 3040 000a FB60     		str	r3, [r7, #12]
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 3041              		.loc 1 2071 0
 3042 000c 7B68     		ldr	r3, [r7, #4]
 3043 000e 1B68     		ldr	r3, [r3]
 3044 0010 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 90


 3045 0012 1268     		ldr	r2, [r2]
 3046 0014 D268     		ldr	r2, [r2, #12]
 3047 0016 22F4F072 		bic	r2, r2, #480
 3048 001a DA60     		str	r2, [r3, #12]
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3049              		.loc 1 2072 0
 3050 001c 7B68     		ldr	r3, [r7, #4]
 3051 001e 1B68     		ldr	r3, [r3]
 3052 0020 7A68     		ldr	r2, [r7, #4]
 3053 0022 1268     		ldr	r2, [r2]
 3054 0024 5269     		ldr	r2, [r2, #20]
 3055 0026 22F00102 		bic	r2, r2, #1
 3056 002a 5A61     		str	r2, [r3, #20]
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3057              		.loc 1 2075 0
 3058 002c 7B68     		ldr	r3, [r7, #4]
 3059 002e 1B6B     		ldr	r3, [r3, #48]
 3060 0030 012B     		cmp	r3, #1
 3061 0032 07D1     		bne	.L141
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3062              		.loc 1 2077 0
 3063 0034 7B68     		ldr	r3, [r7, #4]
 3064 0036 1B68     		ldr	r3, [r3]
 3065 0038 7A68     		ldr	r2, [r7, #4]
 3066 003a 1268     		ldr	r2, [r2]
 3067 003c D268     		ldr	r2, [r2, #12]
 3068 003e 22F01002 		bic	r2, r2, #16
 3069 0042 DA60     		str	r2, [r3, #12]
 3070              	.L141:
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      before any call to DMA Abort functions */
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 3071              		.loc 1 2083 0
 3072 0044 7B68     		ldr	r3, [r7, #4]
 3073 0046 5B6B     		ldr	r3, [r3, #52]
 3074 0048 002B     		cmp	r3, #0
 3075 004a 0FD0     		beq	.L142
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3076              		.loc 1 2087 0
 3077 004c 7B68     		ldr	r3, [r7, #4]
 3078 004e 1B68     		ldr	r3, [r3]
 3079 0050 5B69     		ldr	r3, [r3, #20]
 3080 0052 03F08003 		and	r3, r3, #128
 3081 0056 002B     		cmp	r3, #0
 3082 0058 04D0     		beq	.L143
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 3083              		.loc 1 2089 0
ARM GAS  /tmp/ccRUQzex.s 			page 91


 3084 005a 7B68     		ldr	r3, [r7, #4]
 3085 005c 5B6B     		ldr	r3, [r3, #52]
 3086 005e 404A     		ldr	r2, .L152
 3087 0060 5A63     		str	r2, [r3, #52]
 3088 0062 03E0     		b	.L142
 3089              	.L143:
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3090              		.loc 1 2093 0
 3091 0064 7B68     		ldr	r3, [r7, #4]
 3092 0066 5B6B     		ldr	r3, [r3, #52]
 3093 0068 0022     		movs	r2, #0
 3094 006a 5A63     		str	r2, [r3, #52]
 3095              	.L142:
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 3096              		.loc 1 2097 0
 3097 006c 7B68     		ldr	r3, [r7, #4]
 3098 006e 9B6B     		ldr	r3, [r3, #56]
 3099 0070 002B     		cmp	r3, #0
 3100 0072 0FD0     		beq	.L144
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3101              		.loc 1 2101 0
 3102 0074 7B68     		ldr	r3, [r7, #4]
 3103 0076 1B68     		ldr	r3, [r3]
 3104 0078 5B69     		ldr	r3, [r3, #20]
 3105 007a 03F04003 		and	r3, r3, #64
 3106 007e 002B     		cmp	r3, #0
 3107 0080 04D0     		beq	.L145
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 3108              		.loc 1 2103 0
 3109 0082 7B68     		ldr	r3, [r7, #4]
 3110 0084 9B6B     		ldr	r3, [r3, #56]
 3111 0086 374A     		ldr	r2, .L152+4
 3112 0088 5A63     		str	r2, [r3, #52]
 3113 008a 03E0     		b	.L144
 3114              	.L145:
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3115              		.loc 1 2107 0
 3116 008c 7B68     		ldr	r3, [r7, #4]
 3117 008e 9B6B     		ldr	r3, [r3, #56]
 3118 0090 0022     		movs	r2, #0
 3119 0092 5A63     		str	r2, [r3, #52]
 3120              	.L144:
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
ARM GAS  /tmp/ccRUQzex.s 			page 92


2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3121              		.loc 1 2112 0
 3122 0094 7B68     		ldr	r3, [r7, #4]
 3123 0096 1B68     		ldr	r3, [r3]
 3124 0098 5B69     		ldr	r3, [r3, #20]
 3125 009a 03F08003 		and	r3, r3, #128
 3126 009e 002B     		cmp	r3, #0
 3127 00a0 1AD0     		beq	.L146
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3128              		.loc 1 2115 0
 3129 00a2 7B68     		ldr	r3, [r7, #4]
 3130 00a4 1B68     		ldr	r3, [r3]
 3131 00a6 7A68     		ldr	r2, [r7, #4]
 3132 00a8 1268     		ldr	r2, [r2]
 3133 00aa 5269     		ldr	r2, [r2, #20]
 3134 00ac 22F08002 		bic	r2, r2, #128
 3135 00b0 5A61     		str	r2, [r3, #20]
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3136              		.loc 1 2118 0
 3137 00b2 7B68     		ldr	r3, [r7, #4]
 3138 00b4 5B6B     		ldr	r3, [r3, #52]
 3139 00b6 002B     		cmp	r3, #0
 3140 00b8 0ED0     		beq	.L146
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 3141              		.loc 1 2124 0
 3142 00ba 7B68     		ldr	r3, [r7, #4]
 3143 00bc 5B6B     		ldr	r3, [r3, #52]
 3144 00be 1846     		mov	r0, r3
 3145 00c0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3146 00c4 0346     		mov	r3, r0
 3147 00c6 002B     		cmp	r3, #0
 3148 00c8 04D0     		beq	.L147
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 3149              		.loc 1 2126 0
 3150 00ca 7B68     		ldr	r3, [r7, #4]
 3151 00cc 5B6B     		ldr	r3, [r3, #52]
 3152 00ce 0022     		movs	r2, #0
 3153 00d0 5A63     		str	r2, [r3, #52]
 3154 00d2 01E0     		b	.L146
 3155              	.L147:
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 3156              		.loc 1 2130 0
ARM GAS  /tmp/ccRUQzex.s 			page 93


 3157 00d4 0023     		movs	r3, #0
 3158 00d6 FB60     		str	r3, [r7, #12]
 3159              	.L146:
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3160              		.loc 1 2136 0
 3161 00d8 7B68     		ldr	r3, [r7, #4]
 3162 00da 1B68     		ldr	r3, [r3]
 3163 00dc 5B69     		ldr	r3, [r3, #20]
 3164 00de 03F04003 		and	r3, r3, #64
 3165 00e2 002B     		cmp	r3, #0
 3166 00e4 1CD0     		beq	.L148
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3167              		.loc 1 2138 0
 3168 00e6 7B68     		ldr	r3, [r7, #4]
 3169 00e8 1B68     		ldr	r3, [r3]
 3170 00ea 7A68     		ldr	r2, [r7, #4]
 3171 00ec 1268     		ldr	r2, [r2]
 3172 00ee 5269     		ldr	r2, [r2, #20]
 3173 00f0 22F04002 		bic	r2, r2, #64
 3174 00f4 5A61     		str	r2, [r3, #20]
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3175              		.loc 1 2141 0
 3176 00f6 7B68     		ldr	r3, [r7, #4]
 3177 00f8 9B6B     		ldr	r3, [r3, #56]
 3178 00fa 002B     		cmp	r3, #0
 3179 00fc 10D0     		beq	.L148
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3180              		.loc 1 2147 0
 3181 00fe 7B68     		ldr	r3, [r7, #4]
 3182 0100 9B6B     		ldr	r3, [r3, #56]
 3183 0102 1846     		mov	r0, r3
 3184 0104 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3185 0108 0346     		mov	r3, r0
 3186 010a 002B     		cmp	r3, #0
 3187 010c 06D0     		beq	.L149
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 3188              		.loc 1 2149 0
 3189 010e 7B68     		ldr	r3, [r7, #4]
 3190 0110 9B6B     		ldr	r3, [r3, #56]
 3191 0112 0022     		movs	r2, #0
 3192 0114 5A63     		str	r2, [r3, #52]
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
 3193              		.loc 1 2150 0
ARM GAS  /tmp/ccRUQzex.s 			page 94


 3194 0116 0123     		movs	r3, #1
 3195 0118 FB60     		str	r3, [r7, #12]
 3196 011a 01E0     		b	.L148
 3197              	.L149:
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 3198              		.loc 1 2154 0
 3199 011c 0023     		movs	r3, #0
 3200 011e FB60     		str	r3, [r7, #12]
 3201              	.L148:
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (AbortCplt == 0x01U)
 3202              		.loc 1 2160 0
 3203 0120 FB68     		ldr	r3, [r7, #12]
 3204 0122 012B     		cmp	r3, #1
 3205 0124 16D1     		bne	.L150
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 3206              		.loc 1 2163 0
 3207 0126 7B68     		ldr	r3, [r7, #4]
 3208 0128 0022     		movs	r2, #0
 3209 012a DA84     		strh	r2, [r3, #38]	@ movhi
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 3210              		.loc 1 2164 0
 3211 012c 7B68     		ldr	r3, [r7, #4]
 3212 012e 0022     		movs	r2, #0
 3213 0130 DA85     		strh	r2, [r3, #46]	@ movhi
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset ErrorCode */
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 3214              		.loc 1 2167 0
 3215 0132 7B68     		ldr	r3, [r7, #4]
 3216 0134 0022     		movs	r2, #0
 3217 0136 1A64     		str	r2, [r3, #64]
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 3218              		.loc 1 2170 0
 3219 0138 7B68     		ldr	r3, [r7, #4]
 3220 013a 2022     		movs	r2, #32
 3221 013c 83F83D20 		strb	r2, [r3, #61]
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3222              		.loc 1 2171 0
 3223 0140 7B68     		ldr	r3, [r7, #4]
 3224 0142 2022     		movs	r2, #32
 3225 0144 83F83E20 		strb	r2, [r3, #62]
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3226              		.loc 1 2172 0
 3227 0148 7B68     		ldr	r3, [r7, #4]
 3228 014a 0022     		movs	r2, #0
ARM GAS  /tmp/ccRUQzex.s 			page 95


 3229 014c 1A63     		str	r2, [r3, #48]
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort complete callback */
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 3230              		.loc 1 2180 0
 3231 014e 7868     		ldr	r0, [r7, #4]
 3232 0150 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3233              	.L150:
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3234              		.loc 1 2184 0
 3235 0154 0023     		movs	r3, #0
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3236              		.loc 1 2185 0
 3237 0156 1846     		mov	r0, r3
 3238 0158 1037     		adds	r7, r7, #16
 3239              	.LCFI118:
 3240              		.cfi_def_cfa_offset 8
 3241 015a BD46     		mov	sp, r7
 3242              	.LCFI119:
 3243              		.cfi_def_cfa_register 13
 3244              		@ sp needed
 3245 015c 80BD     		pop	{r7, pc}
 3246              	.L153:
 3247 015e 00BF     		.align	2
 3248              	.L152:
 3249 0160 00000000 		.word	UART_DMATxAbortCallback
 3250 0164 00000000 		.word	UART_DMARxAbortCallback
 3251              		.cfi_endproc
 3252              	.LFE87:
 3254              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 3255              		.align	1
 3256              		.global	HAL_UART_AbortTransmit_IT
 3257              		.syntax unified
 3258              		.thumb
 3259              		.thumb_func
 3260              		.fpu softvfp
 3262              	HAL_UART_AbortTransmit_IT:
 3263              	.LFB88:
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
ARM GAS  /tmp/ccRUQzex.s 			page 96


2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3264              		.loc 1 2202 0
 3265              		.cfi_startproc
 3266              		@ args = 0, pretend = 0, frame = 8
 3267              		@ frame_needed = 1, uses_anonymous_args = 0
 3268 0000 80B5     		push	{r7, lr}
 3269              	.LCFI120:
 3270              		.cfi_def_cfa_offset 8
 3271              		.cfi_offset 7, -8
 3272              		.cfi_offset 14, -4
 3273 0002 82B0     		sub	sp, sp, #8
 3274              	.LCFI121:
 3275              		.cfi_def_cfa_offset 16
 3276 0004 00AF     		add	r7, sp, #0
 3277              	.LCFI122:
 3278              		.cfi_def_cfa_register 7
 3279 0006 7860     		str	r0, [r7, #4]
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 3280              		.loc 1 2204 0
 3281 0008 7B68     		ldr	r3, [r7, #4]
 3282 000a 1B68     		ldr	r3, [r3]
 3283 000c 7A68     		ldr	r2, [r7, #4]
 3284 000e 1268     		ldr	r2, [r2]
 3285 0010 D268     		ldr	r2, [r2, #12]
 3286 0012 22F0C002 		bic	r2, r2, #192
 3287 0016 DA60     		str	r2, [r3, #12]
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3288              		.loc 1 2207 0
 3289 0018 7B68     		ldr	r3, [r7, #4]
 3290 001a 1B68     		ldr	r3, [r3]
 3291 001c 5B69     		ldr	r3, [r3, #20]
 3292 001e 03F08003 		and	r3, r3, #128
 3293 0022 002B     		cmp	r3, #0
 3294 0024 2AD0     		beq	.L155
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3295              		.loc 1 2209 0
 3296 0026 7B68     		ldr	r3, [r7, #4]
 3297 0028 1B68     		ldr	r3, [r3]
 3298 002a 7A68     		ldr	r2, [r7, #4]
 3299 002c 1268     		ldr	r2, [r2]
 3300 002e 5269     		ldr	r2, [r2, #20]
 3301 0030 22F08002 		bic	r2, r2, #128
 3302 0034 5A61     		str	r2, [r3, #20]
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3303              		.loc 1 2212 0
 3304 0036 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 97


 3305 0038 5B6B     		ldr	r3, [r3, #52]
 3306 003a 002B     		cmp	r3, #0
 3307 003c 13D0     		beq	.L156
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 3308              		.loc 1 2216 0
 3309 003e 7B68     		ldr	r3, [r7, #4]
 3310 0040 5B6B     		ldr	r3, [r3, #52]
 3311 0042 164A     		ldr	r2, .L161
 3312 0044 5A63     		str	r2, [r3, #52]
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 3313              		.loc 1 2219 0
 3314 0046 7B68     		ldr	r3, [r7, #4]
 3315 0048 5B6B     		ldr	r3, [r3, #52]
 3316 004a 1846     		mov	r0, r3
 3317 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3318 0050 0346     		mov	r3, r0
 3319 0052 002B     		cmp	r3, #0
 3320 0054 1CD0     		beq	.L159
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 3321              		.loc 1 2222 0
 3322 0056 7B68     		ldr	r3, [r7, #4]
 3323 0058 5B6B     		ldr	r3, [r3, #52]
 3324 005a 5B6B     		ldr	r3, [r3, #52]
 3325 005c 7A68     		ldr	r2, [r7, #4]
 3326 005e 526B     		ldr	r2, [r2, #52]
 3327 0060 1046     		mov	r0, r2
 3328 0062 9847     		blx	r3
 3329              	.LVL0:
 3330 0064 14E0     		b	.L159
 3331              	.L156:
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Tx transfer counter */
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
 3332              		.loc 1 2228 0
 3333 0066 7B68     		ldr	r3, [r7, #4]
 3334 0068 0022     		movs	r2, #0
 3335 006a DA84     		strh	r2, [r3, #38]	@ movhi
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 3336              		.loc 1 2231 0
 3337 006c 7B68     		ldr	r3, [r7, #4]
 3338 006e 2022     		movs	r2, #32
 3339 0070 83F83D20 		strb	r2, [r3, #61]
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccRUQzex.s 			page 98


2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 3340              		.loc 1 2239 0
 3341 0074 7868     		ldr	r0, [r7, #4]
 3342 0076 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3343 007a 09E0     		b	.L159
 3344              	.L155:
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx transfer counter */
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 3345              		.loc 1 2246 0
 3346 007c 7B68     		ldr	r3, [r7, #4]
 3347 007e 0022     		movs	r2, #0
 3348 0080 DA84     		strh	r2, [r3, #38]	@ movhi
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 3349              		.loc 1 2249 0
 3350 0082 7B68     		ldr	r3, [r7, #4]
 3351 0084 2022     		movs	r2, #32
 3352 0086 83F83D20 		strb	r2, [r3, #61]
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 3353              		.loc 1 2257 0
 3354 008a 7868     		ldr	r0, [r7, #4]
 3355 008c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3356              	.L159:
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3357              		.loc 1 2261 0
 3358 0090 0023     		movs	r3, #0
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3359              		.loc 1 2262 0
 3360 0092 1846     		mov	r0, r3
 3361 0094 0837     		adds	r7, r7, #8
 3362              	.LCFI123:
 3363              		.cfi_def_cfa_offset 8
 3364 0096 BD46     		mov	sp, r7
 3365              	.LCFI124:
 3366              		.cfi_def_cfa_register 13
 3367              		@ sp needed
 3368 0098 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccRUQzex.s 			page 99


 3369              	.L162:
 3370 009a 00BF     		.align	2
 3371              	.L161:
 3372 009c 00000000 		.word	UART_DMATxOnlyAbortCallback
 3373              		.cfi_endproc
 3374              	.LFE88:
 3376              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 3377              		.align	1
 3378              		.global	HAL_UART_AbortReceive_IT
 3379              		.syntax unified
 3380              		.thumb
 3381              		.thumb_func
 3382              		.fpu softvfp
 3384              	HAL_UART_AbortReceive_IT:
 3385              	.LFB89:
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3386              		.loc 1 2279 0
 3387              		.cfi_startproc
 3388              		@ args = 0, pretend = 0, frame = 8
 3389              		@ frame_needed = 1, uses_anonymous_args = 0
 3390 0000 80B5     		push	{r7, lr}
 3391              	.LCFI125:
 3392              		.cfi_def_cfa_offset 8
 3393              		.cfi_offset 7, -8
 3394              		.cfi_offset 14, -4
 3395 0002 82B0     		sub	sp, sp, #8
 3396              	.LCFI126:
 3397              		.cfi_def_cfa_offset 16
 3398 0004 00AF     		add	r7, sp, #0
 3399              	.LCFI127:
 3400              		.cfi_def_cfa_register 7
 3401 0006 7860     		str	r0, [r7, #4]
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3402              		.loc 1 2281 0
 3403 0008 7B68     		ldr	r3, [r7, #4]
 3404 000a 1B68     		ldr	r3, [r3]
 3405 000c 7A68     		ldr	r2, [r7, #4]
 3406 000e 1268     		ldr	r2, [r2]
 3407 0010 D268     		ldr	r2, [r2, #12]
 3408 0012 22F49072 		bic	r2, r2, #288
ARM GAS  /tmp/ccRUQzex.s 			page 100


 3409 0016 DA60     		str	r2, [r3, #12]
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3410              		.loc 1 2282 0
 3411 0018 7B68     		ldr	r3, [r7, #4]
 3412 001a 1B68     		ldr	r3, [r3]
 3413 001c 7A68     		ldr	r2, [r7, #4]
 3414 001e 1268     		ldr	r2, [r2]
 3415 0020 5269     		ldr	r2, [r2, #20]
 3416 0022 22F00102 		bic	r2, r2, #1
 3417 0026 5A61     		str	r2, [r3, #20]
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3418              		.loc 1 2285 0
 3419 0028 7B68     		ldr	r3, [r7, #4]
 3420 002a 1B6B     		ldr	r3, [r3, #48]
 3421 002c 012B     		cmp	r3, #1
 3422 002e 07D1     		bne	.L164
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3423              		.loc 1 2287 0
 3424 0030 7B68     		ldr	r3, [r7, #4]
 3425 0032 1B68     		ldr	r3, [r3]
 3426 0034 7A68     		ldr	r2, [r7, #4]
 3427 0036 1268     		ldr	r2, [r2]
 3428 0038 D268     		ldr	r2, [r2, #12]
 3429 003a 22F01002 		bic	r2, r2, #16
 3430 003e DA60     		str	r2, [r3, #12]
 3431              	.L164:
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3432              		.loc 1 2291 0
 3433 0040 7B68     		ldr	r3, [r7, #4]
 3434 0042 1B68     		ldr	r3, [r3]
 3435 0044 5B69     		ldr	r3, [r3, #20]
 3436 0046 03F04003 		and	r3, r3, #64
 3437 004a 002B     		cmp	r3, #0
 3438 004c 2DD0     		beq	.L165
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3439              		.loc 1 2293 0
 3440 004e 7B68     		ldr	r3, [r7, #4]
 3441 0050 1B68     		ldr	r3, [r3]
 3442 0052 7A68     		ldr	r2, [r7, #4]
 3443 0054 1268     		ldr	r2, [r2]
 3444 0056 5269     		ldr	r2, [r2, #20]
 3445 0058 22F04002 		bic	r2, r2, #64
 3446 005c 5A61     		str	r2, [r3, #20]
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3447              		.loc 1 2296 0
 3448 005e 7B68     		ldr	r3, [r7, #4]
 3449 0060 9B6B     		ldr	r3, [r3, #56]
 3450 0062 002B     		cmp	r3, #0
ARM GAS  /tmp/ccRUQzex.s 			page 101


 3451 0064 13D0     		beq	.L166
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 3452              		.loc 1 2300 0
 3453 0066 7B68     		ldr	r3, [r7, #4]
 3454 0068 9B6B     		ldr	r3, [r3, #56]
 3455 006a 194A     		ldr	r2, .L171
 3456 006c 5A63     		str	r2, [r3, #52]
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3457              		.loc 1 2303 0
 3458 006e 7B68     		ldr	r3, [r7, #4]
 3459 0070 9B6B     		ldr	r3, [r3, #56]
 3460 0072 1846     		mov	r0, r3
 3461 0074 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3462 0078 0346     		mov	r3, r0
 3463 007a 002B     		cmp	r3, #0
 3464 007c 22D0     		beq	.L169
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3465              		.loc 1 2306 0
 3466 007e 7B68     		ldr	r3, [r7, #4]
 3467 0080 9B6B     		ldr	r3, [r3, #56]
 3468 0082 5B6B     		ldr	r3, [r3, #52]
 3469 0084 7A68     		ldr	r2, [r7, #4]
 3470 0086 926B     		ldr	r2, [r2, #56]
 3471 0088 1046     		mov	r0, r2
 3472 008a 9847     		blx	r3
 3473              	.LVL1:
 3474 008c 1AE0     		b	.L169
 3475              	.L166:
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Rx transfer counter */
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
 3476              		.loc 1 2312 0
 3477 008e 7B68     		ldr	r3, [r7, #4]
 3478 0090 0022     		movs	r2, #0
 3479 0092 DA85     		strh	r2, [r3, #46]	@ movhi
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 3480              		.loc 1 2315 0
 3481 0094 7B68     		ldr	r3, [r7, #4]
 3482 0096 2022     		movs	r2, #32
 3483 0098 83F83E20 		strb	r2, [r3, #62]
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3484              		.loc 1 2316 0
 3485 009c 7B68     		ldr	r3, [r7, #4]
 3486 009e 0022     		movs	r2, #0
 3487 00a0 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccRUQzex.s 			page 102


2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 3488              		.loc 1 2324 0
 3489 00a2 7868     		ldr	r0, [r7, #4]
 3490 00a4 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3491 00a8 0CE0     		b	.L169
 3492              	.L165:
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Rx transfer counter */
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 3493              		.loc 1 2331 0
 3494 00aa 7B68     		ldr	r3, [r7, #4]
 3495 00ac 0022     		movs	r2, #0
 3496 00ae DA85     		strh	r2, [r3, #46]	@ movhi
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3497              		.loc 1 2334 0
 3498 00b0 7B68     		ldr	r3, [r7, #4]
 3499 00b2 2022     		movs	r2, #32
 3500 00b4 83F83E20 		strb	r2, [r3, #62]
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3501              		.loc 1 2335 0
 3502 00b8 7B68     		ldr	r3, [r7, #4]
 3503 00ba 0022     		movs	r2, #0
 3504 00bc 1A63     		str	r2, [r3, #48]
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 3505              		.loc 1 2343 0
 3506 00be 7868     		ldr	r0, [r7, #4]
 3507 00c0 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3508              	.L169:
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3509              		.loc 1 2347 0
 3510 00c4 0023     		movs	r3, #0
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3511              		.loc 1 2348 0
 3512 00c6 1846     		mov	r0, r3
ARM GAS  /tmp/ccRUQzex.s 			page 103


 3513 00c8 0837     		adds	r7, r7, #8
 3514              	.LCFI128:
 3515              		.cfi_def_cfa_offset 8
 3516 00ca BD46     		mov	sp, r7
 3517              	.LCFI129:
 3518              		.cfi_def_cfa_register 13
 3519              		@ sp needed
 3520 00cc 80BD     		pop	{r7, pc}
 3521              	.L172:
 3522 00ce 00BF     		.align	2
 3523              	.L171:
 3524 00d0 00000000 		.word	UART_DMARxOnlyAbortCallback
 3525              		.cfi_endproc
 3526              	.LFE89:
 3528              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 3529              		.align	1
 3530              		.global	HAL_UART_IRQHandler
 3531              		.syntax unified
 3532              		.thumb
 3533              		.thumb_func
 3534              		.fpu softvfp
 3536              	HAL_UART_IRQHandler:
 3537              	.LFB90:
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3538              		.loc 1 2357 0
 3539              		.cfi_startproc
 3540              		@ args = 0, pretend = 0, frame = 40
 3541              		@ frame_needed = 1, uses_anonymous_args = 0
 3542 0000 80B5     		push	{r7, lr}
 3543              	.LCFI130:
 3544              		.cfi_def_cfa_offset 8
 3545              		.cfi_offset 7, -8
 3546              		.cfi_offset 14, -4
 3547 0002 8AB0     		sub	sp, sp, #40
 3548              	.LCFI131:
 3549              		.cfi_def_cfa_offset 48
 3550 0004 00AF     		add	r7, sp, #0
 3551              	.LCFI132:
 3552              		.cfi_def_cfa_register 7
 3553 0006 7860     		str	r0, [r7, #4]
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 3554              		.loc 1 2358 0
 3555 0008 7B68     		ldr	r3, [r7, #4]
 3556 000a 1B68     		ldr	r3, [r3]
 3557 000c 1B68     		ldr	r3, [r3]
 3558 000e 7B62     		str	r3, [r7, #36]
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 3559              		.loc 1 2359 0
 3560 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 104


 3561 0012 1B68     		ldr	r3, [r3]
 3562 0014 DB68     		ldr	r3, [r3, #12]
 3563 0016 3B62     		str	r3, [r7, #32]
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 3564              		.loc 1 2360 0
 3565 0018 7B68     		ldr	r3, [r7, #4]
 3566 001a 1B68     		ldr	r3, [r3]
 3567 001c 5B69     		ldr	r3, [r3, #20]
 3568 001e FB61     		str	r3, [r7, #28]
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 3569              		.loc 1 2361 0
 3570 0020 0023     		movs	r3, #0
 3571 0022 BB61     		str	r3, [r7, #24]
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 3572              		.loc 1 2362 0
 3573 0024 0023     		movs	r3, #0
 3574 0026 7B61     		str	r3, [r7, #20]
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If no error occurs */
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 3575              		.loc 1 2365 0
 3576 0028 7B6A     		ldr	r3, [r7, #36]
 3577 002a 03F00F03 		and	r3, r3, #15
 3578 002e BB61     		str	r3, [r7, #24]
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (errorflags == RESET)
 3579              		.loc 1 2366 0
 3580 0030 BB69     		ldr	r3, [r7, #24]
 3581 0032 002B     		cmp	r3, #0
 3582 0034 0DD1     		bne	.L174
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3583              		.loc 1 2369 0
 3584 0036 7B6A     		ldr	r3, [r7, #36]
 3585 0038 03F02003 		and	r3, r3, #32
 3586 003c 002B     		cmp	r3, #0
 3587 003e 08D0     		beq	.L174
 3588              		.loc 1 2369 0 is_stmt 0 discriminator 1
 3589 0040 3B6A     		ldr	r3, [r7, #32]
 3590 0042 03F02003 		and	r3, r3, #32
 3591 0046 002B     		cmp	r3, #0
 3592 0048 03D0     		beq	.L174
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       UART_Receive_IT(huart);
 3593              		.loc 1 2371 0 is_stmt 1
 3594 004a 7868     		ldr	r0, [r7, #4]
 3595 004c FFF7FEFF 		bl	UART_Receive_IT
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 3596              		.loc 1 2372 0
 3597 0050 7CE1     		b	.L173
 3598              	.L174:
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If some errors occur */
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
 3599              		.loc 1 2377 0
ARM GAS  /tmp/ccRUQzex.s 			page 105


 3600 0052 BB69     		ldr	r3, [r7, #24]
 3601 0054 002B     		cmp	r3, #0
 3602 0056 00F0B180 		beq	.L176
 3603              		.loc 1 2377 0 is_stmt 0 discriminator 1
 3604 005a FB69     		ldr	r3, [r7, #28]
 3605 005c 03F00103 		and	r3, r3, #1
 3606 0060 002B     		cmp	r3, #0
 3607 0062 05D1     		bne	.L177
 3608              		.loc 1 2377 0 discriminator 2
 3609 0064 3B6A     		ldr	r3, [r7, #32]
 3610 0066 03F49073 		and	r3, r3, #288
 3611 006a 002B     		cmp	r3, #0
 3612 006c 00F0A680 		beq	.L176
 3613              	.L177:
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 3614              		.loc 1 2380 0 is_stmt 1
 3615 0070 7B6A     		ldr	r3, [r7, #36]
 3616 0072 03F00103 		and	r3, r3, #1
 3617 0076 002B     		cmp	r3, #0
 3618 0078 0AD0     		beq	.L178
 3619              		.loc 1 2380 0 is_stmt 0 discriminator 1
 3620 007a 3B6A     		ldr	r3, [r7, #32]
 3621 007c 03F48073 		and	r3, r3, #256
 3622 0080 002B     		cmp	r3, #0
 3623 0082 05D0     		beq	.L178
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 3624              		.loc 1 2382 0 is_stmt 1
 3625 0084 7B68     		ldr	r3, [r7, #4]
 3626 0086 1B6C     		ldr	r3, [r3, #64]
 3627 0088 43F00102 		orr	r2, r3, #1
 3628 008c 7B68     		ldr	r3, [r7, #4]
 3629 008e 1A64     		str	r2, [r3, #64]
 3630              	.L178:
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3631              		.loc 1 2386 0
 3632 0090 7B6A     		ldr	r3, [r7, #36]
 3633 0092 03F00403 		and	r3, r3, #4
 3634 0096 002B     		cmp	r3, #0
 3635 0098 0AD0     		beq	.L179
 3636              		.loc 1 2386 0 is_stmt 0 discriminator 1
 3637 009a FB69     		ldr	r3, [r7, #28]
 3638 009c 03F00103 		and	r3, r3, #1
 3639 00a0 002B     		cmp	r3, #0
 3640 00a2 05D0     		beq	.L179
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3641              		.loc 1 2388 0 is_stmt 1
 3642 00a4 7B68     		ldr	r3, [r7, #4]
 3643 00a6 1B6C     		ldr	r3, [r3, #64]
 3644 00a8 43F00202 		orr	r2, r3, #2
 3645 00ac 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 106


 3646 00ae 1A64     		str	r2, [r3, #64]
 3647              	.L179:
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3648              		.loc 1 2392 0
 3649 00b0 7B6A     		ldr	r3, [r7, #36]
 3650 00b2 03F00203 		and	r3, r3, #2
 3651 00b6 002B     		cmp	r3, #0
 3652 00b8 0AD0     		beq	.L180
 3653              		.loc 1 2392 0 is_stmt 0 discriminator 1
 3654 00ba FB69     		ldr	r3, [r7, #28]
 3655 00bc 03F00103 		and	r3, r3, #1
 3656 00c0 002B     		cmp	r3, #0
 3657 00c2 05D0     		beq	.L180
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3658              		.loc 1 2394 0 is_stmt 1
 3659 00c4 7B68     		ldr	r3, [r7, #4]
 3660 00c6 1B6C     		ldr	r3, [r3, #64]
 3661 00c8 43F00402 		orr	r2, r3, #4
 3662 00cc 7B68     		ldr	r3, [r7, #4]
 3663 00ce 1A64     		str	r2, [r3, #64]
 3664              	.L180:
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its
 3665              		.loc 1 2398 0
 3666 00d0 7B6A     		ldr	r3, [r7, #36]
 3667 00d2 03F00803 		and	r3, r3, #8
 3668 00d6 002B     		cmp	r3, #0
 3669 00d8 0FD0     		beq	.L181
 3670              		.loc 1 2398 0 is_stmt 0 discriminator 1
 3671 00da 3B6A     		ldr	r3, [r7, #32]
 3672 00dc 03F02003 		and	r3, r3, #32
 3673 00e0 002B     		cmp	r3, #0
 3674 00e2 04D1     		bne	.L182
 3675              		.loc 1 2398 0 discriminator 2
 3676 00e4 FB69     		ldr	r3, [r7, #28]
 3677 00e6 03F00103 		and	r3, r3, #1
 3678 00ea 002B     		cmp	r3, #0
 3679 00ec 05D0     		beq	.L181
 3680              	.L182:
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3681              		.loc 1 2400 0 is_stmt 1
 3682 00ee 7B68     		ldr	r3, [r7, #4]
 3683 00f0 1B6C     		ldr	r3, [r3, #64]
 3684 00f2 43F00802 		orr	r2, r3, #8
 3685 00f6 7B68     		ldr	r3, [r7, #4]
 3686 00f8 1A64     		str	r2, [r3, #64]
 3687              	.L181:
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
ARM GAS  /tmp/ccRUQzex.s 			page 107


2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 3688              		.loc 1 2404 0
 3689 00fa 7B68     		ldr	r3, [r7, #4]
 3690 00fc 1B6C     		ldr	r3, [r3, #64]
 3691 00fe 002B     		cmp	r3, #0
 3692 0100 00F01F81 		beq	.L198
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3693              		.loc 1 2407 0
 3694 0104 7B6A     		ldr	r3, [r7, #36]
 3695 0106 03F02003 		and	r3, r3, #32
 3696 010a 002B     		cmp	r3, #0
 3697 010c 07D0     		beq	.L184
 3698              		.loc 1 2407 0 is_stmt 0 discriminator 1
 3699 010e 3B6A     		ldr	r3, [r7, #32]
 3700 0110 03F02003 		and	r3, r3, #32
 3701 0114 002B     		cmp	r3, #0
 3702 0116 02D0     		beq	.L184
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_Receive_IT(huart);
 3703              		.loc 1 2409 0 is_stmt 1
 3704 0118 7868     		ldr	r0, [r7, #4]
 3705 011a FFF7FEFF 		bl	UART_Receive_IT
 3706              	.L184:
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          consider error as blocking */
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 3707              		.loc 1 2414 0
 3708 011e 7B68     		ldr	r3, [r7, #4]
 3709 0120 1B68     		ldr	r3, [r3]
 3710 0122 5B69     		ldr	r3, [r3, #20]
 3711 0124 03F04003 		and	r3, r3, #64
 3712 0128 002B     		cmp	r3, #0
 3713 012a 14BF     		ite	ne
 3714 012c 0123     		movne	r3, #1
 3715 012e 0023     		moveq	r3, #0
 3716 0130 DBB2     		uxtb	r3, r3
 3717 0132 7B61     		str	r3, [r7, #20]
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 3718              		.loc 1 2415 0
 3719 0134 7B68     		ldr	r3, [r7, #4]
 3720 0136 1B6C     		ldr	r3, [r3, #64]
 3721 0138 03F00803 		and	r3, r3, #8
 3722 013c 002B     		cmp	r3, #0
 3723 013e 02D1     		bne	.L185
 3724              		.loc 1 2415 0 is_stmt 0 discriminator 1
 3725 0140 7B69     		ldr	r3, [r7, #20]
 3726 0142 002B     		cmp	r3, #0
 3727 0144 31D0     		beq	.L186
 3728              	.L185:
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
ARM GAS  /tmp/ccRUQzex.s 			page 108


2420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3729              		.loc 1 2420 0 is_stmt 1
 3730 0146 7868     		ldr	r0, [r7, #4]
 3731 0148 FFF7FEFF 		bl	UART_EndRxTransfer
2421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3732              		.loc 1 2423 0
 3733 014c 7B68     		ldr	r3, [r7, #4]
 3734 014e 1B68     		ldr	r3, [r3]
 3735 0150 5B69     		ldr	r3, [r3, #20]
 3736 0152 03F04003 		and	r3, r3, #64
 3737 0156 002B     		cmp	r3, #0
 3738 0158 23D0     		beq	.L187
2424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3739              		.loc 1 2425 0
 3740 015a 7B68     		ldr	r3, [r7, #4]
 3741 015c 1B68     		ldr	r3, [r3]
 3742 015e 7A68     		ldr	r2, [r7, #4]
 3743 0160 1268     		ldr	r2, [r2]
 3744 0162 5269     		ldr	r2, [r2, #20]
 3745 0164 22F04002 		bic	r2, r2, #64
 3746 0168 5A61     		str	r2, [r3, #20]
2426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if (huart->hdmarx != NULL)
 3747              		.loc 1 2428 0
 3748 016a 7B68     		ldr	r3, [r7, #4]
 3749 016c 9B6B     		ldr	r3, [r3, #56]
 3750 016e 002B     		cmp	r3, #0
 3751 0170 13D0     		beq	.L188
2429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3752              		.loc 1 2432 0
 3753 0172 7B68     		ldr	r3, [r7, #4]
 3754 0174 9B6B     		ldr	r3, [r3, #56]
 3755 0176 774A     		ldr	r2, .L202
 3756 0178 5A63     		str	r2, [r3, #52]
2433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3757              		.loc 1 2433 0
 3758 017a 7B68     		ldr	r3, [r7, #4]
 3759 017c 9B6B     		ldr	r3, [r3, #56]
 3760 017e 1846     		mov	r0, r3
 3761 0180 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3762 0184 0346     		mov	r3, r0
 3763 0186 002B     		cmp	r3, #0
 3764 0188 16D0     		beq	.L199
2434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             {
2435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3765              		.loc 1 2436 0
 3766 018a 7B68     		ldr	r3, [r7, #4]
 3767 018c 9B6B     		ldr	r3, [r3, #56]
 3768 018e 5B6B     		ldr	r3, [r3, #52]
ARM GAS  /tmp/ccRUQzex.s 			page 109


 3769 0190 7A68     		ldr	r2, [r7, #4]
 3770 0192 926B     		ldr	r2, [r2, #56]
 3771 0194 1046     		mov	r0, r2
 3772 0196 9847     		blx	r3
 3773              	.LVL2:
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3774              		.loc 1 2423 0
 3775 0198 0EE0     		b	.L199
 3776              	.L188:
2437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             }
2438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
2440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Call user error callback */
2442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call registered error callback*/
2444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->ErrorCallback(huart);
2445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call legacy weak error callback*/
2447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 3777              		.loc 1 2447 0
 3778 019a 7868     		ldr	r0, [r7, #4]
 3779 019c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3780              		.loc 1 2423 0
 3781 01a0 0AE0     		b	.L199
 3782              	.L187:
2448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
2452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Call user error callback */
2454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call registered error callback*/
2456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCallback(huart);
2457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call legacy weak error callback*/
2459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3783              		.loc 1 2459 0
 3784 01a2 7868     		ldr	r0, [r7, #4]
 3785 01a4 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3786              		.loc 1 2423 0
 3787 01a8 06E0     		b	.L199
 3788              	.L186:
2460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error is notified to user through user error callback */
2467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered error callback*/
2469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback(huart);
2470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
ARM GAS  /tmp/ccRUQzex.s 			page 110


2471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak error callback*/
2472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3789              		.loc 1 2472 0
 3790 01aa 7868     		ldr	r0, [r7, #4]
 3791 01ac FFF7FEFF 		bl	HAL_UART_ErrorCallback
2473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 3792              		.loc 1 2475 0
 3793 01b0 7B68     		ldr	r3, [r7, #4]
 3794 01b2 0022     		movs	r2, #0
 3795 01b4 1A64     		str	r2, [r3, #64]
2476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 3796              		.loc 1 2478 0
 3797 01b6 C4E0     		b	.L198
 3798              	.L199:
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 3799              		.loc 1 2423 0
 3800 01b8 00BF     		nop
 3801              		.loc 1 2478 0
 3802 01ba C2E0     		b	.L198
 3803              	.L176:
2479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
2480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
2482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : */
2483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3804              		.loc 1 2483 0
 3805 01bc 7B68     		ldr	r3, [r7, #4]
 3806 01be 1B6B     		ldr	r3, [r3, #48]
 3807 01c0 012B     		cmp	r3, #1
 3808 01c2 40F0A180 		bne	.L192
2484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       &&((isrflags & USART_SR_IDLE) != 0U)
 3809              		.loc 1 2484 0
 3810 01c6 7B6A     		ldr	r3, [r7, #36]
 3811 01c8 03F01003 		and	r3, r3, #16
 3812 01cc 002B     		cmp	r3, #0
 3813 01ce 00F09B80 		beq	.L192
2485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       &&((cr1its & USART_SR_IDLE) != 0U))
 3814              		.loc 1 2485 0
 3815 01d2 3B6A     		ldr	r3, [r7, #32]
 3816 01d4 03F01003 		and	r3, r3, #16
 3817 01d8 002B     		cmp	r3, #0
 3818 01da 00F09580 		beq	.L192
 3819              	.LBB6:
2486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_IDLEFLAG(huart);
 3820              		.loc 1 2487 0
 3821 01de 0023     		movs	r3, #0
 3822 01e0 FB60     		str	r3, [r7, #12]
 3823 01e2 7B68     		ldr	r3, [r7, #4]
 3824 01e4 1B68     		ldr	r3, [r3]
 3825 01e6 1B68     		ldr	r3, [r3]
 3826 01e8 FB60     		str	r3, [r7, #12]
 3827 01ea 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 111


 3828 01ec 1B68     		ldr	r3, [r3]
 3829 01ee 5B68     		ldr	r3, [r3, #4]
 3830 01f0 FB60     		str	r3, [r7, #12]
 3831 01f2 FB68     		ldr	r3, [r7, #12]
 3832              	.LBE6:
2488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check if DMA mode is enabled in UART */
2490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3833              		.loc 1 2490 0
 3834 01f4 7B68     		ldr	r3, [r7, #4]
 3835 01f6 1B68     		ldr	r3, [r3]
 3836 01f8 5B69     		ldr	r3, [r3, #20]
 3837 01fa 03F04003 		and	r3, r3, #64
 3838 01fe 002B     		cmp	r3, #0
 3839 0200 4ED0     		beq	.L193
 3840              	.LBB7:
2491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode enabled */
2493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing,
2494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          (DMA cplt callback will be called).
2495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 3841              		.loc 1 2496 0
 3842 0202 7B68     		ldr	r3, [r7, #4]
 3843 0204 9B6B     		ldr	r3, [r3, #56]
 3844 0206 1B68     		ldr	r3, [r3]
 3845 0208 5B68     		ldr	r3, [r3, #4]
 3846 020a 7B82     		strh	r3, [r7, #18]	@ movhi
2497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (  (nb_remaining_rx_data > 0U)
 3847              		.loc 1 2497 0
 3848 020c 7B8A     		ldrh	r3, [r7, #18]
 3849 020e 002B     		cmp	r3, #0
 3850 0210 00F09980 		beq	.L200
2498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           &&(nb_remaining_rx_data < huart->RxXferSize))
 3851              		.loc 1 2498 0
 3852 0214 7B68     		ldr	r3, [r7, #4]
 3853 0216 9B8D     		ldrh	r3, [r3, #44]
 3854 0218 7A8A     		ldrh	r2, [r7, #18]
 3855 021a 9A42     		cmp	r2, r3
 3856 021c 80F09380 		bcs	.L200
2499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Reception is not complete */
2501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount = nb_remaining_rx_data;
 3857              		.loc 1 2501 0
 3858 0220 7B68     		ldr	r3, [r7, #4]
 3859 0222 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 3860 0224 DA85     		strh	r2, [r3, #46]	@ movhi
2502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In Normal mode, end DMA xfer and HAL UART Rx process*/
2504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 3861              		.loc 1 2504 0
 3862 0226 7B68     		ldr	r3, [r7, #4]
 3863 0228 9B6B     		ldr	r3, [r3, #56]
 3864 022a 9B69     		ldr	r3, [r3, #24]
 3865 022c 202B     		cmp	r3, #32
 3866 022e 2BD0     		beq	.L195
2505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
ARM GAS  /tmp/ccRUQzex.s 			page 112


2506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 3867              		.loc 1 2507 0
 3868 0230 7B68     		ldr	r3, [r7, #4]
 3869 0232 1B68     		ldr	r3, [r3]
 3870 0234 7A68     		ldr	r2, [r7, #4]
 3871 0236 1268     		ldr	r2, [r2]
 3872 0238 D268     		ldr	r2, [r2, #12]
 3873 023a 22F48072 		bic	r2, r2, #256
 3874 023e DA60     		str	r2, [r3, #12]
2508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3875              		.loc 1 2508 0
 3876 0240 7B68     		ldr	r3, [r7, #4]
 3877 0242 1B68     		ldr	r3, [r3]
 3878 0244 7A68     		ldr	r2, [r7, #4]
 3879 0246 1268     		ldr	r2, [r2]
 3880 0248 5269     		ldr	r2, [r2, #20]
 3881 024a 22F00102 		bic	r2, r2, #1
 3882 024e 5A61     		str	r2, [r3, #20]
2509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the UART CR3 register */
2512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3883              		.loc 1 2512 0
 3884 0250 7B68     		ldr	r3, [r7, #4]
 3885 0252 1B68     		ldr	r3, [r3]
 3886 0254 7A68     		ldr	r2, [r7, #4]
 3887 0256 1268     		ldr	r2, [r2]
 3888 0258 5269     		ldr	r2, [r2, #20]
 3889 025a 22F04002 		bic	r2, r2, #64
 3890 025e 5A61     		str	r2, [r3, #20]
2513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* At end of Rx process, restore huart->RxState to Ready */
2515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 3891              		.loc 1 2515 0
 3892 0260 7B68     		ldr	r3, [r7, #4]
 3893 0262 2022     		movs	r2, #32
 3894 0264 83F83E20 		strb	r2, [r3, #62]
2516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3895              		.loc 1 2516 0
 3896 0268 7B68     		ldr	r3, [r7, #4]
 3897 026a 0022     		movs	r2, #0
 3898 026c 1A63     		str	r2, [r3, #48]
2517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3899              		.loc 1 2518 0
 3900 026e 7B68     		ldr	r3, [r7, #4]
 3901 0270 1B68     		ldr	r3, [r3]
 3902 0272 7A68     		ldr	r2, [r7, #4]
 3903 0274 1268     		ldr	r2, [r2]
 3904 0276 D268     		ldr	r2, [r2, #12]
 3905 0278 22F01002 		bic	r2, r2, #16
 3906 027c DA60     		str	r2, [r3, #12]
2519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Last bytes received, so no need as the abort is immediate */
2521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (void)HAL_DMA_Abort(huart->hdmarx);
 3907              		.loc 1 2521 0
ARM GAS  /tmp/ccRUQzex.s 			page 113


 3908 027e 7B68     		ldr	r3, [r7, #4]
 3909 0280 9B6B     		ldr	r3, [r3, #56]
 3910 0282 1846     		mov	r0, r3
 3911 0284 FFF7FEFF 		bl	HAL_DMA_Abort
 3912              	.L195:
2522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
2525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 3913              		.loc 1 2528 0
 3914 0288 7B68     		ldr	r3, [r7, #4]
 3915 028a 9A8D     		ldrh	r2, [r3, #44]
 3916 028c 7B68     		ldr	r3, [r7, #4]
 3917 028e DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3918 0290 9BB2     		uxth	r3, r3
 3919 0292 D31A     		subs	r3, r2, r3
 3920 0294 9BB2     		uxth	r3, r3
 3921 0296 1946     		mov	r1, r3
 3922 0298 7868     		ldr	r0, [r7, #4]
 3923 029a FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
2530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 3924              		.loc 1 2531 0
 3925 029e 52E0     		b	.L200
 3926              	.L193:
 3927              	.LBE7:
 3928              	.LBB8:
2532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode not enabled */
2536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing.
2537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 3929              		.loc 1 2538 0
 3930 02a0 7B68     		ldr	r3, [r7, #4]
 3931 02a2 9A8D     		ldrh	r2, [r3, #44]
 3932 02a4 7B68     		ldr	r3, [r7, #4]
 3933 02a6 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3934 02a8 9BB2     		uxth	r3, r3
 3935 02aa D31A     		subs	r3, r2, r3
 3936 02ac 3B82     		strh	r3, [r7, #16]	@ movhi
2539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (  (huart->RxXferCount > 0U)
 3937              		.loc 1 2539 0
 3938 02ae 7B68     		ldr	r3, [r7, #4]
 3939 02b0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3940 02b2 9BB2     		uxth	r3, r3
 3941 02b4 002B     		cmp	r3, #0
 3942 02b6 48D0     		beq	.L201
2540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           &&(nb_rx_data > 0U) )
 3943              		.loc 1 2540 0
 3944 02b8 3B8A     		ldrh	r3, [r7, #16]
 3945 02ba 002B     		cmp	r3, #0
ARM GAS  /tmp/ccRUQzex.s 			page 114


 3946 02bc 45D0     		beq	.L201
2541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXNE interrupts */
2543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3947              		.loc 1 2543 0
 3948 02be 7B68     		ldr	r3, [r7, #4]
 3949 02c0 1B68     		ldr	r3, [r3]
 3950 02c2 7A68     		ldr	r2, [r7, #4]
 3951 02c4 1268     		ldr	r2, [r2]
 3952 02c6 D268     		ldr	r2, [r2, #12]
 3953 02c8 22F49072 		bic	r2, r2, #288
 3954 02cc DA60     		str	r2, [r3, #12]
2544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3955              		.loc 1 2546 0
 3956 02ce 7B68     		ldr	r3, [r7, #4]
 3957 02d0 1B68     		ldr	r3, [r3]
 3958 02d2 7A68     		ldr	r2, [r7, #4]
 3959 02d4 1268     		ldr	r2, [r2]
 3960 02d6 5269     		ldr	r2, [r2, #20]
 3961 02d8 22F00102 		bic	r2, r2, #1
 3962 02dc 5A61     		str	r2, [r3, #20]
2547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
2549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 3963              		.loc 1 2549 0
 3964 02de 7B68     		ldr	r3, [r7, #4]
 3965 02e0 2022     		movs	r2, #32
 3966 02e2 83F83E20 		strb	r2, [r3, #62]
2550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3967              		.loc 1 2550 0
 3968 02e6 7B68     		ldr	r3, [r7, #4]
 3969 02e8 0022     		movs	r2, #0
 3970 02ea 1A63     		str	r2, [r3, #48]
2551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3971              		.loc 1 2552 0
 3972 02ec 7B68     		ldr	r3, [r7, #4]
 3973 02ee 1B68     		ldr	r3, [r3]
 3974 02f0 7A68     		ldr	r2, [r7, #4]
 3975 02f2 1268     		ldr	r2, [r2]
 3976 02f4 D268     		ldr	r2, [r2, #12]
 3977 02f6 22F01002 		bic	r2, r2, #16
 3978 02fa DA60     		str	r2, [r3, #12]
2553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx complete callback*/
2555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, nb_rx_data);
2556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 3979              		.loc 1 2558 0
 3980 02fc 3B8A     		ldrh	r3, [r7, #16]
 3981 02fe 1946     		mov	r1, r3
 3982 0300 7868     		ldr	r0, [r7, #4]
 3983 0302 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
ARM GAS  /tmp/ccRUQzex.s 			page 115


2560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 3984              		.loc 1 2561 0
 3985 0306 20E0     		b	.L201
 3986              	.L192:
 3987              	.LBE8:
2562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 3988              		.loc 1 2566 0
 3989 0308 7B6A     		ldr	r3, [r7, #36]
 3990 030a 03F08003 		and	r3, r3, #128
 3991 030e 002B     		cmp	r3, #0
 3992 0310 08D0     		beq	.L197
 3993              		.loc 1 2566 0 is_stmt 0 discriminator 1
 3994 0312 3B6A     		ldr	r3, [r7, #32]
 3995 0314 03F08003 		and	r3, r3, #128
 3996 0318 002B     		cmp	r3, #0
 3997 031a 03D0     		beq	.L197
2567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_Transmit_IT(huart);
 3998              		.loc 1 2568 0 is_stmt 1
 3999 031c 7868     		ldr	r0, [r7, #4]
 4000 031e FFF7FEFF 		bl	UART_Transmit_IT
2569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 4001              		.loc 1 2569 0
 4002 0322 13E0     		b	.L173
 4003              	.L197:
2570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 4004              		.loc 1 2573 0
 4005 0324 7B6A     		ldr	r3, [r7, #36]
 4006 0326 03F04003 		and	r3, r3, #64
 4007 032a 002B     		cmp	r3, #0
 4008 032c 0ED0     		beq	.L173
 4009              		.loc 1 2573 0 is_stmt 0 discriminator 1
 4010 032e 3B6A     		ldr	r3, [r7, #32]
 4011 0330 03F04003 		and	r3, r3, #64
 4012 0334 002B     		cmp	r3, #0
 4013 0336 09D0     		beq	.L173
2574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 4014              		.loc 1 2575 0 is_stmt 1
 4015 0338 7868     		ldr	r0, [r7, #4]
 4016 033a FFF7FEFF 		bl	UART_EndTransmit_IT
2576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 4017              		.loc 1 2576 0
 4018 033e 00BF     		nop
 4019 0340 04E0     		b	.L173
 4020              	.L198:
2478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
 4021              		.loc 1 2478 0
 4022 0342 00BF     		nop
ARM GAS  /tmp/ccRUQzex.s 			page 116


 4023 0344 02E0     		b	.L173
 4024              	.L200:
 4025              	.LBB9:
2531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 4026              		.loc 1 2531 0
 4027 0346 00BF     		nop
 4028 0348 00E0     		b	.L173
 4029              	.L201:
 4030              	.LBE9:
 4031              	.LBB10:
2561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 4032              		.loc 1 2561 0
 4033 034a 00BF     		nop
 4034              	.L173:
 4035              	.LBE10:
2577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4036              		.loc 1 2578 0
 4037 034c 2837     		adds	r7, r7, #40
 4038              	.LCFI133:
 4039              		.cfi_def_cfa_offset 8
 4040 034e BD46     		mov	sp, r7
 4041              	.LCFI134:
 4042              		.cfi_def_cfa_register 13
 4043              		@ sp needed
 4044 0350 80BD     		pop	{r7, pc}
 4045              	.L203:
 4046 0352 00BF     		.align	2
 4047              	.L202:
 4048 0354 00000000 		.word	UART_DMAAbortOnError
 4049              		.cfi_endproc
 4050              	.LFE90:
 4052              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 4053              		.align	1
 4054              		.weak	HAL_UART_TxCpltCallback
 4055              		.syntax unified
 4056              		.thumb
 4057              		.thumb_func
 4058              		.fpu softvfp
 4060              	HAL_UART_TxCpltCallback:
 4061              	.LFB91:
2579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
2582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4062              		.loc 1 2587 0
 4063              		.cfi_startproc
 4064              		@ args = 0, pretend = 0, frame = 8
 4065              		@ frame_needed = 1, uses_anonymous_args = 0
 4066              		@ link register save eliminated.
 4067 0000 80B4     		push	{r7}
 4068              	.LCFI135:
ARM GAS  /tmp/ccRUQzex.s 			page 117


 4069              		.cfi_def_cfa_offset 4
 4070              		.cfi_offset 7, -4
 4071 0002 83B0     		sub	sp, sp, #12
 4072              	.LCFI136:
 4073              		.cfi_def_cfa_offset 16
 4074 0004 00AF     		add	r7, sp, #0
 4075              	.LCFI137:
 4076              		.cfi_def_cfa_register 7
 4077 0006 7860     		str	r0, [r7, #4]
2588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4078              		.loc 1 2593 0
 4079 0008 00BF     		nop
 4080 000a 0C37     		adds	r7, r7, #12
 4081              	.LCFI138:
 4082              		.cfi_def_cfa_offset 4
 4083 000c BD46     		mov	sp, r7
 4084              	.LCFI139:
 4085              		.cfi_def_cfa_register 13
 4086              		@ sp needed
 4087 000e 80BC     		pop	{r7}
 4088              	.LCFI140:
 4089              		.cfi_restore 7
 4090              		.cfi_def_cfa_offset 0
 4091 0010 7047     		bx	lr
 4092              		.cfi_endproc
 4093              	.LFE91:
 4095              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 4096              		.align	1
 4097              		.weak	HAL_UART_TxHalfCpltCallback
 4098              		.syntax unified
 4099              		.thumb
 4100              		.thumb_func
 4101              		.fpu softvfp
 4103              	HAL_UART_TxHalfCpltCallback:
 4104              	.LFB92:
2594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4105              		.loc 1 2602 0
 4106              		.cfi_startproc
 4107              		@ args = 0, pretend = 0, frame = 8
 4108              		@ frame_needed = 1, uses_anonymous_args = 0
 4109              		@ link register save eliminated.
 4110 0000 80B4     		push	{r7}
 4111              	.LCFI141:
 4112              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRUQzex.s 			page 118


 4113              		.cfi_offset 7, -4
 4114 0002 83B0     		sub	sp, sp, #12
 4115              	.LCFI142:
 4116              		.cfi_def_cfa_offset 16
 4117 0004 00AF     		add	r7, sp, #0
 4118              	.LCFI143:
 4119              		.cfi_def_cfa_register 7
 4120 0006 7860     		str	r0, [r7, #4]
2603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4121              		.loc 1 2608 0
 4122 0008 00BF     		nop
 4123 000a 0C37     		adds	r7, r7, #12
 4124              	.LCFI144:
 4125              		.cfi_def_cfa_offset 4
 4126 000c BD46     		mov	sp, r7
 4127              	.LCFI145:
 4128              		.cfi_def_cfa_register 13
 4129              		@ sp needed
 4130 000e 80BC     		pop	{r7}
 4131              	.LCFI146:
 4132              		.cfi_restore 7
 4133              		.cfi_def_cfa_offset 0
 4134 0010 7047     		bx	lr
 4135              		.cfi_endproc
 4136              	.LFE92:
 4138              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 4139              		.align	1
 4140              		.weak	HAL_UART_RxCpltCallback
 4141              		.syntax unified
 4142              		.thumb
 4143              		.thumb_func
 4144              		.fpu softvfp
 4146              	HAL_UART_RxCpltCallback:
 4147              	.LFB93:
2609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4148              		.loc 1 2617 0
 4149              		.cfi_startproc
 4150              		@ args = 0, pretend = 0, frame = 8
 4151              		@ frame_needed = 1, uses_anonymous_args = 0
 4152              		@ link register save eliminated.
 4153 0000 80B4     		push	{r7}
 4154              	.LCFI147:
 4155              		.cfi_def_cfa_offset 4
 4156              		.cfi_offset 7, -4
ARM GAS  /tmp/ccRUQzex.s 			page 119


 4157 0002 83B0     		sub	sp, sp, #12
 4158              	.LCFI148:
 4159              		.cfi_def_cfa_offset 16
 4160 0004 00AF     		add	r7, sp, #0
 4161              	.LCFI149:
 4162              		.cfi_def_cfa_register 7
 4163 0006 7860     		str	r0, [r7, #4]
2618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4164              		.loc 1 2623 0
 4165 0008 00BF     		nop
 4166 000a 0C37     		adds	r7, r7, #12
 4167              	.LCFI150:
 4168              		.cfi_def_cfa_offset 4
 4169 000c BD46     		mov	sp, r7
 4170              	.LCFI151:
 4171              		.cfi_def_cfa_register 13
 4172              		@ sp needed
 4173 000e 80BC     		pop	{r7}
 4174              	.LCFI152:
 4175              		.cfi_restore 7
 4176              		.cfi_def_cfa_offset 0
 4177 0010 7047     		bx	lr
 4178              		.cfi_endproc
 4179              	.LFE93:
 4181              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 4182              		.align	1
 4183              		.weak	HAL_UART_RxHalfCpltCallback
 4184              		.syntax unified
 4185              		.thumb
 4186              		.thumb_func
 4187              		.fpu softvfp
 4189              	HAL_UART_RxHalfCpltCallback:
 4190              	.LFB94:
2624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4191              		.loc 1 2632 0
 4192              		.cfi_startproc
 4193              		@ args = 0, pretend = 0, frame = 8
 4194              		@ frame_needed = 1, uses_anonymous_args = 0
 4195              		@ link register save eliminated.
 4196 0000 80B4     		push	{r7}
 4197              	.LCFI153:
 4198              		.cfi_def_cfa_offset 4
 4199              		.cfi_offset 7, -4
 4200 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccRUQzex.s 			page 120


 4201              	.LCFI154:
 4202              		.cfi_def_cfa_offset 16
 4203 0004 00AF     		add	r7, sp, #0
 4204              	.LCFI155:
 4205              		.cfi_def_cfa_register 7
 4206 0006 7860     		str	r0, [r7, #4]
2633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4207              		.loc 1 2638 0
 4208 0008 00BF     		nop
 4209 000a 0C37     		adds	r7, r7, #12
 4210              	.LCFI156:
 4211              		.cfi_def_cfa_offset 4
 4212 000c BD46     		mov	sp, r7
 4213              	.LCFI157:
 4214              		.cfi_def_cfa_register 13
 4215              		@ sp needed
 4216 000e 80BC     		pop	{r7}
 4217              	.LCFI158:
 4218              		.cfi_restore 7
 4219              		.cfi_def_cfa_offset 0
 4220 0010 7047     		bx	lr
 4221              		.cfi_endproc
 4222              	.LFE94:
 4224              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 4225              		.align	1
 4226              		.weak	HAL_UART_ErrorCallback
 4227              		.syntax unified
 4228              		.thumb
 4229              		.thumb_func
 4230              		.fpu softvfp
 4232              	HAL_UART_ErrorCallback:
 4233              	.LFB95:
2639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART error callbacks.
2642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4234              		.loc 1 2647 0
 4235              		.cfi_startproc
 4236              		@ args = 0, pretend = 0, frame = 8
 4237              		@ frame_needed = 1, uses_anonymous_args = 0
 4238              		@ link register save eliminated.
 4239 0000 80B4     		push	{r7}
 4240              	.LCFI159:
 4241              		.cfi_def_cfa_offset 4
 4242              		.cfi_offset 7, -4
 4243 0002 83B0     		sub	sp, sp, #12
 4244              	.LCFI160:
ARM GAS  /tmp/ccRUQzex.s 			page 121


 4245              		.cfi_def_cfa_offset 16
 4246 0004 00AF     		add	r7, sp, #0
 4247              	.LCFI161:
 4248              		.cfi_def_cfa_register 7
 4249 0006 7860     		str	r0, [r7, #4]
2648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
2652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4250              		.loc 1 2653 0
 4251 0008 00BF     		nop
 4252 000a 0C37     		adds	r7, r7, #12
 4253              	.LCFI162:
 4254              		.cfi_def_cfa_offset 4
 4255 000c BD46     		mov	sp, r7
 4256              	.LCFI163:
 4257              		.cfi_def_cfa_register 13
 4258              		@ sp needed
 4259 000e 80BC     		pop	{r7}
 4260              	.LCFI164:
 4261              		.cfi_restore 7
 4262              		.cfi_def_cfa_offset 0
 4263 0010 7047     		bx	lr
 4264              		.cfi_endproc
 4265              	.LFE95:
 4267              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 4268              		.align	1
 4269              		.weak	HAL_UART_AbortCpltCallback
 4270              		.syntax unified
 4271              		.thumb
 4272              		.thumb_func
 4273              		.fpu softvfp
 4275              	HAL_UART_AbortCpltCallback:
 4276              	.LFB96:
2654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4277              		.loc 1 2661 0
 4278              		.cfi_startproc
 4279              		@ args = 0, pretend = 0, frame = 8
 4280              		@ frame_needed = 1, uses_anonymous_args = 0
 4281              		@ link register save eliminated.
 4282 0000 80B4     		push	{r7}
 4283              	.LCFI165:
 4284              		.cfi_def_cfa_offset 4
 4285              		.cfi_offset 7, -4
 4286 0002 83B0     		sub	sp, sp, #12
 4287              	.LCFI166:
 4288              		.cfi_def_cfa_offset 16
 4289 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccRUQzex.s 			page 122


 4290              	.LCFI167:
 4291              		.cfi_def_cfa_register 7
 4292 0006 7860     		str	r0, [r7, #4]
2662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4293              		.loc 1 2668 0
 4294 0008 00BF     		nop
 4295 000a 0C37     		adds	r7, r7, #12
 4296              	.LCFI168:
 4297              		.cfi_def_cfa_offset 4
 4298 000c BD46     		mov	sp, r7
 4299              	.LCFI169:
 4300              		.cfi_def_cfa_register 13
 4301              		@ sp needed
 4302 000e 80BC     		pop	{r7}
 4303              	.LCFI170:
 4304              		.cfi_restore 7
 4305              		.cfi_def_cfa_offset 0
 4306 0010 7047     		bx	lr
 4307              		.cfi_endproc
 4308              	.LFE96:
 4310              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 4311              		.align	1
 4312              		.weak	HAL_UART_AbortTransmitCpltCallback
 4313              		.syntax unified
 4314              		.thumb
 4315              		.thumb_func
 4316              		.fpu softvfp
 4318              	HAL_UART_AbortTransmitCpltCallback:
 4319              	.LFB97:
2669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4320              		.loc 1 2676 0
 4321              		.cfi_startproc
 4322              		@ args = 0, pretend = 0, frame = 8
 4323              		@ frame_needed = 1, uses_anonymous_args = 0
 4324              		@ link register save eliminated.
 4325 0000 80B4     		push	{r7}
 4326              	.LCFI171:
 4327              		.cfi_def_cfa_offset 4
 4328              		.cfi_offset 7, -4
 4329 0002 83B0     		sub	sp, sp, #12
 4330              	.LCFI172:
 4331              		.cfi_def_cfa_offset 16
 4332 0004 00AF     		add	r7, sp, #0
 4333              	.LCFI173:
ARM GAS  /tmp/ccRUQzex.s 			page 123


 4334              		.cfi_def_cfa_register 7
 4335 0006 7860     		str	r0, [r7, #4]
2677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4336              		.loc 1 2683 0
 4337 0008 00BF     		nop
 4338 000a 0C37     		adds	r7, r7, #12
 4339              	.LCFI174:
 4340              		.cfi_def_cfa_offset 4
 4341 000c BD46     		mov	sp, r7
 4342              	.LCFI175:
 4343              		.cfi_def_cfa_register 13
 4344              		@ sp needed
 4345 000e 80BC     		pop	{r7}
 4346              	.LCFI176:
 4347              		.cfi_restore 7
 4348              		.cfi_def_cfa_offset 0
 4349 0010 7047     		bx	lr
 4350              		.cfi_endproc
 4351              	.LFE97:
 4353              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 4354              		.align	1
 4355              		.weak	HAL_UART_AbortReceiveCpltCallback
 4356              		.syntax unified
 4357              		.thumb
 4358              		.thumb_func
 4359              		.fpu softvfp
 4361              	HAL_UART_AbortReceiveCpltCallback:
 4362              	.LFB98:
2684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4363              		.loc 1 2691 0
 4364              		.cfi_startproc
 4365              		@ args = 0, pretend = 0, frame = 8
 4366              		@ frame_needed = 1, uses_anonymous_args = 0
 4367              		@ link register save eliminated.
 4368 0000 80B4     		push	{r7}
 4369              	.LCFI177:
 4370              		.cfi_def_cfa_offset 4
 4371              		.cfi_offset 7, -4
 4372 0002 83B0     		sub	sp, sp, #12
 4373              	.LCFI178:
 4374              		.cfi_def_cfa_offset 16
 4375 0004 00AF     		add	r7, sp, #0
 4376              	.LCFI179:
 4377              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccRUQzex.s 			page 124


 4378 0006 7860     		str	r0, [r7, #4]
2692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4379              		.loc 1 2698 0
 4380 0008 00BF     		nop
 4381 000a 0C37     		adds	r7, r7, #12
 4382              	.LCFI180:
 4383              		.cfi_def_cfa_offset 4
 4384 000c BD46     		mov	sp, r7
 4385              	.LCFI181:
 4386              		.cfi_def_cfa_register 13
 4387              		@ sp needed
 4388 000e 80BC     		pop	{r7}
 4389              	.LCFI182:
 4390              		.cfi_restore 7
 4391              		.cfi_def_cfa_offset 0
 4392 0010 7047     		bx	lr
 4393              		.cfi_endproc
 4394              	.LFE98:
 4396              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 4397              		.align	1
 4398              		.weak	HAL_UARTEx_RxEventCallback
 4399              		.syntax unified
 4400              		.thumb
 4401              		.thumb_func
 4402              		.fpu softvfp
 4404              	HAL_UARTEx_RxEventCallback:
 4405              	.LFB99:
2699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Reception Event Callback (Rx event notification called after use of advanced reception 
2702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle
2703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Number of data available in application reception buffer (indicates a position in
2704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               reception buffer until which, data are available)
2705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
2708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4406              		.loc 1 2708 0
 4407              		.cfi_startproc
 4408              		@ args = 0, pretend = 0, frame = 8
 4409              		@ frame_needed = 1, uses_anonymous_args = 0
 4410              		@ link register save eliminated.
 4411 0000 80B4     		push	{r7}
 4412              	.LCFI183:
 4413              		.cfi_def_cfa_offset 4
 4414              		.cfi_offset 7, -4
 4415 0002 83B0     		sub	sp, sp, #12
 4416              	.LCFI184:
 4417              		.cfi_def_cfa_offset 16
 4418 0004 00AF     		add	r7, sp, #0
 4419              	.LCFI185:
ARM GAS  /tmp/ccRUQzex.s 			page 125


 4420              		.cfi_def_cfa_register 7
 4421 0006 7860     		str	r0, [r7, #4]
 4422 0008 0B46     		mov	r3, r1
 4423 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(Size);
2712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UARTEx_RxEventCallback can be implemented in the user file.
2715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4424              		.loc 1 2716 0
 4425 000c 00BF     		nop
 4426 000e 0C37     		adds	r7, r7, #12
 4427              	.LCFI186:
 4428              		.cfi_def_cfa_offset 4
 4429 0010 BD46     		mov	sp, r7
 4430              	.LCFI187:
 4431              		.cfi_def_cfa_register 13
 4432              		@ sp needed
 4433 0012 80BC     		pop	{r7}
 4434              	.LCFI188:
 4435              		.cfi_restore 7
 4436              		.cfi_def_cfa_offset 0
 4437 0014 7047     		bx	lr
 4438              		.cfi_endproc
 4439              	.LFE99:
 4441              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 4442              		.align	1
 4443              		.global	HAL_LIN_SendBreak
 4444              		.syntax unified
 4445              		.thumb
 4446              		.thumb_func
 4447              		.fpu softvfp
 4449              	HAL_LIN_SendBreak:
 4450              	.LFB100:
2717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART control functions
2724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
2730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
2733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
2734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccRUQzex.s 			page 126


2737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Transmits break characters.
2743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4451              		.loc 1 2748 0
 4452              		.cfi_startproc
 4453              		@ args = 0, pretend = 0, frame = 8
 4454              		@ frame_needed = 1, uses_anonymous_args = 0
 4455              		@ link register save eliminated.
 4456 0000 80B4     		push	{r7}
 4457              	.LCFI189:
 4458              		.cfi_def_cfa_offset 4
 4459              		.cfi_offset 7, -4
 4460 0002 83B0     		sub	sp, sp, #12
 4461              	.LCFI190:
 4462              		.cfi_def_cfa_offset 16
 4463 0004 00AF     		add	r7, sp, #0
 4464              	.LCFI191:
 4465              		.cfi_def_cfa_register 7
 4466 0006 7860     		str	r0, [r7, #4]
2749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4467              		.loc 1 2753 0
 4468 0008 7B68     		ldr	r3, [r7, #4]
 4469 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4470 000e 012B     		cmp	r3, #1
 4471 0010 01D1     		bne	.L214
 4472              		.loc 1 2753 0 is_stmt 0 discriminator 1
 4473 0012 0223     		movs	r3, #2
 4474 0014 18E0     		b	.L215
 4475              	.L214:
 4476              		.loc 1 2753 0 discriminator 2
 4477 0016 7B68     		ldr	r3, [r7, #4]
 4478 0018 0122     		movs	r2, #1
 4479 001a 83F83C20 		strb	r2, [r3, #60]
2754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4480              		.loc 1 2755 0 is_stmt 1 discriminator 2
 4481 001e 7B68     		ldr	r3, [r7, #4]
 4482 0020 2422     		movs	r2, #36
 4483 0022 83F83D20 		strb	r2, [r3, #61]
2756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Send break characters */
2758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 4484              		.loc 1 2758 0 discriminator 2
 4485 0026 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 127


 4486 0028 1B68     		ldr	r3, [r3]
 4487 002a 7A68     		ldr	r2, [r7, #4]
 4488 002c 1268     		ldr	r2, [r2]
 4489 002e D268     		ldr	r2, [r2, #12]
 4490 0030 42F00102 		orr	r2, r2, #1
 4491 0034 DA60     		str	r2, [r3, #12]
2759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4492              		.loc 1 2760 0 discriminator 2
 4493 0036 7B68     		ldr	r3, [r7, #4]
 4494 0038 2022     		movs	r2, #32
 4495 003a 83F83D20 		strb	r2, [r3, #61]
2761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4496              		.loc 1 2763 0 discriminator 2
 4497 003e 7B68     		ldr	r3, [r7, #4]
 4498 0040 0022     		movs	r2, #0
 4499 0042 83F83C20 		strb	r2, [r3, #60]
2764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4500              		.loc 1 2765 0 discriminator 2
 4501 0046 0023     		movs	r3, #0
 4502              	.L215:
2766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4503              		.loc 1 2766 0
 4504 0048 1846     		mov	r0, r3
 4505 004a 0C37     		adds	r7, r7, #12
 4506              	.LCFI192:
 4507              		.cfi_def_cfa_offset 4
 4508 004c BD46     		mov	sp, r7
 4509              	.LCFI193:
 4510              		.cfi_def_cfa_register 13
 4511              		@ sp needed
 4512 004e 80BC     		pop	{r7}
 4513              	.LCFI194:
 4514              		.cfi_restore 7
 4515              		.cfi_def_cfa_offset 0
 4516 0050 7047     		bx	lr
 4517              		.cfi_endproc
 4518              	.LFE100:
 4520              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 4521              		.align	1
 4522              		.global	HAL_MultiProcessor_EnterMuteMode
 4523              		.syntax unified
 4524              		.thumb
 4525              		.thumb_func
 4526              		.fpu softvfp
 4528              	HAL_MultiProcessor_EnterMuteMode:
 4529              	.LFB101:
2767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp/ccRUQzex.s 			page 128


2774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4530              		.loc 1 2775 0
 4531              		.cfi_startproc
 4532              		@ args = 0, pretend = 0, frame = 8
 4533              		@ frame_needed = 1, uses_anonymous_args = 0
 4534              		@ link register save eliminated.
 4535 0000 80B4     		push	{r7}
 4536              	.LCFI195:
 4537              		.cfi_def_cfa_offset 4
 4538              		.cfi_offset 7, -4
 4539 0002 83B0     		sub	sp, sp, #12
 4540              	.LCFI196:
 4541              		.cfi_def_cfa_offset 16
 4542 0004 00AF     		add	r7, sp, #0
 4543              	.LCFI197:
 4544              		.cfi_def_cfa_register 7
 4545 0006 7860     		str	r0, [r7, #4]
2776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4546              		.loc 1 2780 0
 4547 0008 7B68     		ldr	r3, [r7, #4]
 4548 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4549 000e 012B     		cmp	r3, #1
 4550 0010 01D1     		bne	.L217
 4551              		.loc 1 2780 0 is_stmt 0 discriminator 1
 4552 0012 0223     		movs	r3, #2
 4553 0014 18E0     		b	.L218
 4554              	.L217:
 4555              		.loc 1 2780 0 discriminator 2
 4556 0016 7B68     		ldr	r3, [r7, #4]
 4557 0018 0122     		movs	r2, #1
 4558 001a 83F83C20 		strb	r2, [r3, #60]
2781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4559              		.loc 1 2782 0 is_stmt 1 discriminator 2
 4560 001e 7B68     		ldr	r3, [r7, #4]
 4561 0020 2422     		movs	r2, #36
 4562 0022 83F83D20 		strb	r2, [r3, #61]
2783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 4563              		.loc 1 2785 0 discriminator 2
 4564 0026 7B68     		ldr	r3, [r7, #4]
 4565 0028 1B68     		ldr	r3, [r3]
 4566 002a 7A68     		ldr	r2, [r7, #4]
 4567 002c 1268     		ldr	r2, [r2]
 4568 002e D268     		ldr	r2, [r2, #12]
 4569 0030 42F00202 		orr	r2, r2, #2
 4570 0034 DA60     		str	r2, [r3, #12]
2786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4571              		.loc 1 2787 0 discriminator 2
 4572 0036 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 129


 4573 0038 2022     		movs	r2, #32
 4574 003a 83F83D20 		strb	r2, [r3, #61]
2788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4575              		.loc 1 2790 0 discriminator 2
 4576 003e 7B68     		ldr	r3, [r7, #4]
 4577 0040 0022     		movs	r2, #0
 4578 0042 83F83C20 		strb	r2, [r3, #60]
2791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4579              		.loc 1 2792 0 discriminator 2
 4580 0046 0023     		movs	r3, #0
 4581              	.L218:
2793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4582              		.loc 1 2793 0
 4583 0048 1846     		mov	r0, r3
 4584 004a 0C37     		adds	r7, r7, #12
 4585              	.LCFI198:
 4586              		.cfi_def_cfa_offset 4
 4587 004c BD46     		mov	sp, r7
 4588              	.LCFI199:
 4589              		.cfi_def_cfa_register 13
 4590              		@ sp needed
 4591 004e 80BC     		pop	{r7}
 4592              	.LCFI200:
 4593              		.cfi_restore 7
 4594              		.cfi_def_cfa_offset 0
 4595 0050 7047     		bx	lr
 4596              		.cfi_endproc
 4597              	.LFE101:
 4599              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 4600              		.align	1
 4601              		.global	HAL_MultiProcessor_ExitMuteMode
 4602              		.syntax unified
 4603              		.thumb
 4604              		.thumb_func
 4605              		.fpu softvfp
 4607              	HAL_MultiProcessor_ExitMuteMode:
 4608              	.LFB102:
2794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4609              		.loc 1 2802 0
 4610              		.cfi_startproc
 4611              		@ args = 0, pretend = 0, frame = 8
 4612              		@ frame_needed = 1, uses_anonymous_args = 0
 4613              		@ link register save eliminated.
 4614 0000 80B4     		push	{r7}
 4615              	.LCFI201:
 4616              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRUQzex.s 			page 130


 4617              		.cfi_offset 7, -4
 4618 0002 83B0     		sub	sp, sp, #12
 4619              	.LCFI202:
 4620              		.cfi_def_cfa_offset 16
 4621 0004 00AF     		add	r7, sp, #0
 4622              	.LCFI203:
 4623              		.cfi_def_cfa_register 7
 4624 0006 7860     		str	r0, [r7, #4]
2803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4625              		.loc 1 2807 0
 4626 0008 7B68     		ldr	r3, [r7, #4]
 4627 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4628 000e 012B     		cmp	r3, #1
 4629 0010 01D1     		bne	.L220
 4630              		.loc 1 2807 0 is_stmt 0 discriminator 1
 4631 0012 0223     		movs	r3, #2
 4632 0014 18E0     		b	.L221
 4633              	.L220:
 4634              		.loc 1 2807 0 discriminator 2
 4635 0016 7B68     		ldr	r3, [r7, #4]
 4636 0018 0122     		movs	r2, #1
 4637 001a 83F83C20 		strb	r2, [r3, #60]
2808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4638              		.loc 1 2809 0 is_stmt 1 discriminator 2
 4639 001e 7B68     		ldr	r3, [r7, #4]
 4640 0020 2422     		movs	r2, #36
 4641 0022 83F83D20 		strb	r2, [r3, #61]
2810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
2812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 4642              		.loc 1 2812 0 discriminator 2
 4643 0026 7B68     		ldr	r3, [r7, #4]
 4644 0028 1B68     		ldr	r3, [r3]
 4645 002a 7A68     		ldr	r2, [r7, #4]
 4646 002c 1268     		ldr	r2, [r2]
 4647 002e D268     		ldr	r2, [r2, #12]
 4648 0030 22F00202 		bic	r2, r2, #2
 4649 0034 DA60     		str	r2, [r3, #12]
2813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4650              		.loc 1 2814 0 discriminator 2
 4651 0036 7B68     		ldr	r3, [r7, #4]
 4652 0038 2022     		movs	r2, #32
 4653 003a 83F83D20 		strb	r2, [r3, #61]
2815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4654              		.loc 1 2817 0 discriminator 2
 4655 003e 7B68     		ldr	r3, [r7, #4]
 4656 0040 0022     		movs	r2, #0
 4657 0042 83F83C20 		strb	r2, [r3, #60]
2818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccRUQzex.s 			page 131


2819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4658              		.loc 1 2819 0 discriminator 2
 4659 0046 0023     		movs	r3, #0
 4660              	.L221:
2820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4661              		.loc 1 2820 0
 4662 0048 1846     		mov	r0, r3
 4663 004a 0C37     		adds	r7, r7, #12
 4664              	.LCFI204:
 4665              		.cfi_def_cfa_offset 4
 4666 004c BD46     		mov	sp, r7
 4667              	.LCFI205:
 4668              		.cfi_def_cfa_register 13
 4669              		@ sp needed
 4670 004e 80BC     		pop	{r7}
 4671              	.LCFI206:
 4672              		.cfi_restore 7
 4673              		.cfi_def_cfa_offset 0
 4674 0050 7047     		bx	lr
 4675              		.cfi_endproc
 4676              	.LFE102:
 4678              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 4679              		.align	1
 4680              		.global	HAL_HalfDuplex_EnableTransmitter
 4681              		.syntax unified
 4682              		.thumb
 4683              		.thumb_func
 4684              		.fpu softvfp
 4686              	HAL_HalfDuplex_EnableTransmitter:
 4687              	.LFB103:
2821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4688              		.loc 1 2829 0
 4689              		.cfi_startproc
 4690              		@ args = 0, pretend = 0, frame = 16
 4691              		@ frame_needed = 1, uses_anonymous_args = 0
 4692              		@ link register save eliminated.
 4693 0000 80B4     		push	{r7}
 4694              	.LCFI207:
 4695              		.cfi_def_cfa_offset 4
 4696              		.cfi_offset 7, -4
 4697 0002 85B0     		sub	sp, sp, #20
 4698              	.LCFI208:
 4699              		.cfi_def_cfa_offset 24
 4700 0004 00AF     		add	r7, sp, #0
 4701              	.LCFI209:
 4702              		.cfi_def_cfa_register 7
 4703 0006 7860     		str	r0, [r7, #4]
2830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 4704              		.loc 1 2830 0
ARM GAS  /tmp/ccRUQzex.s 			page 132


 4705 0008 0023     		movs	r3, #0
 4706 000a FB60     		str	r3, [r7, #12]
2831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4707              		.loc 1 2833 0
 4708 000c 7B68     		ldr	r3, [r7, #4]
 4709 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4710 0012 012B     		cmp	r3, #1
 4711 0014 01D1     		bne	.L223
 4712              		.loc 1 2833 0 is_stmt 0 discriminator 1
 4713 0016 0223     		movs	r3, #2
 4714 0018 20E0     		b	.L224
 4715              	.L223:
 4716              		.loc 1 2833 0 discriminator 2
 4717 001a 7B68     		ldr	r3, [r7, #4]
 4718 001c 0122     		movs	r2, #1
 4719 001e 83F83C20 		strb	r2, [r3, #60]
2834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4720              		.loc 1 2835 0 is_stmt 1 discriminator 2
 4721 0022 7B68     		ldr	r3, [r7, #4]
 4722 0024 2422     		movs	r2, #36
 4723 0026 83F83D20 		strb	r2, [r3, #61]
2836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 4724              		.loc 1 2838 0 discriminator 2
 4725 002a 7B68     		ldr	r3, [r7, #4]
 4726 002c 1B68     		ldr	r3, [r3]
 4727 002e DB68     		ldr	r3, [r3, #12]
 4728 0030 FB60     		str	r3, [r7, #12]
2839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 4729              		.loc 1 2841 0 discriminator 2
 4730 0032 FB68     		ldr	r3, [r7, #12]
 4731 0034 23F00C03 		bic	r3, r3, #12
 4732 0038 FB60     		str	r3, [r7, #12]
2842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 4733              		.loc 1 2844 0 discriminator 2
 4734 003a FB68     		ldr	r3, [r7, #12]
 4735 003c 43F00803 		orr	r3, r3, #8
 4736 0040 FB60     		str	r3, [r7, #12]
2845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 4737              		.loc 1 2847 0 discriminator 2
 4738 0042 7B68     		ldr	r3, [r7, #4]
 4739 0044 1B68     		ldr	r3, [r3]
 4740 0046 FA68     		ldr	r2, [r7, #12]
 4741 0048 DA60     		str	r2, [r3, #12]
2848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4742              		.loc 1 2849 0 discriminator 2
ARM GAS  /tmp/ccRUQzex.s 			page 133


 4743 004a 7B68     		ldr	r3, [r7, #4]
 4744 004c 2022     		movs	r2, #32
 4745 004e 83F83D20 		strb	r2, [r3, #61]
2850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4746              		.loc 1 2852 0 discriminator 2
 4747 0052 7B68     		ldr	r3, [r7, #4]
 4748 0054 0022     		movs	r2, #0
 4749 0056 83F83C20 		strb	r2, [r3, #60]
2853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4750              		.loc 1 2854 0 discriminator 2
 4751 005a 0023     		movs	r3, #0
 4752              	.L224:
2855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4753              		.loc 1 2855 0
 4754 005c 1846     		mov	r0, r3
 4755 005e 1437     		adds	r7, r7, #20
 4756              	.LCFI210:
 4757              		.cfi_def_cfa_offset 4
 4758 0060 BD46     		mov	sp, r7
 4759              	.LCFI211:
 4760              		.cfi_def_cfa_register 13
 4761              		@ sp needed
 4762 0062 80BC     		pop	{r7}
 4763              	.LCFI212:
 4764              		.cfi_restore 7
 4765              		.cfi_def_cfa_offset 0
 4766 0064 7047     		bx	lr
 4767              		.cfi_endproc
 4768              	.LFE103:
 4770              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 4771              		.align	1
 4772              		.global	HAL_HalfDuplex_EnableReceiver
 4773              		.syntax unified
 4774              		.thumb
 4775              		.thumb_func
 4776              		.fpu softvfp
 4778              	HAL_HalfDuplex_EnableReceiver:
 4779              	.LFB104:
2856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4780              		.loc 1 2864 0
 4781              		.cfi_startproc
 4782              		@ args = 0, pretend = 0, frame = 16
 4783              		@ frame_needed = 1, uses_anonymous_args = 0
 4784              		@ link register save eliminated.
 4785 0000 80B4     		push	{r7}
 4786              	.LCFI213:
ARM GAS  /tmp/ccRUQzex.s 			page 134


 4787              		.cfi_def_cfa_offset 4
 4788              		.cfi_offset 7, -4
 4789 0002 85B0     		sub	sp, sp, #20
 4790              	.LCFI214:
 4791              		.cfi_def_cfa_offset 24
 4792 0004 00AF     		add	r7, sp, #0
 4793              	.LCFI215:
 4794              		.cfi_def_cfa_register 7
 4795 0006 7860     		str	r0, [r7, #4]
2865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 4796              		.loc 1 2865 0
 4797 0008 0023     		movs	r3, #0
 4798 000a FB60     		str	r3, [r7, #12]
2866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 4799              		.loc 1 2868 0
 4800 000c 7B68     		ldr	r3, [r7, #4]
 4801 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 4802 0012 012B     		cmp	r3, #1
 4803 0014 01D1     		bne	.L226
 4804              		.loc 1 2868 0 is_stmt 0 discriminator 1
 4805 0016 0223     		movs	r3, #2
 4806 0018 20E0     		b	.L227
 4807              	.L226:
 4808              		.loc 1 2868 0 discriminator 2
 4809 001a 7B68     		ldr	r3, [r7, #4]
 4810 001c 0122     		movs	r2, #1
 4811 001e 83F83C20 		strb	r2, [r3, #60]
2869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4812              		.loc 1 2870 0 is_stmt 1 discriminator 2
 4813 0022 7B68     		ldr	r3, [r7, #4]
 4814 0024 2422     		movs	r2, #36
 4815 0026 83F83D20 		strb	r2, [r3, #61]
2871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 4816              		.loc 1 2873 0 discriminator 2
 4817 002a 7B68     		ldr	r3, [r7, #4]
 4818 002c 1B68     		ldr	r3, [r3]
 4819 002e DB68     		ldr	r3, [r3, #12]
 4820 0030 FB60     		str	r3, [r7, #12]
2874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 4821              		.loc 1 2876 0 discriminator 2
 4822 0032 FB68     		ldr	r3, [r7, #12]
 4823 0034 23F00C03 		bic	r3, r3, #12
 4824 0038 FB60     		str	r3, [r7, #12]
2877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 4825              		.loc 1 2879 0 discriminator 2
 4826 003a FB68     		ldr	r3, [r7, #12]
 4827 003c 43F00403 		orr	r3, r3, #4
 4828 0040 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 135


2880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 4829              		.loc 1 2882 0 discriminator 2
 4830 0042 7B68     		ldr	r3, [r7, #4]
 4831 0044 1B68     		ldr	r3, [r3]
 4832 0046 FA68     		ldr	r2, [r7, #12]
 4833 0048 DA60     		str	r2, [r3, #12]
2883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4834              		.loc 1 2884 0 discriminator 2
 4835 004a 7B68     		ldr	r3, [r7, #4]
 4836 004c 2022     		movs	r2, #32
 4837 004e 83F83D20 		strb	r2, [r3, #61]
2885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4838              		.loc 1 2887 0 discriminator 2
 4839 0052 7B68     		ldr	r3, [r7, #4]
 4840 0054 0022     		movs	r2, #0
 4841 0056 83F83C20 		strb	r2, [r3, #60]
2888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4842              		.loc 1 2889 0 discriminator 2
 4843 005a 0023     		movs	r3, #0
 4844              	.L227:
2890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4845              		.loc 1 2890 0
 4846 005c 1846     		mov	r0, r3
 4847 005e 1437     		adds	r7, r7, #20
 4848              	.LCFI216:
 4849              		.cfi_def_cfa_offset 4
 4850 0060 BD46     		mov	sp, r7
 4851              	.LCFI217:
 4852              		.cfi_def_cfa_register 13
 4853              		@ sp needed
 4854 0062 80BC     		pop	{r7}
 4855              	.LCFI218:
 4856              		.cfi_restore 7
 4857              		.cfi_def_cfa_offset 0
 4858 0064 7047     		bx	lr
 4859              		.cfi_endproc
 4860              	.LFE104:
 4862              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4863              		.align	1
 4864              		.global	HAL_UART_GetState
 4865              		.syntax unified
 4866              		.thumb
 4867              		.thumb_func
 4868              		.fpu softvfp
 4870              	HAL_UART_GetState:
 4871              	.LFB105:
2891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccRUQzex.s 			page 136


2896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  [..]
2904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    process
2907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Returns the UART state.
2916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL state
2919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4872              		.loc 1 2921 0
 4873              		.cfi_startproc
 4874              		@ args = 0, pretend = 0, frame = 16
 4875              		@ frame_needed = 1, uses_anonymous_args = 0
 4876              		@ link register save eliminated.
 4877 0000 80B4     		push	{r7}
 4878              	.LCFI219:
 4879              		.cfi_def_cfa_offset 4
 4880              		.cfi_offset 7, -4
 4881 0002 85B0     		sub	sp, sp, #20
 4882              	.LCFI220:
 4883              		.cfi_def_cfa_offset 24
 4884 0004 00AF     		add	r7, sp, #0
 4885              	.LCFI221:
 4886              		.cfi_def_cfa_register 7
 4887 0006 7860     		str	r0, [r7, #4]
2922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 4888              		.loc 1 2922 0
 4889 0008 0023     		movs	r3, #0
 4890 000a FB60     		str	r3, [r7, #12]
 4891 000c 0023     		movs	r3, #0
 4892 000e BB60     		str	r3, [r7, #8]
2923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp1 = huart->gState;
 4893              		.loc 1 2923 0
 4894 0010 7B68     		ldr	r3, [r7, #4]
 4895 0012 93F83D30 		ldrb	r3, [r3, #61]
 4896 0016 DBB2     		uxtb	r3, r3
 4897 0018 FB60     		str	r3, [r7, #12]
2924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
 4898              		.loc 1 2924 0
 4899 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 137


 4900 001c 93F83E30 		ldrb	r3, [r3, #62]
 4901 0020 DBB2     		uxtb	r3, r3
 4902 0022 BB60     		str	r3, [r7, #8]
2925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 4903              		.loc 1 2926 0
 4904 0024 FB68     		ldr	r3, [r7, #12]
 4905 0026 DAB2     		uxtb	r2, r3
 4906 0028 BB68     		ldr	r3, [r7, #8]
 4907 002a DBB2     		uxtb	r3, r3
 4908 002c 1343     		orrs	r3, r3, r2
 4909 002e DBB2     		uxtb	r3, r3
2927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4910              		.loc 1 2927 0
 4911 0030 1846     		mov	r0, r3
 4912 0032 1437     		adds	r7, r7, #20
 4913              	.LCFI222:
 4914              		.cfi_def_cfa_offset 4
 4915 0034 BD46     		mov	sp, r7
 4916              	.LCFI223:
 4917              		.cfi_def_cfa_register 13
 4918              		@ sp needed
 4919 0036 80BC     		pop	{r7}
 4920              	.LCFI224:
 4921              		.cfi_restore 7
 4922              		.cfi_def_cfa_offset 0
 4923 0038 7047     		bx	lr
 4924              		.cfi_endproc
 4925              	.LFE105:
 4927              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4928              		.align	1
 4929              		.global	HAL_UART_GetError
 4930              		.syntax unified
 4931              		.thumb
 4932              		.thumb_func
 4933              		.fpu softvfp
 4935              	HAL_UART_GetError:
 4936              	.LFB106:
2928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Return the UART error code
2931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART.
2933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval UART Error Code
2934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4937              		.loc 1 2936 0
 4938              		.cfi_startproc
 4939              		@ args = 0, pretend = 0, frame = 8
 4940              		@ frame_needed = 1, uses_anonymous_args = 0
 4941              		@ link register save eliminated.
 4942 0000 80B4     		push	{r7}
 4943              	.LCFI225:
 4944              		.cfi_def_cfa_offset 4
 4945              		.cfi_offset 7, -4
 4946 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccRUQzex.s 			page 138


 4947              	.LCFI226:
 4948              		.cfi_def_cfa_offset 16
 4949 0004 00AF     		add	r7, sp, #0
 4950              	.LCFI227:
 4951              		.cfi_def_cfa_register 7
 4952 0006 7860     		str	r0, [r7, #4]
2937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
 4953              		.loc 1 2937 0
 4954 0008 7B68     		ldr	r3, [r7, #4]
 4955 000a 1B6C     		ldr	r3, [r3, #64]
2938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4956              		.loc 1 2938 0
 4957 000c 1846     		mov	r0, r3
 4958 000e 0C37     		adds	r7, r7, #12
 4959              	.LCFI228:
 4960              		.cfi_def_cfa_offset 4
 4961 0010 BD46     		mov	sp, r7
 4962              	.LCFI229:
 4963              		.cfi_def_cfa_register 13
 4964              		@ sp needed
 4965 0012 80BC     		pop	{r7}
 4966              	.LCFI230:
 4967              		.cfi_restore 7
 4968              		.cfi_def_cfa_offset 0
 4969 0014 7047     		bx	lr
 4970              		.cfi_endproc
 4971              	.LFE106:
 4973              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 4974              		.align	1
 4975              		.syntax unified
 4976              		.thumb
 4977              		.thumb_func
 4978              		.fpu softvfp
 4980              	UART_DMATransmitCplt:
 4981              	.LFB107:
2939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval none
2956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Init the UART Callback settings */
ARM GAS  /tmp/ccRUQzex.s 			page 139


2961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCall
2970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4982              		.loc 1 2981 0
 4983              		.cfi_startproc
 4984              		@ args = 0, pretend = 0, frame = 16
 4985              		@ frame_needed = 1, uses_anonymous_args = 0
 4986 0000 80B5     		push	{r7, lr}
 4987              	.LCFI231:
 4988              		.cfi_def_cfa_offset 8
 4989              		.cfi_offset 7, -8
 4990              		.cfi_offset 14, -4
 4991 0002 84B0     		sub	sp, sp, #16
 4992              	.LCFI232:
 4993              		.cfi_def_cfa_offset 24
 4994 0004 00AF     		add	r7, sp, #0
 4995              	.LCFI233:
 4996              		.cfi_def_cfa_register 7
 4997 0006 7860     		str	r0, [r7, #4]
2982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4998              		.loc 1 2982 0
 4999 0008 7B68     		ldr	r3, [r7, #4]
 5000 000a 5B6A     		ldr	r3, [r3, #36]
 5001 000c FB60     		str	r3, [r7, #12]
2983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 5002              		.loc 1 2984 0
 5003 000e 7B68     		ldr	r3, [r7, #4]
 5004 0010 1B68     		ldr	r3, [r3]
 5005 0012 1B68     		ldr	r3, [r3]
 5006 0014 03F02003 		and	r3, r3, #32
 5007 0018 002B     		cmp	r3, #0
 5008 001a 13D1     		bne	.L233
2985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 5009              		.loc 1 2986 0
 5010 001c FB68     		ldr	r3, [r7, #12]
 5011 001e 0022     		movs	r2, #0
 5012 0020 DA84     		strh	r2, [r3, #38]	@ movhi
ARM GAS  /tmp/ccRUQzex.s 			page 140


2987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 5013              		.loc 1 2990 0
 5014 0022 FB68     		ldr	r3, [r7, #12]
 5015 0024 1B68     		ldr	r3, [r3]
 5016 0026 FA68     		ldr	r2, [r7, #12]
 5017 0028 1268     		ldr	r2, [r2]
 5018 002a 5269     		ldr	r2, [r2, #20]
 5019 002c 22F08002 		bic	r2, r2, #128
 5020 0030 5A61     		str	r2, [r3, #20]
2991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5021              		.loc 1 2993 0
 5022 0032 FB68     		ldr	r3, [r7, #12]
 5023 0034 1B68     		ldr	r3, [r3]
 5024 0036 FA68     		ldr	r2, [r7, #12]
 5025 0038 1268     		ldr	r2, [r2]
 5026 003a D268     		ldr	r2, [r2, #12]
 5027 003c 42F04002 		orr	r2, r2, #64
 5028 0040 DA60     		str	r2, [r3, #12]
2994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Circular mode */
2997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5029              		.loc 1 3007 0
 5030 0042 02E0     		b	.L235
 5031              	.L233:
3004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 5032              		.loc 1 3004 0
 5033 0044 F868     		ldr	r0, [r7, #12]
 5034 0046 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 5035              	.L235:
 5036              		.loc 1 3007 0
 5037 004a 00BF     		nop
 5038 004c 1037     		adds	r7, r7, #16
 5039              	.LCFI234:
 5040              		.cfi_def_cfa_offset 8
 5041 004e BD46     		mov	sp, r7
 5042              	.LCFI235:
 5043              		.cfi_def_cfa_register 13
 5044              		@ sp needed
 5045 0050 80BD     		pop	{r7, pc}
 5046              		.cfi_endproc
 5047              	.LFE107:
ARM GAS  /tmp/ccRUQzex.s 			page 141


 5049              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 5050              		.align	1
 5051              		.syntax unified
 5052              		.thumb
 5053              		.thumb_func
 5054              		.fpu softvfp
 5056              	UART_DMATxHalfCplt:
 5057              	.LFB108:
3008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
3011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5058              		.loc 1 3016 0
 5059              		.cfi_startproc
 5060              		@ args = 0, pretend = 0, frame = 16
 5061              		@ frame_needed = 1, uses_anonymous_args = 0
 5062 0000 80B5     		push	{r7, lr}
 5063              	.LCFI236:
 5064              		.cfi_def_cfa_offset 8
 5065              		.cfi_offset 7, -8
 5066              		.cfi_offset 14, -4
 5067 0002 84B0     		sub	sp, sp, #16
 5068              	.LCFI237:
 5069              		.cfi_def_cfa_offset 24
 5070 0004 00AF     		add	r7, sp, #0
 5071              	.LCFI238:
 5072              		.cfi_def_cfa_register 7
 5073 0006 7860     		str	r0, [r7, #4]
3017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5074              		.loc 1 3017 0
 5075 0008 7B68     		ldr	r3, [r7, #4]
 5076 000a 5B6A     		ldr	r3, [r3, #36]
 5077 000c FB60     		str	r3, [r7, #12]
3018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 5078              		.loc 1 3024 0
 5079 000e F868     		ldr	r0, [r7, #12]
 5080 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
3025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5081              		.loc 1 3026 0
 5082 0014 00BF     		nop
 5083 0016 1037     		adds	r7, r7, #16
 5084              	.LCFI239:
 5085              		.cfi_def_cfa_offset 8
 5086 0018 BD46     		mov	sp, r7
 5087              	.LCFI240:
ARM GAS  /tmp/ccRUQzex.s 			page 142


 5088              		.cfi_def_cfa_register 13
 5089              		@ sp needed
 5090 001a 80BD     		pop	{r7, pc}
 5091              		.cfi_endproc
 5092              	.LFE108:
 5094              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 5095              		.align	1
 5096              		.syntax unified
 5097              		.thumb
 5098              		.thumb_func
 5099              		.fpu softvfp
 5101              	UART_DMAReceiveCplt:
 5102              	.LFB109:
3027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
3030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5103              		.loc 1 3035 0
 5104              		.cfi_startproc
 5105              		@ args = 0, pretend = 0, frame = 16
 5106              		@ frame_needed = 1, uses_anonymous_args = 0
 5107 0000 80B5     		push	{r7, lr}
 5108              	.LCFI241:
 5109              		.cfi_def_cfa_offset 8
 5110              		.cfi_offset 7, -8
 5111              		.cfi_offset 14, -4
 5112 0002 84B0     		sub	sp, sp, #16
 5113              	.LCFI242:
 5114              		.cfi_def_cfa_offset 24
 5115 0004 00AF     		add	r7, sp, #0
 5116              	.LCFI243:
 5117              		.cfi_def_cfa_register 7
 5118 0006 7860     		str	r0, [r7, #4]
3036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5119              		.loc 1 3036 0
 5120 0008 7B68     		ldr	r3, [r7, #4]
 5121 000a 5B6A     		ldr	r3, [r3, #36]
 5122 000c FB60     		str	r3, [r7, #12]
3037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
3038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 5123              		.loc 1 3038 0
 5124 000e 7B68     		ldr	r3, [r7, #4]
 5125 0010 1B68     		ldr	r3, [r3]
 5126 0012 1B68     		ldr	r3, [r3]
 5127 0014 03F02003 		and	r3, r3, #32
 5128 0018 002B     		cmp	r3, #0
 5129 001a 2AD1     		bne	.L238
3039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
 5130              		.loc 1 3040 0
 5131 001c FB68     		ldr	r3, [r7, #12]
 5132 001e 0022     		movs	r2, #0
ARM GAS  /tmp/ccRUQzex.s 			page 143


 5133 0020 DA85     		strh	r2, [r3, #46]	@ movhi
3041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5134              		.loc 1 3043 0
 5135 0022 FB68     		ldr	r3, [r7, #12]
 5136 0024 1B68     		ldr	r3, [r3]
 5137 0026 FA68     		ldr	r2, [r7, #12]
 5138 0028 1268     		ldr	r2, [r2]
 5139 002a D268     		ldr	r2, [r2, #12]
 5140 002c 22F48072 		bic	r2, r2, #256
 5141 0030 DA60     		str	r2, [r3, #12]
3044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5142              		.loc 1 3044 0
 5143 0032 FB68     		ldr	r3, [r7, #12]
 5144 0034 1B68     		ldr	r3, [r3]
 5145 0036 FA68     		ldr	r2, [r7, #12]
 5146 0038 1268     		ldr	r2, [r2]
 5147 003a 5269     		ldr	r2, [r2, #20]
 5148 003c 22F00102 		bic	r2, r2, #1
 5149 0040 5A61     		str	r2, [r3, #20]
3045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
3047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
3048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5150              		.loc 1 3048 0
 5151 0042 FB68     		ldr	r3, [r7, #12]
 5152 0044 1B68     		ldr	r3, [r3]
 5153 0046 FA68     		ldr	r2, [r7, #12]
 5154 0048 1268     		ldr	r2, [r2]
 5155 004a 5269     		ldr	r2, [r2, #20]
 5156 004c 22F04002 		bic	r2, r2, #64
 5157 0050 5A61     		str	r2, [r3, #20]
3049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 5158              		.loc 1 3051 0
 5159 0052 FB68     		ldr	r3, [r7, #12]
 5160 0054 2022     		movs	r2, #32
 5161 0056 83F83E20 		strb	r2, [r3, #62]
3052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
3054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5162              		.loc 1 3054 0
 5163 005a FB68     		ldr	r3, [r7, #12]
 5164 005c 1B6B     		ldr	r3, [r3, #48]
 5165 005e 012B     		cmp	r3, #1
 5166 0060 07D1     		bne	.L238
3055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5167              		.loc 1 3056 0
 5168 0062 FB68     		ldr	r3, [r7, #12]
 5169 0064 1B68     		ldr	r3, [r3]
 5170 0066 FA68     		ldr	r2, [r7, #12]
 5171 0068 1268     		ldr	r2, [r2]
 5172 006a D268     		ldr	r2, [r2, #12]
 5173 006c 22F01002 		bic	r2, r2, #16
ARM GAS  /tmp/ccRUQzex.s 			page 144


 5174 0070 DA60     		str	r2, [r3, #12]
 5175              	.L238:
3057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5176              		.loc 1 3062 0
 5177 0072 FB68     		ldr	r3, [r7, #12]
 5178 0074 1B6B     		ldr	r3, [r3, #48]
 5179 0076 012B     		cmp	r3, #1
 5180 0078 06D1     		bne	.L239
3063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {  
3064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize);
3067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 5181              		.loc 1 3069 0
 5182 007a FB68     		ldr	r3, [r7, #12]
 5183 007c 9B8D     		ldrh	r3, [r3, #44]
 5184 007e 1946     		mov	r1, r3
 5185 0080 F868     		ldr	r0, [r7, #12]
 5186 0082 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Complete callback */
3075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx complete callback*/
3077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxCpltCallback(huart);
3078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx complete callback*/
3080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxCpltCallback(huart);
3081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5187              		.loc 1 3083 0
 5188 0086 02E0     		b	.L241
 5189              	.L239:
3080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 5190              		.loc 1 3080 0
 5191 0088 F868     		ldr	r0, [r7, #12]
 5192 008a FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 5193              	.L241:
 5194              		.loc 1 3083 0
 5195 008e 00BF     		nop
 5196 0090 1037     		adds	r7, r7, #16
 5197              	.LCFI244:
 5198              		.cfi_def_cfa_offset 8
 5199 0092 BD46     		mov	sp, r7
 5200              	.LCFI245:
 5201              		.cfi_def_cfa_register 13
 5202              		@ sp needed
ARM GAS  /tmp/ccRUQzex.s 			page 145


 5203 0094 80BD     		pop	{r7, pc}
 5204              		.cfi_endproc
 5205              	.LFE109:
 5207              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 5208              		.align	1
 5209              		.syntax unified
 5210              		.thumb
 5211              		.thumb_func
 5212              		.fpu softvfp
 5214              	UART_DMARxHalfCplt:
 5215              	.LFB110:
3084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
3087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5216              		.loc 1 3092 0
 5217              		.cfi_startproc
 5218              		@ args = 0, pretend = 0, frame = 16
 5219              		@ frame_needed = 1, uses_anonymous_args = 0
 5220 0000 80B5     		push	{r7, lr}
 5221              	.LCFI246:
 5222              		.cfi_def_cfa_offset 8
 5223              		.cfi_offset 7, -8
 5224              		.cfi_offset 14, -4
 5225 0002 84B0     		sub	sp, sp, #16
 5226              	.LCFI247:
 5227              		.cfi_def_cfa_offset 24
 5228 0004 00AF     		add	r7, sp, #0
 5229              	.LCFI248:
 5230              		.cfi_def_cfa_register 7
 5231 0006 7860     		str	r0, [r7, #4]
3093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5232              		.loc 1 3093 0
 5233 0008 7B68     		ldr	r3, [r7, #4]
 5234 000a 5B6A     		ldr	r3, [r3, #36]
 5235 000c FB60     		str	r3, [r7, #12]
3094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5236              		.loc 1 3097 0
 5237 000e FB68     		ldr	r3, [r7, #12]
 5238 0010 1B6B     		ldr	r3, [r3, #48]
 5239 0012 012B     		cmp	r3, #1
 5240 0014 08D1     		bne	.L243
3098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize/2U);
3102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
ARM GAS  /tmp/ccRUQzex.s 			page 146


 5241              		.loc 1 3104 0
 5242 0016 FB68     		ldr	r3, [r7, #12]
 5243 0018 9B8D     		ldrh	r3, [r3, #44]
 5244 001a 5B08     		lsrs	r3, r3, #1
 5245 001c 9BB2     		uxth	r3, r3
 5246 001e 1946     		mov	r1, r3
 5247 0020 F868     		ldr	r0, [r7, #12]
 5248 0022 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Half Complete callback */
3110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Half complete callback*/
3112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxHalfCpltCallback(huart);
3113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Half complete callback*/
3115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxHalfCpltCallback(huart);
3116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5249              		.loc 1 3118 0
 5250 0026 02E0     		b	.L245
 5251              	.L243:
3115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 5252              		.loc 1 3115 0
 5253 0028 F868     		ldr	r0, [r7, #12]
 5254 002a FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 5255              	.L245:
 5256              		.loc 1 3118 0
 5257 002e 00BF     		nop
 5258 0030 1037     		adds	r7, r7, #16
 5259              	.LCFI249:
 5260              		.cfi_def_cfa_offset 8
 5261 0032 BD46     		mov	sp, r7
 5262              	.LCFI250:
 5263              		.cfi_def_cfa_register 13
 5264              		@ sp needed
 5265 0034 80BD     		pop	{r7, pc}
 5266              		.cfi_endproc
 5267              	.LFE110:
 5269              		.section	.text.UART_DMAError,"ax",%progbits
 5270              		.align	1
 5271              		.syntax unified
 5272              		.thumb
 5273              		.thumb_func
 5274              		.fpu softvfp
 5276              	UART_DMAError:
 5277              	.LFB111:
3119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
3122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp/ccRUQzex.s 			page 147


3126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5278              		.loc 1 3127 0
 5279              		.cfi_startproc
 5280              		@ args = 0, pretend = 0, frame = 16
 5281              		@ frame_needed = 1, uses_anonymous_args = 0
 5282 0000 80B5     		push	{r7, lr}
 5283              	.LCFI251:
 5284              		.cfi_def_cfa_offset 8
 5285              		.cfi_offset 7, -8
 5286              		.cfi_offset 14, -4
 5287 0002 84B0     		sub	sp, sp, #16
 5288              	.LCFI252:
 5289              		.cfi_def_cfa_offset 24
 5290 0004 00AF     		add	r7, sp, #0
 5291              	.LCFI253:
 5292              		.cfi_def_cfa_register 7
 5293 0006 7860     		str	r0, [r7, #4]
3128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 5294              		.loc 1 3128 0
 5295 0008 0023     		movs	r3, #0
 5296 000a FB60     		str	r3, [r7, #12]
3129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5297              		.loc 1 3129 0
 5298 000c 7B68     		ldr	r3, [r7, #4]
 5299 000e 5B6A     		ldr	r3, [r3, #36]
 5300 0010 BB60     		str	r3, [r7, #8]
3130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 5301              		.loc 1 3132 0
 5302 0012 BB68     		ldr	r3, [r7, #8]
 5303 0014 1B68     		ldr	r3, [r3]
 5304 0016 5B69     		ldr	r3, [r3, #20]
 5305 0018 03F08003 		and	r3, r3, #128
 5306 001c 002B     		cmp	r3, #0
 5307 001e 14BF     		ite	ne
 5308 0020 0123     		movne	r3, #1
 5309 0022 0023     		moveq	r3, #0
 5310 0024 DBB2     		uxtb	r3, r3
 5311 0026 FB60     		str	r3, [r7, #12]
3133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 5312              		.loc 1 3133 0
 5313 0028 BB68     		ldr	r3, [r7, #8]
 5314 002a 93F83D30 		ldrb	r3, [r3, #61]
 5315 002e DBB2     		uxtb	r3, r3
 5316 0030 212B     		cmp	r3, #33
 5317 0032 08D1     		bne	.L247
 5318              		.loc 1 3133 0 is_stmt 0 discriminator 1
 5319 0034 FB68     		ldr	r3, [r7, #12]
 5320 0036 002B     		cmp	r3, #0
 5321 0038 05D0     		beq	.L247
3134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 5322              		.loc 1 3135 0 is_stmt 1
 5323 003a BB68     		ldr	r3, [r7, #8]
 5324 003c 0022     		movs	r2, #0
ARM GAS  /tmp/ccRUQzex.s 			page 148


 5325 003e DA84     		strh	r2, [r3, #38]	@ movhi
3136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 5326              		.loc 1 3136 0
 5327 0040 B868     		ldr	r0, [r7, #8]
 5328 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 5329              	.L247:
3137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 5330              		.loc 1 3140 0
 5331 0046 BB68     		ldr	r3, [r7, #8]
 5332 0048 1B68     		ldr	r3, [r3]
 5333 004a 5B69     		ldr	r3, [r3, #20]
 5334 004c 03F04003 		and	r3, r3, #64
 5335 0050 002B     		cmp	r3, #0
 5336 0052 14BF     		ite	ne
 5337 0054 0123     		movne	r3, #1
 5338 0056 0023     		moveq	r3, #0
 5339 0058 DBB2     		uxtb	r3, r3
 5340 005a FB60     		str	r3, [r7, #12]
3141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 5341              		.loc 1 3141 0
 5342 005c BB68     		ldr	r3, [r7, #8]
 5343 005e 93F83E30 		ldrb	r3, [r3, #62]
 5344 0062 DBB2     		uxtb	r3, r3
 5345 0064 222B     		cmp	r3, #34
 5346 0066 08D1     		bne	.L248
 5347              		.loc 1 3141 0 is_stmt 0 discriminator 1
 5348 0068 FB68     		ldr	r3, [r7, #12]
 5349 006a 002B     		cmp	r3, #0
 5350 006c 05D0     		beq	.L248
3142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 5351              		.loc 1 3143 0 is_stmt 1
 5352 006e BB68     		ldr	r3, [r7, #8]
 5353 0070 0022     		movs	r2, #0
 5354 0072 DA85     		strh	r2, [r3, #46]	@ movhi
3144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 5355              		.loc 1 3144 0
 5356 0074 B868     		ldr	r0, [r7, #8]
 5357 0076 FFF7FEFF 		bl	UART_EndRxTransfer
 5358              	.L248:
3145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 5359              		.loc 1 3147 0
 5360 007a BB68     		ldr	r3, [r7, #8]
 5361 007c 1B6C     		ldr	r3, [r3, #64]
 5362 007e 43F01002 		orr	r2, r3, #16
 5363 0082 BB68     		ldr	r3, [r7, #8]
 5364 0084 1A64     		str	r2, [r3, #64]
3148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
ARM GAS  /tmp/ccRUQzex.s 			page 149


3153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 5365              		.loc 1 3153 0
 5366 0086 B868     		ldr	r0, [r7, #8]
 5367 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5368              		.loc 1 3155 0
 5369 008c 00BF     		nop
 5370 008e 1037     		adds	r7, r7, #16
 5371              	.LCFI254:
 5372              		.cfi_def_cfa_offset 8
 5373 0090 BD46     		mov	sp, r7
 5374              	.LCFI255:
 5375              		.cfi_def_cfa_register 13
 5376              		@ sp needed
 5377 0092 80BD     		pop	{r7, pc}
 5378              		.cfi_endproc
 5379              	.LFE111:
 5381              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 5382              		.align	1
 5383              		.syntax unified
 5384              		.thumb
 5385              		.thumb_func
 5386              		.fpu softvfp
 5388              	UART_WaitOnFlagUntilTimeout:
 5389              	.LFB112:
3156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
3159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
3162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Status The new Flag status (SET or RESET).
3163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Tickstart Tick start value
3164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
3165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
3168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5390              		.loc 1 3168 0
 5391              		.cfi_startproc
 5392              		@ args = 4, pretend = 0, frame = 16
 5393              		@ frame_needed = 1, uses_anonymous_args = 0
 5394 0000 80B5     		push	{r7, lr}
 5395              	.LCFI256:
 5396              		.cfi_def_cfa_offset 8
 5397              		.cfi_offset 7, -8
 5398              		.cfi_offset 14, -4
 5399 0002 84B0     		sub	sp, sp, #16
 5400              	.LCFI257:
 5401              		.cfi_def_cfa_offset 24
 5402 0004 00AF     		add	r7, sp, #0
 5403              	.LCFI258:
 5404              		.cfi_def_cfa_register 7
 5405 0006 F860     		str	r0, [r7, #12]
 5406 0008 B960     		str	r1, [r7, #8]
 5407 000a 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccRUQzex.s 			page 150


 5408 000c 1346     		mov	r3, r2
 5409 000e FB71     		strb	r3, [r7, #7]
3169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 5410              		.loc 1 3170 0
 5411 0010 2CE0     		b	.L250
 5412              	.L253:
3171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check for the Timeout */
3173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
 5413              		.loc 1 3173 0
 5414 0012 BB69     		ldr	r3, [r7, #24]
 5415 0014 B3F1FF3F 		cmp	r3, #-1
 5416 0018 28D0     		beq	.L250
3174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 5417              		.loc 1 3175 0
 5418 001a BB69     		ldr	r3, [r7, #24]
 5419 001c 002B     		cmp	r3, #0
 5420 001e 07D0     		beq	.L251
 5421              		.loc 1 3175 0 is_stmt 0 discriminator 1
 5422 0020 FFF7FEFF 		bl	HAL_GetTick
 5423 0024 0246     		mov	r2, r0
 5424 0026 3B68     		ldr	r3, [r7]
 5425 0028 D21A     		subs	r2, r2, r3
 5426 002a BB69     		ldr	r3, [r7, #24]
 5427 002c 9A42     		cmp	r2, r3
 5428 002e 1DD9     		bls	.L250
 5429              	.L251:
3176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
3178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 5430              		.loc 1 3178 0 is_stmt 1
 5431 0030 FB68     		ldr	r3, [r7, #12]
 5432 0032 1B68     		ldr	r3, [r3]
 5433 0034 FA68     		ldr	r2, [r7, #12]
 5434 0036 1268     		ldr	r2, [r2]
 5435 0038 D268     		ldr	r2, [r2, #12]
 5436 003a 22F4D072 		bic	r2, r2, #416
 5437 003e DA60     		str	r2, [r3, #12]
3179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5438              		.loc 1 3179 0
 5439 0040 FB68     		ldr	r3, [r7, #12]
 5440 0042 1B68     		ldr	r3, [r3]
 5441 0044 FA68     		ldr	r2, [r7, #12]
 5442 0046 1268     		ldr	r2, [r2]
 5443 0048 5269     		ldr	r2, [r2, #20]
 5444 004a 22F00102 		bic	r2, r2, #1
 5445 004e 5A61     		str	r2, [r3, #20]
3180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 5446              		.loc 1 3181 0
 5447 0050 FB68     		ldr	r3, [r7, #12]
 5448 0052 2022     		movs	r2, #32
 5449 0054 83F83D20 		strb	r2, [r3, #61]
3182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 5450              		.loc 1 3182 0
ARM GAS  /tmp/ccRUQzex.s 			page 151


 5451 0058 FB68     		ldr	r3, [r7, #12]
 5452 005a 2022     		movs	r2, #32
 5453 005c 83F83E20 		strb	r2, [r3, #62]
3183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Process Unlocked */
3185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 5454              		.loc 1 3185 0
 5455 0060 FB68     		ldr	r3, [r7, #12]
 5456 0062 0022     		movs	r2, #0
 5457 0064 83F83C20 		strb	r2, [r3, #60]
3186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 5458              		.loc 1 3187 0
 5459 0068 0323     		movs	r3, #3
 5460 006a 0FE0     		b	.L252
 5461              	.L250:
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 5462              		.loc 1 3170 0
 5463 006c FB68     		ldr	r3, [r7, #12]
 5464 006e 1B68     		ldr	r3, [r3]
 5465 0070 1A68     		ldr	r2, [r3]
 5466 0072 BB68     		ldr	r3, [r7, #8]
 5467 0074 1A40     		ands	r2, r2, r3
 5468 0076 BB68     		ldr	r3, [r7, #8]
 5469 0078 9A42     		cmp	r2, r3
 5470 007a 0CBF     		ite	eq
 5471 007c 0123     		moveq	r3, #1
 5472 007e 0023     		movne	r3, #0
 5473 0080 DBB2     		uxtb	r3, r3
 5474 0082 1A46     		mov	r2, r3
 5475 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5476 0086 9A42     		cmp	r2, r3
 5477 0088 C3D0     		beq	.L253
3188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5478              		.loc 1 3191 0
 5479 008a 0023     		movs	r3, #0
 5480              	.L252:
3192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5481              		.loc 1 3192 0
 5482 008c 1846     		mov	r0, r3
 5483 008e 1037     		adds	r7, r7, #16
 5484              	.LCFI259:
 5485              		.cfi_def_cfa_offset 8
 5486 0090 BD46     		mov	sp, r7
 5487              	.LCFI260:
 5488              		.cfi_def_cfa_register 13
 5489              		@ sp needed
 5490 0092 80BD     		pop	{r7, pc}
 5491              		.cfi_endproc
 5492              	.LFE112:
 5494              		.section	.text.UART_Start_Receive_IT,"ax",%progbits
 5495              		.align	1
 5496              		.global	UART_Start_Receive_IT
 5497              		.syntax unified
ARM GAS  /tmp/ccRUQzex.s 			page 152


 5498              		.thumb
 5499              		.thumb_func
 5500              		.fpu softvfp
 5502              	UART_Start_Receive_IT:
 5503              	.LFB113:
3193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in interrupt mode.
3196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in Interrupt mode
3197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5504              		.loc 1 3206 0
 5505              		.cfi_startproc
 5506              		@ args = 0, pretend = 0, frame = 16
 5507              		@ frame_needed = 1, uses_anonymous_args = 0
 5508              		@ link register save eliminated.
 5509 0000 80B4     		push	{r7}
 5510              	.LCFI261:
 5511              		.cfi_def_cfa_offset 4
 5512              		.cfi_offset 7, -4
 5513 0002 85B0     		sub	sp, sp, #20
 5514              	.LCFI262:
 5515              		.cfi_def_cfa_offset 24
 5516 0004 00AF     		add	r7, sp, #0
 5517              	.LCFI263:
 5518              		.cfi_def_cfa_register 7
 5519 0006 F860     		str	r0, [r7, #12]
 5520 0008 B960     		str	r1, [r7, #8]
 5521 000a 1346     		mov	r3, r2
 5522 000c FB80     		strh	r3, [r7, #6]	@ movhi
3207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 5523              		.loc 1 3207 0
 5524 000e FB68     		ldr	r3, [r7, #12]
 5525 0010 BA68     		ldr	r2, [r7, #8]
 5526 0012 9A62     		str	r2, [r3, #40]
3208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 5527              		.loc 1 3208 0
 5528 0014 FB68     		ldr	r3, [r7, #12]
 5529 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5530 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = Size;
 5531              		.loc 1 3209 0
 5532 001a FB68     		ldr	r3, [r7, #12]
 5533 001c FA88     		ldrh	r2, [r7, #6]	@ movhi
 5534 001e DA85     		strh	r2, [r3, #46]	@ movhi
3210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5535              		.loc 1 3211 0
 5536 0020 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 153


 5537 0022 0022     		movs	r2, #0
 5538 0024 1A64     		str	r2, [r3, #64]
3212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 5539              		.loc 1 3212 0
 5540 0026 FB68     		ldr	r3, [r7, #12]
 5541 0028 2222     		movs	r2, #34
 5542 002a 83F83E20 		strb	r2, [r3, #62]
3213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
3215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 5543              		.loc 1 3215 0
 5544 002e FB68     		ldr	r3, [r7, #12]
 5545 0030 0022     		movs	r2, #0
 5546 0032 83F83C20 		strb	r2, [r3, #60]
3216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Parity Error Interrupt */
3218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 5547              		.loc 1 3218 0
 5548 0036 FB68     		ldr	r3, [r7, #12]
 5549 0038 1B68     		ldr	r3, [r3]
 5550 003a FA68     		ldr	r2, [r7, #12]
 5551 003c 1268     		ldr	r2, [r2]
 5552 003e D268     		ldr	r2, [r2, #12]
 5553 0040 42F48072 		orr	r2, r2, #256
 5554 0044 DA60     		str	r2, [r3, #12]
3219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 5555              		.loc 1 3221 0
 5556 0046 FB68     		ldr	r3, [r7, #12]
 5557 0048 1B68     		ldr	r3, [r3]
 5558 004a FA68     		ldr	r2, [r7, #12]
 5559 004c 1268     		ldr	r2, [r2]
 5560 004e 5269     		ldr	r2, [r2, #20]
 5561 0050 42F00102 		orr	r2, r2, #1
 5562 0054 5A61     		str	r2, [r3, #20]
3222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Data Register not empty Interrupt */
3224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 5563              		.loc 1 3224 0
 5564 0056 FB68     		ldr	r3, [r7, #12]
 5565 0058 1B68     		ldr	r3, [r3]
 5566 005a FA68     		ldr	r2, [r7, #12]
 5567 005c 1268     		ldr	r2, [r2]
 5568 005e D268     		ldr	r2, [r2, #12]
 5569 0060 42F02002 		orr	r2, r2, #32
 5570 0064 DA60     		str	r2, [r3, #12]
3225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5571              		.loc 1 3226 0
 5572 0066 0023     		movs	r3, #0
3227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5573              		.loc 1 3227 0
 5574 0068 1846     		mov	r0, r3
 5575 006a 1437     		adds	r7, r7, #20
 5576              	.LCFI264:
 5577              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRUQzex.s 			page 154


 5578 006c BD46     		mov	sp, r7
 5579              	.LCFI265:
 5580              		.cfi_def_cfa_register 13
 5581              		@ sp needed
 5582 006e 80BC     		pop	{r7}
 5583              	.LCFI266:
 5584              		.cfi_restore 7
 5585              		.cfi_def_cfa_offset 0
 5586 0070 7047     		bx	lr
 5587              		.cfi_endproc
 5588              	.LFE113:
 5590              		.section	.text.UART_Start_Receive_DMA,"ax",%progbits
 5591              		.align	1
 5592              		.global	UART_Start_Receive_DMA
 5593              		.syntax unified
 5594              		.thumb
 5595              		.thumb_func
 5596              		.fpu softvfp
 5598              	UART_Start_Receive_DMA:
 5599              	.LFB114:
3228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in DMA mode.
3231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in DMA mode.
3232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5600              		.loc 1 3241 0
 5601              		.cfi_startproc
 5602              		@ args = 0, pretend = 0, frame = 24
 5603              		@ frame_needed = 1, uses_anonymous_args = 0
 5604 0000 80B5     		push	{r7, lr}
 5605              	.LCFI267:
 5606              		.cfi_def_cfa_offset 8
 5607              		.cfi_offset 7, -8
 5608              		.cfi_offset 14, -4
 5609 0002 86B0     		sub	sp, sp, #24
 5610              	.LCFI268:
 5611              		.cfi_def_cfa_offset 32
 5612 0004 00AF     		add	r7, sp, #0
 5613              	.LCFI269:
 5614              		.cfi_def_cfa_register 7
 5615 0006 F860     		str	r0, [r7, #12]
 5616 0008 B960     		str	r1, [r7, #8]
 5617 000a 1346     		mov	r3, r2
 5618 000c FB80     		strh	r3, [r7, #6]	@ movhi
3242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
3243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 5619              		.loc 1 3244 0
ARM GAS  /tmp/ccRUQzex.s 			page 155


 5620 000e BA68     		ldr	r2, [r7, #8]
 5621 0010 FB68     		ldr	r3, [r7, #12]
 5622 0012 9A62     		str	r2, [r3, #40]
3245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 5623              		.loc 1 3245 0
 5624 0014 FB68     		ldr	r3, [r7, #12]
 5625 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5626 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5627              		.loc 1 3247 0
 5628 001a FB68     		ldr	r3, [r7, #12]
 5629 001c 0022     		movs	r2, #0
 5630 001e 1A64     		str	r2, [r3, #64]
3248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 5631              		.loc 1 3248 0
 5632 0020 FB68     		ldr	r3, [r7, #12]
 5633 0022 2222     		movs	r2, #34
 5634 0024 83F83E20 		strb	r2, [r3, #62]
3249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA transfer complete callback */
3251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 5635              		.loc 1 3251 0
 5636 0028 FB68     		ldr	r3, [r7, #12]
 5637 002a 9B6B     		ldr	r3, [r3, #56]
 5638 002c 234A     		ldr	r2, .L258
 5639 002e 9A62     		str	r2, [r3, #40]
3252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA Half transfer complete callback */
3254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 5640              		.loc 1 3254 0
 5641 0030 FB68     		ldr	r3, [r7, #12]
 5642 0032 9B6B     		ldr	r3, [r3, #56]
 5643 0034 224A     		ldr	r2, .L258+4
 5644 0036 DA62     		str	r2, [r3, #44]
3255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA error callback */
3257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferErrorCallback = UART_DMAError;
 5645              		.loc 1 3257 0
 5646 0038 FB68     		ldr	r3, [r7, #12]
 5647 003a 9B6B     		ldr	r3, [r3, #56]
 5648 003c 214A     		ldr	r2, .L258+8
 5649 003e 1A63     		str	r2, [r3, #48]
3258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA abort callback */
3260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 5650              		.loc 1 3260 0
 5651 0040 FB68     		ldr	r3, [r7, #12]
 5652 0042 9B6B     		ldr	r3, [r3, #56]
 5653 0044 0022     		movs	r2, #0
 5654 0046 5A63     		str	r2, [r3, #52]
3261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA stream */
3263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmp = (uint32_t *)&pData;
 5655              		.loc 1 3263 0
 5656 0048 07F10803 		add	r3, r7, #8
 5657 004c 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccRUQzex.s 			page 156


3264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 5658              		.loc 1 3264 0
 5659 004e FB68     		ldr	r3, [r7, #12]
 5660 0050 986B     		ldr	r0, [r3, #56]
 5661 0052 FB68     		ldr	r3, [r7, #12]
 5662 0054 1B68     		ldr	r3, [r3]
 5663 0056 0433     		adds	r3, r3, #4
 5664 0058 1946     		mov	r1, r3
 5665 005a 7B69     		ldr	r3, [r7, #20]
 5666 005c 1A68     		ldr	r2, [r3]
 5667 005e FB88     		ldrh	r3, [r7, #6]
 5668 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 5669              	.LBB11:
3265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the secon
3267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_CLEAR_OREFLAG(huart);
 5670              		.loc 1 3267 0
 5671 0064 0023     		movs	r3, #0
 5672 0066 3B61     		str	r3, [r7, #16]
 5673 0068 FB68     		ldr	r3, [r7, #12]
 5674 006a 1B68     		ldr	r3, [r3]
 5675 006c 1B68     		ldr	r3, [r3]
 5676 006e 3B61     		str	r3, [r7, #16]
 5677 0070 FB68     		ldr	r3, [r7, #12]
 5678 0072 1B68     		ldr	r3, [r3]
 5679 0074 5B68     		ldr	r3, [r3, #4]
 5680 0076 3B61     		str	r3, [r7, #16]
 5681 0078 3B69     		ldr	r3, [r7, #16]
 5682              	.LBE11:
3268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
3270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 5683              		.loc 1 3270 0
 5684 007a FB68     		ldr	r3, [r7, #12]
 5685 007c 0022     		movs	r2, #0
 5686 007e 83F83C20 		strb	r2, [r3, #60]
3271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Parity Error Interrupt */
3273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5687              		.loc 1 3273 0
 5688 0082 FB68     		ldr	r3, [r7, #12]
 5689 0084 1B68     		ldr	r3, [r3]
 5690 0086 FA68     		ldr	r2, [r7, #12]
 5691 0088 1268     		ldr	r2, [r2]
 5692 008a D268     		ldr	r2, [r2, #12]
 5693 008c 42F48072 		orr	r2, r2, #256
 5694 0090 DA60     		str	r2, [r3, #12]
3274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5695              		.loc 1 3276 0
 5696 0092 FB68     		ldr	r3, [r7, #12]
 5697 0094 1B68     		ldr	r3, [r3]
 5698 0096 FA68     		ldr	r2, [r7, #12]
 5699 0098 1268     		ldr	r2, [r2]
 5700 009a 5269     		ldr	r2, [r2, #20]
 5701 009c 42F00102 		orr	r2, r2, #1
ARM GAS  /tmp/ccRUQzex.s 			page 157


 5702 00a0 5A61     		str	r2, [r3, #20]
3277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA transfer for the receiver request by setting the DMAR bit
3279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   in the UART CR3 register */
3280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5703              		.loc 1 3280 0
 5704 00a2 FB68     		ldr	r3, [r7, #12]
 5705 00a4 1B68     		ldr	r3, [r3]
 5706 00a6 FA68     		ldr	r2, [r7, #12]
 5707 00a8 1268     		ldr	r2, [r2]
 5708 00aa 5269     		ldr	r2, [r2, #20]
 5709 00ac 42F04002 		orr	r2, r2, #64
 5710 00b0 5A61     		str	r2, [r3, #20]
3281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5711              		.loc 1 3282 0
 5712 00b2 0023     		movs	r3, #0
3283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5713              		.loc 1 3283 0
 5714 00b4 1846     		mov	r0, r3
 5715 00b6 1837     		adds	r7, r7, #24
 5716              	.LCFI270:
 5717              		.cfi_def_cfa_offset 8
 5718 00b8 BD46     		mov	sp, r7
 5719              	.LCFI271:
 5720              		.cfi_def_cfa_register 13
 5721              		@ sp needed
 5722 00ba 80BD     		pop	{r7, pc}
 5723              	.L259:
 5724              		.align	2
 5725              	.L258:
 5726 00bc 00000000 		.word	UART_DMAReceiveCplt
 5727 00c0 00000000 		.word	UART_DMARxHalfCplt
 5728 00c4 00000000 		.word	UART_DMAError
 5729              		.cfi_endproc
 5730              	.LFE114:
 5732              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 5733              		.align	1
 5734              		.syntax unified
 5735              		.thumb
 5736              		.thumb_func
 5737              		.fpu softvfp
 5739              	UART_EndTxTransfer:
 5740              	.LFB115:
3284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5741              		.loc 1 3291 0
 5742              		.cfi_startproc
 5743              		@ args = 0, pretend = 0, frame = 8
 5744              		@ frame_needed = 1, uses_anonymous_args = 0
 5745              		@ link register save eliminated.
ARM GAS  /tmp/ccRUQzex.s 			page 158


 5746 0000 80B4     		push	{r7}
 5747              	.LCFI272:
 5748              		.cfi_def_cfa_offset 4
 5749              		.cfi_offset 7, -4
 5750 0002 83B0     		sub	sp, sp, #12
 5751              	.LCFI273:
 5752              		.cfi_def_cfa_offset 16
 5753 0004 00AF     		add	r7, sp, #0
 5754              	.LCFI274:
 5755              		.cfi_def_cfa_register 7
 5756 0006 7860     		str	r0, [r7, #4]
3292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 5757              		.loc 1 3293 0
 5758 0008 7B68     		ldr	r3, [r7, #4]
 5759 000a 1B68     		ldr	r3, [r3]
 5760 000c 7A68     		ldr	r2, [r7, #4]
 5761 000e 1268     		ldr	r2, [r2]
 5762 0010 D268     		ldr	r2, [r2, #12]
 5763 0012 22F0C002 		bic	r2, r2, #192
 5764 0016 DA60     		str	r2, [r3, #12]
3294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5765              		.loc 1 3296 0
 5766 0018 7B68     		ldr	r3, [r7, #4]
 5767 001a 2022     		movs	r2, #32
 5768 001c 83F83D20 		strb	r2, [r3, #61]
3297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5769              		.loc 1 3297 0
 5770 0020 00BF     		nop
 5771 0022 0C37     		adds	r7, r7, #12
 5772              	.LCFI275:
 5773              		.cfi_def_cfa_offset 4
 5774 0024 BD46     		mov	sp, r7
 5775              	.LCFI276:
 5776              		.cfi_def_cfa_register 13
 5777              		@ sp needed
 5778 0026 80BC     		pop	{r7}
 5779              	.LCFI277:
 5780              		.cfi_restore 7
 5781              		.cfi_def_cfa_offset 0
 5782 0028 7047     		bx	lr
 5783              		.cfi_endproc
 5784              	.LFE115:
 5786              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 5787              		.align	1
 5788              		.syntax unified
 5789              		.thumb
 5790              		.thumb_func
 5791              		.fpu softvfp
 5793              	UART_EndRxTransfer:
 5794              	.LFB116:
3298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
ARM GAS  /tmp/ccRUQzex.s 			page 159


3302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5795              		.loc 1 3305 0
 5796              		.cfi_startproc
 5797              		@ args = 0, pretend = 0, frame = 8
 5798              		@ frame_needed = 1, uses_anonymous_args = 0
 5799              		@ link register save eliminated.
 5800 0000 80B4     		push	{r7}
 5801              	.LCFI278:
 5802              		.cfi_def_cfa_offset 4
 5803              		.cfi_offset 7, -4
 5804 0002 83B0     		sub	sp, sp, #12
 5805              	.LCFI279:
 5806              		.cfi_def_cfa_offset 16
 5807 0004 00AF     		add	r7, sp, #0
 5808              	.LCFI280:
 5809              		.cfi_def_cfa_register 7
 5810 0006 7860     		str	r0, [r7, #4]
3306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 5811              		.loc 1 3307 0
 5812 0008 7B68     		ldr	r3, [r7, #4]
 5813 000a 1B68     		ldr	r3, [r3]
 5814 000c 7A68     		ldr	r2, [r7, #4]
 5815 000e 1268     		ldr	r2, [r2]
 5816 0010 D268     		ldr	r2, [r2, #12]
 5817 0012 22F49072 		bic	r2, r2, #288
 5818 0016 DA60     		str	r2, [r3, #12]
3308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5819              		.loc 1 3308 0
 5820 0018 7B68     		ldr	r3, [r7, #4]
 5821 001a 1B68     		ldr	r3, [r3]
 5822 001c 7A68     		ldr	r2, [r7, #4]
 5823 001e 1268     		ldr	r2, [r2]
 5824 0020 5269     		ldr	r2, [r2, #20]
 5825 0022 22F00102 		bic	r2, r2, #1
 5826 0026 5A61     		str	r2, [r3, #20]
3309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
3311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5827              		.loc 1 3311 0
 5828 0028 7B68     		ldr	r3, [r7, #4]
 5829 002a 1B6B     		ldr	r3, [r3, #48]
 5830 002c 012B     		cmp	r3, #1
 5831 002e 07D1     		bne	.L262
3312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5832              		.loc 1 3313 0
 5833 0030 7B68     		ldr	r3, [r7, #4]
 5834 0032 1B68     		ldr	r3, [r3]
 5835 0034 7A68     		ldr	r2, [r7, #4]
 5836 0036 1268     		ldr	r2, [r2]
 5837 0038 D268     		ldr	r2, [r2, #12]
 5838 003a 22F01002 		bic	r2, r2, #16
 5839 003e DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 160


 5840              	.L262:
3314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5841              		.loc 1 3317 0
 5842 0040 7B68     		ldr	r3, [r7, #4]
 5843 0042 2022     		movs	r2, #32
 5844 0044 83F83E20 		strb	r2, [r3, #62]
3318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5845              		.loc 1 3318 0
 5846 0048 7B68     		ldr	r3, [r7, #4]
 5847 004a 0022     		movs	r2, #0
 5848 004c 1A63     		str	r2, [r3, #48]
3319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5849              		.loc 1 3319 0
 5850 004e 00BF     		nop
 5851 0050 0C37     		adds	r7, r7, #12
 5852              	.LCFI281:
 5853              		.cfi_def_cfa_offset 4
 5854 0052 BD46     		mov	sp, r7
 5855              	.LCFI282:
 5856              		.cfi_def_cfa_register 13
 5857              		@ sp needed
 5858 0054 80BC     		pop	{r7}
 5859              	.LCFI283:
 5860              		.cfi_restore 7
 5861              		.cfi_def_cfa_offset 0
 5862 0056 7047     		bx	lr
 5863              		.cfi_endproc
 5864              	.LFE116:
 5866              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 5867              		.align	1
 5868              		.syntax unified
 5869              		.thumb
 5870              		.thumb_func
 5871              		.fpu softvfp
 5873              	UART_DMAAbortOnError:
 5874              	.LFB117:
3320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5875              		.loc 1 3329 0
 5876              		.cfi_startproc
 5877              		@ args = 0, pretend = 0, frame = 16
 5878              		@ frame_needed = 1, uses_anonymous_args = 0
 5879 0000 80B5     		push	{r7, lr}
 5880              	.LCFI284:
 5881              		.cfi_def_cfa_offset 8
 5882              		.cfi_offset 7, -8
ARM GAS  /tmp/ccRUQzex.s 			page 161


 5883              		.cfi_offset 14, -4
 5884 0002 84B0     		sub	sp, sp, #16
 5885              	.LCFI285:
 5886              		.cfi_def_cfa_offset 24
 5887 0004 00AF     		add	r7, sp, #0
 5888              	.LCFI286:
 5889              		.cfi_def_cfa_register 7
 5890 0006 7860     		str	r0, [r7, #4]
3330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5891              		.loc 1 3330 0
 5892 0008 7B68     		ldr	r3, [r7, #4]
 5893 000a 5B6A     		ldr	r3, [r3, #36]
 5894 000c FB60     		str	r3, [r7, #12]
3331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 5895              		.loc 1 3331 0
 5896 000e FB68     		ldr	r3, [r7, #12]
 5897 0010 0022     		movs	r2, #0
 5898 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 5899              		.loc 1 3332 0
 5900 0014 FB68     		ldr	r3, [r7, #12]
 5901 0016 0022     		movs	r2, #0
 5902 0018 DA84     		strh	r2, [r3, #38]	@ movhi
3333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 5903              		.loc 1 3339 0
 5904 001a F868     		ldr	r0, [r7, #12]
 5905 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
3340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5906              		.loc 1 3341 0
 5907 0020 00BF     		nop
 5908 0022 1037     		adds	r7, r7, #16
 5909              	.LCFI287:
 5910              		.cfi_def_cfa_offset 8
 5911 0024 BD46     		mov	sp, r7
 5912              	.LCFI288:
 5913              		.cfi_def_cfa_register 13
 5914              		@ sp needed
 5915 0026 80BD     		pop	{r7, pc}
 5916              		.cfi_endproc
 5917              	.LFE117:
 5919              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 5920              		.align	1
 5921              		.syntax unified
 5922              		.thumb
 5923              		.thumb_func
 5924              		.fpu softvfp
 5926              	UART_DMATxAbortCallback:
 5927              	.LFB118:
3342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
ARM GAS  /tmp/ccRUQzex.s 			page 162


3344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5928              		.loc 1 3353 0
 5929              		.cfi_startproc
 5930              		@ args = 0, pretend = 0, frame = 16
 5931              		@ frame_needed = 1, uses_anonymous_args = 0
 5932 0000 80B5     		push	{r7, lr}
 5933              	.LCFI289:
 5934              		.cfi_def_cfa_offset 8
 5935              		.cfi_offset 7, -8
 5936              		.cfi_offset 14, -4
 5937 0002 84B0     		sub	sp, sp, #16
 5938              	.LCFI290:
 5939              		.cfi_def_cfa_offset 24
 5940 0004 00AF     		add	r7, sp, #0
 5941              	.LCFI291:
 5942              		.cfi_def_cfa_register 7
 5943 0006 7860     		str	r0, [r7, #4]
3354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 5944              		.loc 1 3354 0
 5945 0008 7B68     		ldr	r3, [r7, #4]
 5946 000a 5B6A     		ldr	r3, [r3, #36]
 5947 000c FB60     		str	r3, [r7, #12]
3355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 5948              		.loc 1 3356 0
 5949 000e FB68     		ldr	r3, [r7, #12]
 5950 0010 5B6B     		ldr	r3, [r3, #52]
 5951 0012 0022     		movs	r2, #0
 5952 0014 5A63     		str	r2, [r3, #52]
3357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 5953              		.loc 1 3359 0
 5954 0016 FB68     		ldr	r3, [r7, #12]
 5955 0018 9B6B     		ldr	r3, [r3, #56]
 5956 001a 002B     		cmp	r3, #0
 5957 001c 04D0     		beq	.L265
3360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
 5958              		.loc 1 3361 0
 5959 001e FB68     		ldr	r3, [r7, #12]
 5960 0020 9B6B     		ldr	r3, [r3, #56]
 5961 0022 5B6B     		ldr	r3, [r3, #52]
 5962 0024 002B     		cmp	r3, #0
 5963 0026 17D1     		bne	.L267
 5964              	.L265:
3362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
ARM GAS  /tmp/ccRUQzex.s 			page 163


3364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 5965              		.loc 1 3368 0
 5966 0028 FB68     		ldr	r3, [r7, #12]
 5967 002a 0022     		movs	r2, #0
 5968 002c DA84     		strh	r2, [r3, #38]	@ movhi
3369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 5969              		.loc 1 3369 0
 5970 002e FB68     		ldr	r3, [r7, #12]
 5971 0030 0022     		movs	r2, #0
 5972 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5973              		.loc 1 3372 0
 5974 0034 FB68     		ldr	r3, [r7, #12]
 5975 0036 0022     		movs	r2, #0
 5976 0038 1A64     		str	r2, [r3, #64]
3373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 5977              		.loc 1 3375 0
 5978 003a FB68     		ldr	r3, [r7, #12]
 5979 003c 2022     		movs	r2, #32
 5980 003e 83F83D20 		strb	r2, [r3, #61]
3376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5981              		.loc 1 3376 0
 5982 0042 FB68     		ldr	r3, [r7, #12]
 5983 0044 2022     		movs	r2, #32
 5984 0046 83F83E20 		strb	r2, [r3, #62]
3377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5985              		.loc 1 3377 0
 5986 004a FB68     		ldr	r3, [r7, #12]
 5987 004c 0022     		movs	r2, #0
 5988 004e 1A63     		str	r2, [r3, #48]
3378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 5989              		.loc 1 3385 0
 5990 0050 F868     		ldr	r0, [r7, #12]
 5991 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 5992 0056 00E0     		b	.L264
 5993              	.L267:
3363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 5994              		.loc 1 3363 0
 5995 0058 00BF     		nop
 5996              	.L264:
3386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccRUQzex.s 			page 164


 5997              		.loc 1 3387 0
 5998 005a 1037     		adds	r7, r7, #16
 5999              	.LCFI292:
 6000              		.cfi_def_cfa_offset 8
 6001 005c BD46     		mov	sp, r7
 6002              	.LCFI293:
 6003              		.cfi_def_cfa_register 13
 6004              		@ sp needed
 6005 005e 80BD     		pop	{r7, pc}
 6006              		.cfi_endproc
 6007              	.LFE118:
 6009              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 6010              		.align	1
 6011              		.syntax unified
 6012              		.thumb
 6013              		.thumb_func
 6014              		.fpu softvfp
 6016              	UART_DMARxAbortCallback:
 6017              	.LFB119:
3388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6018              		.loc 1 3399 0
 6019              		.cfi_startproc
 6020              		@ args = 0, pretend = 0, frame = 16
 6021              		@ frame_needed = 1, uses_anonymous_args = 0
 6022 0000 80B5     		push	{r7, lr}
 6023              	.LCFI294:
 6024              		.cfi_def_cfa_offset 8
 6025              		.cfi_offset 7, -8
 6026              		.cfi_offset 14, -4
 6027 0002 84B0     		sub	sp, sp, #16
 6028              	.LCFI295:
 6029              		.cfi_def_cfa_offset 24
 6030 0004 00AF     		add	r7, sp, #0
 6031              	.LCFI296:
 6032              		.cfi_def_cfa_register 7
 6033 0006 7860     		str	r0, [r7, #4]
3400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6034              		.loc 1 3400 0
 6035 0008 7B68     		ldr	r3, [r7, #4]
 6036 000a 5B6A     		ldr	r3, [r3, #36]
 6037 000c FB60     		str	r3, [r7, #12]
3401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 6038              		.loc 1 3402 0
 6039 000e FB68     		ldr	r3, [r7, #12]
 6040 0010 9B6B     		ldr	r3, [r3, #56]
ARM GAS  /tmp/ccRUQzex.s 			page 165


 6041 0012 0022     		movs	r2, #0
 6042 0014 5A63     		str	r2, [r3, #52]
3403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 6043              		.loc 1 3405 0
 6044 0016 FB68     		ldr	r3, [r7, #12]
 6045 0018 5B6B     		ldr	r3, [r3, #52]
 6046 001a 002B     		cmp	r3, #0
 6047 001c 04D0     		beq	.L269
3406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
 6048              		.loc 1 3407 0
 6049 001e FB68     		ldr	r3, [r7, #12]
 6050 0020 5B6B     		ldr	r3, [r3, #52]
 6051 0022 5B6B     		ldr	r3, [r3, #52]
 6052 0024 002B     		cmp	r3, #0
 6053 0026 17D1     		bne	.L271
 6054              	.L269:
3408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 6055              		.loc 1 3414 0
 6056 0028 FB68     		ldr	r3, [r7, #12]
 6057 002a 0022     		movs	r2, #0
 6058 002c DA84     		strh	r2, [r3, #38]	@ movhi
3415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 6059              		.loc 1 3415 0
 6060 002e FB68     		ldr	r3, [r7, #12]
 6061 0030 0022     		movs	r2, #0
 6062 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 6063              		.loc 1 3418 0
 6064 0034 FB68     		ldr	r3, [r7, #12]
 6065 0036 0022     		movs	r2, #0
 6066 0038 1A64     		str	r2, [r3, #64]
3419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 6067              		.loc 1 3421 0
 6068 003a FB68     		ldr	r3, [r7, #12]
 6069 003c 2022     		movs	r2, #32
 6070 003e 83F83D20 		strb	r2, [r3, #61]
3422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6071              		.loc 1 3422 0
 6072 0042 FB68     		ldr	r3, [r7, #12]
 6073 0044 2022     		movs	r2, #32
 6074 0046 83F83E20 		strb	r2, [r3, #62]
3423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6075              		.loc 1 3423 0
 6076 004a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 166


 6077 004c 0022     		movs	r2, #0
 6078 004e 1A63     		str	r2, [r3, #48]
3424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 6079              		.loc 1 3431 0
 6080 0050 F868     		ldr	r0, [r7, #12]
 6081 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 6082 0056 00E0     		b	.L268
 6083              	.L271:
3409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 6084              		.loc 1 3409 0
 6085 0058 00BF     		nop
 6086              	.L268:
3432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6087              		.loc 1 3433 0
 6088 005a 1037     		adds	r7, r7, #16
 6089              	.LCFI297:
 6090              		.cfi_def_cfa_offset 8
 6091 005c BD46     		mov	sp, r7
 6092              	.LCFI298:
 6093              		.cfi_def_cfa_register 13
 6094              		@ sp needed
 6095 005e 80BD     		pop	{r7, pc}
 6096              		.cfi_endproc
 6097              	.LFE119:
 6099              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 6100              		.align	1
 6101              		.syntax unified
 6102              		.thumb
 6103              		.thumb_func
 6104              		.fpu softvfp
 6106              	UART_DMATxOnlyAbortCallback:
 6107              	.LFB120:
3434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6108              		.loc 1 3445 0
 6109              		.cfi_startproc
 6110              		@ args = 0, pretend = 0, frame = 16
 6111              		@ frame_needed = 1, uses_anonymous_args = 0
 6112 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccRUQzex.s 			page 167


 6113              	.LCFI299:
 6114              		.cfi_def_cfa_offset 8
 6115              		.cfi_offset 7, -8
 6116              		.cfi_offset 14, -4
 6117 0002 84B0     		sub	sp, sp, #16
 6118              	.LCFI300:
 6119              		.cfi_def_cfa_offset 24
 6120 0004 00AF     		add	r7, sp, #0
 6121              	.LCFI301:
 6122              		.cfi_def_cfa_register 7
 6123 0006 7860     		str	r0, [r7, #4]
3446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6124              		.loc 1 3446 0
 6125 0008 7B68     		ldr	r3, [r7, #4]
 6126 000a 5B6A     		ldr	r3, [r3, #36]
 6127 000c FB60     		str	r3, [r7, #12]
3447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 6128              		.loc 1 3448 0
 6129 000e FB68     		ldr	r3, [r7, #12]
 6130 0010 0022     		movs	r2, #0
 6131 0012 DA84     		strh	r2, [r3, #38]	@ movhi
3449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6132              		.loc 1 3451 0
 6133 0014 FB68     		ldr	r3, [r7, #12]
 6134 0016 2022     		movs	r2, #32
 6135 0018 83F83D20 		strb	r2, [r3, #61]
3452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 6136              		.loc 1 3459 0
 6137 001c F868     		ldr	r0, [r7, #12]
 6138 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
3460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6139              		.loc 1 3461 0
 6140 0022 00BF     		nop
 6141 0024 1037     		adds	r7, r7, #16
 6142              	.LCFI302:
 6143              		.cfi_def_cfa_offset 8
 6144 0026 BD46     		mov	sp, r7
 6145              	.LCFI303:
 6146              		.cfi_def_cfa_register 13
 6147              		@ sp needed
 6148 0028 80BD     		pop	{r7, pc}
 6149              		.cfi_endproc
 6150              	.LFE120:
 6152              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 6153              		.align	1
 6154              		.syntax unified
ARM GAS  /tmp/ccRUQzex.s 			page 168


 6155              		.thumb
 6156              		.thumb_func
 6157              		.fpu softvfp
 6159              	UART_DMARxOnlyAbortCallback:
 6160              	.LFB121:
3462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6161              		.loc 1 3473 0
 6162              		.cfi_startproc
 6163              		@ args = 0, pretend = 0, frame = 16
 6164              		@ frame_needed = 1, uses_anonymous_args = 0
 6165 0000 80B5     		push	{r7, lr}
 6166              	.LCFI304:
 6167              		.cfi_def_cfa_offset 8
 6168              		.cfi_offset 7, -8
 6169              		.cfi_offset 14, -4
 6170 0002 84B0     		sub	sp, sp, #16
 6171              	.LCFI305:
 6172              		.cfi_def_cfa_offset 24
 6173 0004 00AF     		add	r7, sp, #0
 6174              	.LCFI306:
 6175              		.cfi_def_cfa_register 7
 6176 0006 7860     		str	r0, [r7, #4]
3474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6177              		.loc 1 3474 0
 6178 0008 7B68     		ldr	r3, [r7, #4]
 6179 000a 5B6A     		ldr	r3, [r3, #36]
 6180 000c FB60     		str	r3, [r7, #12]
3475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 6181              		.loc 1 3476 0
 6182 000e FB68     		ldr	r3, [r7, #12]
 6183 0010 0022     		movs	r2, #0
 6184 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6185              		.loc 1 3479 0
 6186 0014 FB68     		ldr	r3, [r7, #12]
 6187 0016 2022     		movs	r2, #32
 6188 0018 83F83E20 		strb	r2, [r3, #62]
3480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6189              		.loc 1 3480 0
 6190 001c FB68     		ldr	r3, [r7, #12]
 6191 001e 0022     		movs	r2, #0
 6192 0020 1A63     		str	r2, [r3, #48]
3481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccRUQzex.s 			page 169


3482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 6193              		.loc 1 3488 0
 6194 0022 F868     		ldr	r0, [r7, #12]
 6195 0024 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
3489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6196              		.loc 1 3490 0
 6197 0028 00BF     		nop
 6198 002a 1037     		adds	r7, r7, #16
 6199              	.LCFI307:
 6200              		.cfi_def_cfa_offset 8
 6201 002c BD46     		mov	sp, r7
 6202              	.LCFI308:
 6203              		.cfi_def_cfa_register 13
 6204              		@ sp needed
 6205 002e 80BD     		pop	{r7, pc}
 6206              		.cfi_endproc
 6207              	.LFE121:
 6209              		.section	.text.UART_Transmit_IT,"ax",%progbits
 6210              		.align	1
 6211              		.syntax unified
 6212              		.thumb
 6213              		.thumb_func
 6214              		.fpu softvfp
 6216              	UART_Transmit_IT:
 6217              	.LFB122:
3491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
3494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
3499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6218              		.loc 1 3499 0
 6219              		.cfi_startproc
 6220              		@ args = 0, pretend = 0, frame = 16
 6221              		@ frame_needed = 1, uses_anonymous_args = 0
 6222              		@ link register save eliminated.
 6223 0000 80B4     		push	{r7}
 6224              	.LCFI309:
 6225              		.cfi_def_cfa_offset 4
 6226              		.cfi_offset 7, -4
 6227 0002 85B0     		sub	sp, sp, #20
 6228              	.LCFI310:
 6229              		.cfi_def_cfa_offset 24
 6230 0004 00AF     		add	r7, sp, #0
 6231              	.LCFI311:
 6232              		.cfi_def_cfa_register 7
 6233 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 170


3500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
3501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 6234              		.loc 1 3503 0
 6235 0008 7B68     		ldr	r3, [r7, #4]
 6236 000a 93F83D30 		ldrb	r3, [r3, #61]
 6237 000e DBB2     		uxtb	r3, r3
 6238 0010 212B     		cmp	r3, #33
 6239 0012 3DD1     		bne	.L275
3504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 6240              		.loc 1 3505 0
 6241 0014 7B68     		ldr	r3, [r7, #4]
 6242 0016 9B68     		ldr	r3, [r3, #8]
 6243 0018 B3F5805F 		cmp	r3, #4096
 6244 001c 13D1     		bne	.L276
 6245              		.loc 1 3505 0 is_stmt 0 discriminator 1
 6246 001e 7B68     		ldr	r3, [r7, #4]
 6247 0020 1B69     		ldr	r3, [r3, #16]
 6248 0022 002B     		cmp	r3, #0
 6249 0024 0FD1     		bne	.L276
3506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
 6250              		.loc 1 3507 0 is_stmt 1
 6251 0026 7B68     		ldr	r3, [r7, #4]
 6252 0028 1B6A     		ldr	r3, [r3, #32]
 6253 002a FB60     		str	r3, [r7, #12]
3508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 6254              		.loc 1 3508 0
 6255 002c 7B68     		ldr	r3, [r7, #4]
 6256 002e 1B68     		ldr	r3, [r3]
 6257 0030 FA68     		ldr	r2, [r7, #12]
 6258 0032 1288     		ldrh	r2, [r2]
 6259 0034 C2F30802 		ubfx	r2, r2, #0, #9
 6260 0038 5A60     		str	r2, [r3, #4]
3509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 6261              		.loc 1 3509 0
 6262 003a 7B68     		ldr	r3, [r7, #4]
 6263 003c 1B6A     		ldr	r3, [r3, #32]
 6264 003e 9A1C     		adds	r2, r3, #2
 6265 0040 7B68     		ldr	r3, [r7, #4]
 6266 0042 1A62     		str	r2, [r3, #32]
 6267 0044 08E0     		b	.L277
 6268              	.L276:
3510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 6269              		.loc 1 3513 0
 6270 0046 7B68     		ldr	r3, [r7, #4]
 6271 0048 1A68     		ldr	r2, [r3]
 6272 004a 7B68     		ldr	r3, [r7, #4]
 6273 004c 1B6A     		ldr	r3, [r3, #32]
 6274 004e 581C     		adds	r0, r3, #1
 6275 0050 7968     		ldr	r1, [r7, #4]
 6276 0052 0862     		str	r0, [r1, #32]
ARM GAS  /tmp/ccRUQzex.s 			page 171


 6277 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6278 0056 5360     		str	r3, [r2, #4]
 6279              	.L277:
3514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
 6280              		.loc 1 3516 0
 6281 0058 7B68     		ldr	r3, [r7, #4]
 6282 005a DB8C     		ldrh	r3, [r3, #38]	@ movhi
 6283 005c 9BB2     		uxth	r3, r3
 6284 005e 013B     		subs	r3, r3, #1
 6285 0060 9BB2     		uxth	r3, r3
 6286 0062 7A68     		ldr	r2, [r7, #4]
 6287 0064 1946     		mov	r1, r3	@ movhi
 6288 0066 D184     		strh	r1, [r2, #38]	@ movhi
 6289 0068 002B     		cmp	r3, #0
 6290 006a 0FD1     		bne	.L278
3517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
3519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 6291              		.loc 1 3519 0
 6292 006c 7B68     		ldr	r3, [r7, #4]
 6293 006e 1B68     		ldr	r3, [r3]
 6294 0070 7A68     		ldr	r2, [r7, #4]
 6295 0072 1268     		ldr	r2, [r2]
 6296 0074 D268     		ldr	r2, [r2, #12]
 6297 0076 22F08002 		bic	r2, r2, #128
 6298 007a DA60     		str	r2, [r3, #12]
3520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 6299              		.loc 1 3522 0
 6300 007c 7B68     		ldr	r3, [r7, #4]
 6301 007e 1B68     		ldr	r3, [r3]
 6302 0080 7A68     		ldr	r2, [r7, #4]
 6303 0082 1268     		ldr	r2, [r2]
 6304 0084 D268     		ldr	r2, [r2, #12]
 6305 0086 42F04002 		orr	r2, r2, #64
 6306 008a DA60     		str	r2, [r3, #12]
 6307              	.L278:
3523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 6308              		.loc 1 3524 0
 6309 008c 0023     		movs	r3, #0
 6310 008e 00E0     		b	.L279
 6311              	.L275:
3525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 6312              		.loc 1 3528 0
 6313 0090 0223     		movs	r3, #2
 6314              	.L279:
3529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6315              		.loc 1 3530 0
 6316 0092 1846     		mov	r0, r3
ARM GAS  /tmp/ccRUQzex.s 			page 172


 6317 0094 1437     		adds	r7, r7, #20
 6318              	.LCFI312:
 6319              		.cfi_def_cfa_offset 4
 6320 0096 BD46     		mov	sp, r7
 6321              	.LCFI313:
 6322              		.cfi_def_cfa_register 13
 6323              		@ sp needed
 6324 0098 80BC     		pop	{r7}
 6325              	.LCFI314:
 6326              		.cfi_restore 7
 6327              		.cfi_def_cfa_offset 0
 6328 009a 7047     		bx	lr
 6329              		.cfi_endproc
 6330              	.LFE122:
 6332              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 6333              		.align	1
 6334              		.syntax unified
 6335              		.thumb
 6336              		.thumb_func
 6337              		.fpu softvfp
 6339              	UART_EndTransmit_IT:
 6340              	.LFB123:
3531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
3534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6341              		.loc 1 3539 0
 6342              		.cfi_startproc
 6343              		@ args = 0, pretend = 0, frame = 8
 6344              		@ frame_needed = 1, uses_anonymous_args = 0
 6345 0000 80B5     		push	{r7, lr}
 6346              	.LCFI315:
 6347              		.cfi_def_cfa_offset 8
 6348              		.cfi_offset 7, -8
 6349              		.cfi_offset 14, -4
 6350 0002 82B0     		sub	sp, sp, #8
 6351              	.LCFI316:
 6352              		.cfi_def_cfa_offset 16
 6353 0004 00AF     		add	r7, sp, #0
 6354              	.LCFI317:
 6355              		.cfi_def_cfa_register 7
 6356 0006 7860     		str	r0, [r7, #4]
3540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 6357              		.loc 1 3541 0
 6358 0008 7B68     		ldr	r3, [r7, #4]
 6359 000a 1B68     		ldr	r3, [r3]
 6360 000c 7A68     		ldr	r2, [r7, #4]
 6361 000e 1268     		ldr	r2, [r2]
 6362 0010 D268     		ldr	r2, [r2, #12]
 6363 0012 22F04002 		bic	r2, r2, #64
 6364 0016 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccRUQzex.s 			page 173


3542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6365              		.loc 1 3544 0
 6366 0018 7B68     		ldr	r3, [r7, #4]
 6367 001a 2022     		movs	r2, #32
 6368 001c 83F83D20 		strb	r2, [r3, #61]
3545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 6369              		.loc 1 3551 0
 6370 0020 7868     		ldr	r0, [r7, #4]
 6371 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
3552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6372              		.loc 1 3554 0
 6373 0026 0023     		movs	r3, #0
3555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6374              		.loc 1 3555 0
 6375 0028 1846     		mov	r0, r3
 6376 002a 0837     		adds	r7, r7, #8
 6377              	.LCFI318:
 6378              		.cfi_def_cfa_offset 8
 6379 002c BD46     		mov	sp, r7
 6380              	.LCFI319:
 6381              		.cfi_def_cfa_register 13
 6382              		@ sp needed
 6383 002e 80BD     		pop	{r7, pc}
 6384              		.cfi_endproc
 6385              	.LFE123:
 6387              		.section	.text.UART_Receive_IT,"ax",%progbits
 6388              		.align	1
 6389              		.syntax unified
 6390              		.thumb
 6391              		.thumb_func
 6392              		.fpu softvfp
 6394              	UART_Receive_IT:
 6395              	.LFB124:
3556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
3559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
3564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6396              		.loc 1 3564 0
 6397              		.cfi_startproc
 6398              		@ args = 0, pretend = 0, frame = 24
 6399              		@ frame_needed = 1, uses_anonymous_args = 0
 6400 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccRUQzex.s 			page 174


 6401              	.LCFI320:
 6402              		.cfi_def_cfa_offset 8
 6403              		.cfi_offset 7, -8
 6404              		.cfi_offset 14, -4
 6405 0002 86B0     		sub	sp, sp, #24
 6406              	.LCFI321:
 6407              		.cfi_def_cfa_offset 32
 6408 0004 00AF     		add	r7, sp, #0
 6409              	.LCFI322:
 6410              		.cfi_def_cfa_register 7
 6411 0006 7860     		str	r0, [r7, #4]
3565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
3566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
3567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 6412              		.loc 1 3569 0
 6413 0008 7B68     		ldr	r3, [r7, #4]
 6414 000a 93F83E30 		ldrb	r3, [r3, #62]
 6415 000e DBB2     		uxtb	r3, r3
 6416 0010 222B     		cmp	r3, #34
 6417 0012 40F09980 		bne	.L283
3570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 6418              		.loc 1 3571 0
 6419 0016 7B68     		ldr	r3, [r7, #4]
 6420 0018 9B68     		ldr	r3, [r3, #8]
 6421 001a B3F5805F 		cmp	r3, #4096
 6422 001e 17D1     		bne	.L284
 6423              		.loc 1 3571 0 is_stmt 0 discriminator 1
 6424 0020 7B68     		ldr	r3, [r7, #4]
 6425 0022 1B69     		ldr	r3, [r3, #16]
 6426 0024 002B     		cmp	r3, #0
 6427 0026 13D1     		bne	.L284
3572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 6428              		.loc 1 3573 0 is_stmt 1
 6429 0028 0023     		movs	r3, #0
 6430 002a 7B61     		str	r3, [r7, #20]
3574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 6431              		.loc 1 3574 0
 6432 002c 7B68     		ldr	r3, [r7, #4]
 6433 002e 9B6A     		ldr	r3, [r3, #40]
 6434 0030 3B61     		str	r3, [r7, #16]
3575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 6435              		.loc 1 3575 0
 6436 0032 7B68     		ldr	r3, [r7, #4]
 6437 0034 1B68     		ldr	r3, [r3]
 6438 0036 5B68     		ldr	r3, [r3, #4]
 6439 0038 9BB2     		uxth	r3, r3
 6440 003a C3F30803 		ubfx	r3, r3, #0, #9
 6441 003e 9AB2     		uxth	r2, r3
 6442 0040 3B69     		ldr	r3, [r7, #16]
 6443 0042 1A80     		strh	r2, [r3]	@ movhi
3576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 2U;
 6444              		.loc 1 3576 0
 6445 0044 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRUQzex.s 			page 175


 6446 0046 9B6A     		ldr	r3, [r3, #40]
 6447 0048 9A1C     		adds	r2, r3, #2
 6448 004a 7B68     		ldr	r3, [r7, #4]
 6449 004c 9A62     		str	r2, [r3, #40]
 6450 004e 26E0     		b	.L285
 6451              	.L284:
3577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 6452              		.loc 1 3580 0
 6453 0050 7B68     		ldr	r3, [r7, #4]
 6454 0052 9B6A     		ldr	r3, [r3, #40]
 6455 0054 7B61     		str	r3, [r7, #20]
3581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits  = NULL;
 6456              		.loc 1 3581 0
 6457 0056 0023     		movs	r3, #0
 6458 0058 3B61     		str	r3, [r7, #16]
3582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLE
 6459              		.loc 1 3583 0
 6460 005a 7B68     		ldr	r3, [r7, #4]
 6461 005c 9B68     		ldr	r3, [r3, #8]
 6462 005e B3F5805F 		cmp	r3, #4096
 6463 0062 07D0     		beq	.L286
 6464              		.loc 1 3583 0 is_stmt 0 discriminator 1
 6465 0064 7B68     		ldr	r3, [r7, #4]
 6466 0066 9B68     		ldr	r3, [r3, #8]
 6467 0068 002B     		cmp	r3, #0
 6468 006a 0AD1     		bne	.L287
 6469              		.loc 1 3583 0 discriminator 2
 6470 006c 7B68     		ldr	r3, [r7, #4]
 6471 006e 1B69     		ldr	r3, [r3, #16]
 6472 0070 002B     		cmp	r3, #0
 6473 0072 06D1     		bne	.L287
 6474              	.L286:
3584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 6475              		.loc 1 3585 0 is_stmt 1
 6476 0074 7B68     		ldr	r3, [r7, #4]
 6477 0076 1B68     		ldr	r3, [r3]
 6478 0078 5B68     		ldr	r3, [r3, #4]
 6479 007a DAB2     		uxtb	r2, r3
 6480 007c 7B69     		ldr	r3, [r7, #20]
 6481 007e 1A70     		strb	r2, [r3]
 6482 0080 08E0     		b	.L288
 6483              	.L287:
3586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 6484              		.loc 1 3589 0
 6485 0082 7B68     		ldr	r3, [r7, #4]
 6486 0084 1B68     		ldr	r3, [r3]
 6487 0086 5B68     		ldr	r3, [r3, #4]
 6488 0088 DBB2     		uxtb	r3, r3
 6489 008a 03F07F03 		and	r3, r3, #127
ARM GAS  /tmp/ccRUQzex.s 			page 176


 6490 008e DAB2     		uxtb	r2, r3
 6491 0090 7B69     		ldr	r3, [r7, #20]
 6492 0092 1A70     		strb	r2, [r3]
 6493              	.L288:
3590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 1U;
 6494              		.loc 1 3591 0
 6495 0094 7B68     		ldr	r3, [r7, #4]
 6496 0096 9B6A     		ldr	r3, [r3, #40]
 6497 0098 5A1C     		adds	r2, r3, #1
 6498 009a 7B68     		ldr	r3, [r7, #4]
 6499 009c 9A62     		str	r2, [r3, #40]
 6500              	.L285:
3592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
 6501              		.loc 1 3594 0
 6502 009e 7B68     		ldr	r3, [r7, #4]
 6503 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 6504 00a2 9BB2     		uxth	r3, r3
 6505 00a4 013B     		subs	r3, r3, #1
 6506 00a6 9BB2     		uxth	r3, r3
 6507 00a8 7A68     		ldr	r2, [r7, #4]
 6508 00aa 1946     		mov	r1, r3	@ movhi
 6509 00ac D185     		strh	r1, [r2, #46]	@ movhi
 6510 00ae 002B     		cmp	r3, #0
 6511 00b0 48D1     		bne	.L289
3595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 6512              		.loc 1 3597 0
 6513 00b2 7B68     		ldr	r3, [r7, #4]
 6514 00b4 1B68     		ldr	r3, [r3]
 6515 00b6 7A68     		ldr	r2, [r7, #4]
 6516 00b8 1268     		ldr	r2, [r2]
 6517 00ba D268     		ldr	r2, [r2, #12]
 6518 00bc 22F02002 		bic	r2, r2, #32
 6519 00c0 DA60     		str	r2, [r3, #12]
3598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 6520              		.loc 1 3600 0
 6521 00c2 7B68     		ldr	r3, [r7, #4]
 6522 00c4 1B68     		ldr	r3, [r3]
 6523 00c6 7A68     		ldr	r2, [r7, #4]
 6524 00c8 1268     		ldr	r2, [r2]
 6525 00ca D268     		ldr	r2, [r2, #12]
 6526 00cc 22F48072 		bic	r2, r2, #256
 6527 00d0 DA60     		str	r2, [r3, #12]
3601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 6528              		.loc 1 3603 0
 6529 00d2 7B68     		ldr	r3, [r7, #4]
 6530 00d4 1B68     		ldr	r3, [r3]
 6531 00d6 7A68     		ldr	r2, [r7, #4]
 6532 00d8 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccRUQzex.s 			page 177


 6533 00da 5269     		ldr	r2, [r2, #20]
 6534 00dc 22F00102 		bic	r2, r2, #1
 6535 00e0 5A61     		str	r2, [r3, #20]
3604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 6536              		.loc 1 3606 0
 6537 00e2 7B68     		ldr	r3, [r7, #4]
 6538 00e4 2022     		movs	r2, #32
 6539 00e6 83F83E20 		strb	r2, [r3, #62]
3607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check current reception Mode :
3609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 6540              		.loc 1 3610 0
 6541 00ea 7B68     		ldr	r3, [r7, #4]
 6542 00ec 1B6B     		ldr	r3, [r3, #48]
 6543 00ee 012B     		cmp	r3, #1
 6544 00f0 23D1     		bne	.L290
3611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Set reception type to Standard */
3613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6545              		.loc 1 3613 0
 6546 00f2 7B68     		ldr	r3, [r7, #4]
 6547 00f4 0022     		movs	r2, #0
 6548 00f6 1A63     		str	r2, [r3, #48]
3614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable IDLE interrupt */
3616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 6549              		.loc 1 3616 0
 6550 00f8 7B68     		ldr	r3, [r7, #4]
 6551 00fa 1B68     		ldr	r3, [r3]
 6552 00fc 7A68     		ldr	r2, [r7, #4]
 6553 00fe 1268     		ldr	r2, [r2]
 6554 0100 D268     		ldr	r2, [r2, #12]
 6555 0102 22F01002 		bic	r2, r2, #16
 6556 0106 DA60     		str	r2, [r3, #12]
3617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Check if IDLE flag is set */
3619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 6557              		.loc 1 3619 0
 6558 0108 7B68     		ldr	r3, [r7, #4]
 6559 010a 1B68     		ldr	r3, [r3]
 6560 010c 1B68     		ldr	r3, [r3]
 6561 010e 03F01003 		and	r3, r3, #16
 6562 0112 102B     		cmp	r3, #16
 6563 0114 0AD1     		bne	.L291
 6564              	.LBB12:
3620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
3621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Clear IDLE flag in ISR */
3622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           __HAL_UART_CLEAR_IDLEFLAG(huart);
 6565              		.loc 1 3622 0
 6566 0116 0023     		movs	r3, #0
 6567 0118 FB60     		str	r3, [r7, #12]
 6568 011a 7B68     		ldr	r3, [r7, #4]
 6569 011c 1B68     		ldr	r3, [r3]
 6570 011e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccRUQzex.s 			page 178


 6571 0120 FB60     		str	r3, [r7, #12]
 6572 0122 7B68     		ldr	r3, [r7, #4]
 6573 0124 1B68     		ldr	r3, [r3]
 6574 0126 5B68     		ldr	r3, [r3, #4]
 6575 0128 FB60     		str	r3, [r7, #12]
 6576 012a FB68     		ldr	r3, [r7, #12]
 6577              	.L291:
 6578              	.LBE12:
3623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
3624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 6579              		.loc 1 3630 0
 6580 012c 7B68     		ldr	r3, [r7, #4]
 6581 012e 9B8D     		ldrh	r3, [r3, #44]
 6582 0130 1946     		mov	r1, r3
 6583 0132 7868     		ldr	r0, [r7, #4]
 6584 0134 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 6585 0138 02E0     		b	.L292
 6586              	.L290:
3631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif
3632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /* Standard reception API called */
3636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
3637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /*Call registered Rx complete callback*/
3638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        huart->RxCpltCallback(huart);
3639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        /*Call legacy weak Rx complete callback*/
3641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        HAL_UART_RxCpltCallback(huart);
 6587              		.loc 1 3641 0
 6588 013a 7868     		ldr	r0, [r7, #4]
 6589 013c FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 6590              	.L292:
3642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_OK;
 6591              		.loc 1 3645 0
 6592 0140 0023     		movs	r3, #0
 6593 0142 02E0     		b	.L293
 6594              	.L289:
3646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 6595              		.loc 1 3647 0
 6596 0144 0023     		movs	r3, #0
 6597 0146 00E0     		b	.L293
 6598              	.L283:
3648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
ARM GAS  /tmp/ccRUQzex.s 			page 179


 6599              		.loc 1 3651 0
 6600 0148 0223     		movs	r3, #2
 6601              	.L293:
3652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6602              		.loc 1 3653 0
 6603 014a 1846     		mov	r0, r3
 6604 014c 1837     		adds	r7, r7, #24
 6605              	.LCFI323:
 6606              		.cfi_def_cfa_offset 8
 6607 014e BD46     		mov	sp, r7
 6608              	.LCFI324:
 6609              		.cfi_def_cfa_register 13
 6610              		@ sp needed
 6611 0150 80BD     		pop	{r7, pc}
 6612              		.cfi_endproc
 6613              	.LFE124:
 6615              		.section	.text.UART_SetConfig,"ax",%progbits
 6616              		.align	1
 6617              		.syntax unified
 6618              		.thumb
 6619              		.thumb_func
 6620              		.fpu softvfp
 6622              	UART_SetConfig:
 6623              	.LFB125:
3654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6624              		.loc 1 3662 0
 6625              		.cfi_startproc
 6626              		@ args = 0, pretend = 0, frame = 16
 6627              		@ frame_needed = 1, uses_anonymous_args = 0
 6628 0000 90B5     		push	{r4, r7, lr}
 6629              	.LCFI325:
 6630              		.cfi_def_cfa_offset 12
 6631              		.cfi_offset 4, -12
 6632              		.cfi_offset 7, -8
 6633              		.cfi_offset 14, -4
 6634 0002 85B0     		sub	sp, sp, #20
 6635              	.LCFI326:
 6636              		.cfi_def_cfa_offset 32
 6637 0004 00AF     		add	r7, sp, #0
 6638              	.LCFI327:
 6639              		.cfi_def_cfa_register 7
 6640 0006 7860     		str	r0, [r7, #4]
3663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg;
3664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t pclk;
3665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
3667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
ARM GAS  /tmp/ccRUQzex.s 			page 180


3669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
3670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
3671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
3673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
3674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      according to huart->Init.StopBits value */
3675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 6641              		.loc 1 3675 0
 6642 0008 7B68     		ldr	r3, [r7, #4]
 6643 000a 1B68     		ldr	r3, [r3]
 6644 000c 7A68     		ldr	r2, [r7, #4]
 6645 000e 1268     		ldr	r2, [r2]
 6646 0010 1269     		ldr	r2, [r2, #16]
 6647 0012 22F44051 		bic	r1, r2, #12288
 6648 0016 7A68     		ldr	r2, [r7, #4]
 6649 0018 D268     		ldr	r2, [r2, #12]
 6650 001a 0A43     		orrs	r2, r2, r1
 6651 001c 1A61     		str	r2, [r3, #16]
3676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
3679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
3686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
3687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 6652              		.loc 1 3690 0
 6653 001e 7B68     		ldr	r3, [r7, #4]
 6654 0020 9A68     		ldr	r2, [r3, #8]
 6655 0022 7B68     		ldr	r3, [r7, #4]
 6656 0024 1B69     		ldr	r3, [r3, #16]
 6657 0026 1A43     		orrs	r2, r2, r3
 6658 0028 7B68     		ldr	r3, [r7, #4]
 6659 002a 5B69     		ldr	r3, [r3, #20]
 6660 002c 1343     		orrs	r3, r3, r2
 6661 002e BB60     		str	r3, [r7, #8]
3691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 6662              		.loc 1 3691 0
 6663 0030 7B68     		ldr	r3, [r7, #4]
 6664 0032 1A68     		ldr	r2, [r3]
 6665 0034 7B68     		ldr	r3, [r7, #4]
 6666 0036 1B68     		ldr	r3, [r3]
 6667 0038 DB68     		ldr	r3, [r3, #12]
 6668 003a 23F4B053 		bic	r3, r3, #5632
 6669 003e 23F00C03 		bic	r3, r3, #12
 6670 0042 B968     		ldr	r1, [r7, #8]
 6671 0044 0B43     		orrs	r3, r3, r1
 6672 0046 D360     		str	r3, [r2, #12]
3692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
3693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
ARM GAS  /tmp/ccRUQzex.s 			page 181


3694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
3697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 6673              		.loc 1 3698 0
 6674 0048 7B68     		ldr	r3, [r7, #4]
 6675 004a 1B68     		ldr	r3, [r3]
 6676 004c 7A68     		ldr	r2, [r7, #4]
 6677 004e 1268     		ldr	r2, [r2]
 6678 0050 5269     		ldr	r2, [r2, #20]
 6679 0052 22F44071 		bic	r1, r2, #768
 6680 0056 7A68     		ldr	r2, [r7, #4]
 6681 0058 9269     		ldr	r2, [r2, #24]
 6682 005a 0A43     		orrs	r2, r2, r1
 6683 005c 5A61     		str	r2, [r3, #20]
3699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Instance == USART1)
 6684              		.loc 1 3701 0
 6685 005e 7B68     		ldr	r3, [r7, #4]
 6686 0060 1B68     		ldr	r3, [r3]
 6687 0062 2C4A     		ldr	r2, .L297
 6688 0064 9342     		cmp	r3, r2
 6689 0066 03D1     		bne	.L295
3702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 6690              		.loc 1 3703 0
 6691 0068 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 6692 006c F860     		str	r0, [r7, #12]
 6693 006e 02E0     		b	.L296
 6694              	.L295:
3704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK1Freq();
 6695              		.loc 1 3707 0
 6696 0070 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 6697 0074 F860     		str	r0, [r7, #12]
 6698              	.L296:
3708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
3711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 6699              		.loc 1 3721 0
 6700 0076 7B68     		ldr	r3, [r7, #4]
 6701 0078 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccRUQzex.s 			page 182


 6702 007a FA68     		ldr	r2, [r7, #12]
 6703 007c 1346     		mov	r3, r2
 6704 007e 9B00     		lsls	r3, r3, #2
 6705 0080 1344     		add	r3, r3, r2
 6706 0082 9A00     		lsls	r2, r3, #2
 6707 0084 1A44     		add	r2, r2, r3
 6708 0086 7B68     		ldr	r3, [r7, #4]
 6709 0088 5B68     		ldr	r3, [r3, #4]
 6710 008a 9B00     		lsls	r3, r3, #2
 6711 008c B2FBF3F3 		udiv	r3, r2, r3
 6712 0090 214A     		ldr	r2, .L297+4
 6713 0092 A2FB0323 		umull	r2, r3, r2, r3
 6714 0096 5B09     		lsrs	r3, r3, #5
 6715 0098 1801     		lsls	r0, r3, #4
 6716 009a FA68     		ldr	r2, [r7, #12]
 6717 009c 1346     		mov	r3, r2
 6718 009e 9B00     		lsls	r3, r3, #2
 6719 00a0 1344     		add	r3, r3, r2
 6720 00a2 9A00     		lsls	r2, r3, #2
 6721 00a4 1A44     		add	r2, r2, r3
 6722 00a6 7B68     		ldr	r3, [r7, #4]
 6723 00a8 5B68     		ldr	r3, [r3, #4]
 6724 00aa 9B00     		lsls	r3, r3, #2
 6725 00ac B2FBF3F2 		udiv	r2, r2, r3
 6726 00b0 194B     		ldr	r3, .L297+4
 6727 00b2 A3FB0243 		umull	r4, r3, r3, r2
 6728 00b6 5B09     		lsrs	r3, r3, #5
 6729 00b8 6424     		movs	r4, #100
 6730 00ba 04FB03F3 		mul	r3, r4, r3
 6731 00be D31A     		subs	r3, r2, r3
 6732 00c0 1B01     		lsls	r3, r3, #4
 6733 00c2 3233     		adds	r3, r3, #50
 6734 00c4 144A     		ldr	r2, .L297+4
 6735 00c6 A2FB0323 		umull	r2, r3, r2, r3
 6736 00ca 5B09     		lsrs	r3, r3, #5
 6737 00cc 03F0F003 		and	r3, r3, #240
 6738 00d0 1844     		add	r0, r0, r3
 6739 00d2 FA68     		ldr	r2, [r7, #12]
 6740 00d4 1346     		mov	r3, r2
 6741 00d6 9B00     		lsls	r3, r3, #2
 6742 00d8 1344     		add	r3, r3, r2
 6743 00da 9A00     		lsls	r2, r3, #2
 6744 00dc 1A44     		add	r2, r2, r3
 6745 00de 7B68     		ldr	r3, [r7, #4]
 6746 00e0 5B68     		ldr	r3, [r3, #4]
 6747 00e2 9B00     		lsls	r3, r3, #2
 6748 00e4 B2FBF3F2 		udiv	r2, r2, r3
 6749 00e8 0B4B     		ldr	r3, .L297+4
 6750 00ea A3FB0243 		umull	r4, r3, r3, r2
 6751 00ee 5B09     		lsrs	r3, r3, #5
 6752 00f0 6424     		movs	r4, #100
 6753 00f2 04FB03F3 		mul	r3, r4, r3
 6754 00f6 D31A     		subs	r3, r2, r3
 6755 00f8 1B01     		lsls	r3, r3, #4
 6756 00fa 3233     		adds	r3, r3, #50
 6757 00fc 064A     		ldr	r2, .L297+4
 6758 00fe A2FB0323 		umull	r2, r3, r2, r3
ARM GAS  /tmp/ccRUQzex.s 			page 183


 6759 0102 5B09     		lsrs	r3, r3, #5
 6760 0104 03F00F03 		and	r3, r3, #15
 6761 0108 0344     		add	r3, r3, r0
 6762 010a 8B60     		str	r3, [r1, #8]
3722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6763              		.loc 1 3723 0
 6764 010c 00BF     		nop
 6765 010e 1437     		adds	r7, r7, #20
 6766              	.LCFI328:
 6767              		.cfi_def_cfa_offset 12
 6768 0110 BD46     		mov	sp, r7
 6769              	.LCFI329:
 6770              		.cfi_def_cfa_register 13
 6771              		@ sp needed
 6772 0112 90BD     		pop	{r4, r7, pc}
 6773              	.L298:
 6774              		.align	2
 6775              	.L297:
 6776 0114 00380140 		.word	1073821696
 6777 0118 1F85EB51 		.word	1374389535
 6778              		.cfi_endproc
 6779              	.LFE125:
 6781              		.text
 6782              	.Letext0:
 6783              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 6784              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 6785              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 6786              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 6787              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 6788              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 6789              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 6790              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 6791              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 6792              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccRUQzex.s 			page 184


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_uart.c
     /tmp/ccRUQzex.s:16     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccRUQzex.s:23     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccRUQzex.s:640    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccRUQzex.s:6622   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccRUQzex.s:132    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccRUQzex.s:139    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccRUQzex.s:255    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccRUQzex.s:262    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccRUQzex.s:396    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccRUQzex.s:403    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccRUQzex.s:548    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccRUQzex.s:555    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccRUQzex.s:683    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccRUQzex.s:633    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccRUQzex.s:676    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccRUQzex.s:719    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccRUQzex.s:726    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccRUQzex.s:5388   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccRUQzex.s:932    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccRUQzex.s:939    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccRUQzex.s:1165   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:1172   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccRUQzex.s:1282   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:1289   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccRUQzex.s:5502   .text.UART_Start_Receive_IT:0000000000000000 UART_Start_Receive_IT
     /tmp/ccRUQzex.s:1372   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccRUQzex.s:1379   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccRUQzex.s:1523   .text.HAL_UART_Transmit_DMA:00000000000000cc $d
     /tmp/ccRUQzex.s:4980   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccRUQzex.s:5056   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccRUQzex.s:5276   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccRUQzex.s:1530   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccRUQzex.s:1537   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccRUQzex.s:5598   .text.UART_Start_Receive_DMA:0000000000000000 UART_Start_Receive_DMA
     /tmp/ccRUQzex.s:1620   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccRUQzex.s:1627   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccRUQzex.s:1762   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccRUQzex.s:1769   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccRUQzex.s:1885   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccRUQzex.s:1892   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccRUQzex.s:5739   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccRUQzex.s:5793   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccRUQzex.s:2017   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 $t
     /tmp/ccRUQzex.s:2024   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 HAL_UARTEx_ReceiveToIdle
     /tmp/ccRUQzex.s:2319   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:2326   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 HAL_UARTEx_ReceiveToIdle_IT
     /tmp/ccRUQzex.s:2449   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 $t
     /tmp/ccRUQzex.s:2456   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 HAL_UARTEx_ReceiveToIdle_DMA
     /tmp/ccRUQzex.s:2579   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccRUQzex.s:2586   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccRUQzex.s:2773   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccRUQzex.s:2780   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccRUQzex.s:2880   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccRUQzex.s:2887   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccRUQzex.s:3013   .text.HAL_UART_Abort_IT:0000000000000000 $t
ARM GAS  /tmp/ccRUQzex.s 			page 185


     /tmp/ccRUQzex.s:3020   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccRUQzex.s:4275   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccRUQzex.s:3249   .text.HAL_UART_Abort_IT:0000000000000160 $d
     /tmp/ccRUQzex.s:5926   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccRUQzex.s:6016   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccRUQzex.s:3255   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:3262   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccRUQzex.s:4318   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccRUQzex.s:3372   .text.HAL_UART_AbortTransmit_IT:000000000000009c $d
     /tmp/ccRUQzex.s:6106   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccRUQzex.s:3377   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:3384   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccRUQzex.s:4361   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccRUQzex.s:3524   .text.HAL_UART_AbortReceive_IT:00000000000000d0 $d
     /tmp/ccRUQzex.s:6159   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccRUQzex.s:3529   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccRUQzex.s:3536   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccRUQzex.s:6394   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/ccRUQzex.s:4232   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccRUQzex.s:4404   .text.HAL_UARTEx_RxEventCallback:0000000000000000 HAL_UARTEx_RxEventCallback
     /tmp/ccRUQzex.s:6216   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/ccRUQzex.s:6339   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccRUQzex.s:4048   .text.HAL_UART_IRQHandler:0000000000000354 $d
     /tmp/ccRUQzex.s:5873   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccRUQzex.s:4053   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4060   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccRUQzex.s:4096   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4103   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccRUQzex.s:4139   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4146   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccRUQzex.s:4182   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4189   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccRUQzex.s:4225   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4268   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4311   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4354   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4397   .text.HAL_UARTEx_RxEventCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:4442   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccRUQzex.s:4449   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccRUQzex.s:4521   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccRUQzex.s:4528   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccRUQzex.s:4600   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/ccRUQzex.s:4607   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/ccRUQzex.s:4679   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccRUQzex.s:4686   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccRUQzex.s:4771   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccRUQzex.s:4778   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccRUQzex.s:4863   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccRUQzex.s:4870   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccRUQzex.s:4928   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccRUQzex.s:4935   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccRUQzex.s:4974   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccRUQzex.s:5050   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccRUQzex.s:5095   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccRUQzex.s:5101   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccRUQzex.s:5208   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccRUQzex.s:5214   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
ARM GAS  /tmp/ccRUQzex.s 			page 186


     /tmp/ccRUQzex.s:5270   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccRUQzex.s:5382   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccRUQzex.s:5495   .text.UART_Start_Receive_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:5591   .text.UART_Start_Receive_DMA:0000000000000000 $t
     /tmp/ccRUQzex.s:5726   .text.UART_Start_Receive_DMA:00000000000000bc $d
     /tmp/ccRUQzex.s:5733   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccRUQzex.s:5787   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccRUQzex.s:5867   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccRUQzex.s:5920   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:6010   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:6100   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:6153   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccRUQzex.s:6210   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:6333   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:6388   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/ccRUQzex.s:6616   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccRUQzex.s:6776   .text.UART_SetConfig:0000000000000114 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
