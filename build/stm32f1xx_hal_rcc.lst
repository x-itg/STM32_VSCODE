ARM GAS  /tmp/ccW1V1Y1.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_RCC_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_RCC_DeInit:
  24              	.LFB65:
  25              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @file    stm32f1xx_hal_rcc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled,
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       and all peripherals are off except internal SRAM, Flash and JTAG.
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) buses;
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           all peripherals mapped on these buses are running at HSI speed.
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] Once the device started from reset, the user application has to:
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the AHB and APB buses prescalers
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals whose clocks are not
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS)
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                       ##### RCC Limitations #####
ARM GAS  /tmp/ccW1V1Y1.s 			page 2


  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       from/to registers.
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       Workarounds:
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @attention
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * All rights reserved.</center></h2>
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * the "License"; You may not use this file except in compliance with the
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * License. You may obtain a copy of the License at:
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                        opensource.org/licenses/BSD-3-Clause
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #include "stm32f1xx_hal.h"
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @addtogroup STM32F1xx_HAL_Driver
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC RCC
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** * @brief RCC HAL module driver
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Constants RCC Private Constants
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  * @{
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  */
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()     __HAL_RCC_GPIOA_CLK_ENABLE()
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
ARM GAS  /tmp/ccW1V1Y1.s 			page 3


  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay);
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Exported functions --------------------------------------------------------*/
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       and APB2).
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           the PLL as System clock source.
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) LSI (low-speed internal), ~40 KHz low consumption RC used as IWDG and/or RTC
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           clock source.
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 24 MHz (STM32F100xx) or 4 to 16 MHz (STM32F101x/STM32F102
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring different output clocks:
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 72 MHz for STM
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz)
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           clock source), the System clocks automatically switched to HSI and an interrupt
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M3 NMI
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output SYSCLK, HSI,
ARM GAS  /tmp/ccW1V1Y1.s 			page 4


 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           HSE or PLL clock (divided by 2) on PA8 pin + PLL2CLK, PLL3CLK/2, PLL3CLK and XTI for STM3
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] System, AHB and APB buses clocks configuration
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           HSE and PLL.
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           the peripherals mapped on these buses. You can use
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           "@ref HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) RTC: RTC clock can be derived either from the LSI, LSE or HSE clock
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****               divided by 128.
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) USB OTG FS and RTC: USB OTG FS require a frequency equal to 48 MHz
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****               to work correctly. This clock is derived of the main PLL through PLL Multiplier.
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) I2S interface on STM32F105x/STM32F107x can be derived from PLL3CLK
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) IWDG clock which is always the LSI clock.
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) For STM32F10xxx, the maximum frequency of the SYSCLK and HCLK/PCLK2 is 72 MHz, PCLK1 36 M
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           For STM32F100xx, the maximum frequency of the SYSCLK and HCLK/PCLK1/PCLK2 is 24 MHz.
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           Depending on the SYSCLK frequency, the flash latency should be adapted accordingly.
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /*
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   Additional consideration on the SYSCLK based on Latency settings:
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         | Latency       | SYSCLK clock frequency (MHz)  |
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |0WS(1CPU cycle)|       0 < SYSCLK <= 24        |
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |1WS(2CPU cycle)|      24 < SYSCLK <= 48        |
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |2WS(3CPU cycle)|      48 < SYSCLK <= 72        |
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - HSE, PLL, PLL2 and PLL3 are OFF
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - CSS and MCO1 OFF
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - All interrupts disabled
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - All flags are cleared
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   This function does not modify the configuration of the
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - Peripheral clocks
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL_StatusTypeDef
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
  26              		.loc 1 203 0
ARM GAS  /tmp/ccW1V1Y1.s 			page 5


  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  41              		.loc 1 207 0
  42 0006 FFF7FEFF 		bl	HAL_GetTick
  43 000a 7860     		str	r0, [r7, #4]
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set HSION bit */
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
  44              		.loc 1 210 0
  45 000c 454A     		ldr	r2, .L12
  46 000e 454B     		ldr	r3, .L12
  47 0010 1B68     		ldr	r3, [r3]
  48 0012 43F00103 		orr	r3, r3, #1
  49 0016 1360     		str	r3, [r2]
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till HSI is ready */
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
  50              		.loc 1 213 0
  51 0018 08E0     		b	.L2
  52              	.L4:
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
  53              		.loc 1 215 0
  54 001a FFF7FEFF 		bl	HAL_GetTick
  55 001e 0246     		mov	r2, r0
  56 0020 7B68     		ldr	r3, [r7, #4]
  57 0022 D31A     		subs	r3, r2, r3
  58 0024 022B     		cmp	r3, #2
  59 0026 01D9     		bls	.L2
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
  60              		.loc 1 217 0
  61 0028 0323     		movs	r3, #3
  62 002a 77E0     		b	.L3
  63              	.L2:
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
  64              		.loc 1 213 0
  65 002c 3D4B     		ldr	r3, .L12
  66 002e 1B68     		ldr	r3, [r3]
  67 0030 03F00203 		and	r3, r3, #2
  68 0034 002B     		cmp	r3, #0
ARM GAS  /tmp/ccW1V1Y1.s 			page 6


  69 0036 F0D0     		beq	.L4
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set HSITRIM bits to the reset value */
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
  70              		.loc 1 222 0
  71 0038 3A4A     		ldr	r2, .L12
  72 003a 3A4B     		ldr	r3, .L12
  73 003c 1B68     		ldr	r3, [r3]
  74 003e 23F0F803 		bic	r3, r3, #248
  75 0042 43F08003 		orr	r3, r3, #128
  76 0046 1360     		str	r3, [r2]
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  77              		.loc 1 225 0
  78 0048 FFF7FEFF 		bl	HAL_GetTick
  79 004c 7860     		str	r0, [r7, #4]
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR register */
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  80              		.loc 1 228 0
  81 004e 354B     		ldr	r3, .L12
  82 0050 0022     		movs	r2, #0
  83 0052 5A60     		str	r2, [r3, #4]
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till clock switch is ready */
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  84              		.loc 1 231 0
  85 0054 0AE0     		b	.L5
  86              	.L6:
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
  87              		.loc 1 233 0
  88 0056 FFF7FEFF 		bl	HAL_GetTick
  89 005a 0246     		mov	r2, r0
  90 005c 7B68     		ldr	r3, [r7, #4]
  91 005e D31A     		subs	r3, r2, r3
  92 0060 41F28832 		movw	r2, #5000
  93 0064 9342     		cmp	r3, r2
  94 0066 01D9     		bls	.L5
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
  95              		.loc 1 235 0
  96 0068 0323     		movs	r3, #3
  97 006a 57E0     		b	.L3
  98              	.L5:
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
  99              		.loc 1 231 0
 100 006c 2D4B     		ldr	r3, .L12
 101 006e 5B68     		ldr	r3, [r3, #4]
 102 0070 03F00C03 		and	r3, r3, #12
 103 0074 002B     		cmp	r3, #0
 104 0076 EED1     		bne	.L6
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
ARM GAS  /tmp/ccW1V1Y1.s 			page 7


 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
 105              		.loc 1 240 0
 106 0078 2B4B     		ldr	r3, .L12+4
 107 007a 2C4A     		ldr	r2, .L12+8
 108 007c 1A60     		str	r2, [r3]
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Adapt Systick interrupt period */
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (HAL_InitTick(uwTickPrio) != HAL_OK)
 109              		.loc 1 243 0
 110 007e 2C4B     		ldr	r3, .L12+12
 111 0080 1B68     		ldr	r3, [r3]
 112 0082 1846     		mov	r0, r3
 113 0084 FFF7FEFF 		bl	HAL_InitTick
 114 0088 0346     		mov	r3, r0
 115 008a 002B     		cmp	r3, #0
 116 008c 01D0     		beq	.L7
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 117              		.loc 1 245 0
 118 008e 0123     		movs	r3, #1
 119 0090 44E0     		b	.L3
 120              	.L7:
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 121              		.loc 1 249 0
 122 0092 FFF7FEFF 		bl	HAL_GetTick
 123 0096 7860     		str	r0, [r7, #4]
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Second step is to clear PLLON bit */
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 124              		.loc 1 252 0
 125 0098 224A     		ldr	r2, .L12
 126 009a 224B     		ldr	r3, .L12
 127 009c 1B68     		ldr	r3, [r3]
 128 009e 23F08073 		bic	r3, r3, #16777216
 129 00a2 1360     		str	r3, [r2]
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL is disabled */
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 130              		.loc 1 255 0
 131 00a4 08E0     		b	.L8
 132              	.L9:
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 133              		.loc 1 257 0
 134 00a6 FFF7FEFF 		bl	HAL_GetTick
 135 00aa 0246     		mov	r2, r0
 136 00ac 7B68     		ldr	r3, [r7, #4]
 137 00ae D31A     		subs	r3, r2, r3
 138 00b0 022B     		cmp	r3, #2
 139 00b2 01D9     		bls	.L8
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
ARM GAS  /tmp/ccW1V1Y1.s 			page 8


 140              		.loc 1 259 0
 141 00b4 0323     		movs	r3, #3
 142 00b6 31E0     		b	.L3
 143              	.L8:
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 144              		.loc 1 255 0
 145 00b8 1A4B     		ldr	r3, .L12
 146 00ba 1B68     		ldr	r3, [r3]
 147 00bc 03F00073 		and	r3, r3, #33554432
 148 00c0 002B     		cmp	r3, #0
 149 00c2 F0D1     		bne	.L9
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Ensure to reset PLLSRC and PLLMUL bits */
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
 150              		.loc 1 264 0
 151 00c4 174B     		ldr	r3, .L12
 152 00c6 0022     		movs	r2, #0
 153 00c8 5A60     		str	r2, [r3, #4]
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 154              		.loc 1 267 0
 155 00ca FFF7FEFF 		bl	HAL_GetTick
 156 00ce 7860     		str	r0, [r7, #4]
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset HSEON & CSSON bits */
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 157              		.loc 1 270 0
 158 00d0 144A     		ldr	r2, .L12
 159 00d2 144B     		ldr	r3, .L12
 160 00d4 1B68     		ldr	r3, [r3]
 161 00d6 23F41023 		bic	r3, r3, #589824
 162 00da 1360     		str	r3, [r2]
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till HSE is disabled */
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 163              		.loc 1 273 0
 164 00dc 08E0     		b	.L10
 165              	.L11:
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 166              		.loc 1 275 0
 167 00de FFF7FEFF 		bl	HAL_GetTick
 168 00e2 0246     		mov	r2, r0
 169 00e4 7B68     		ldr	r3, [r7, #4]
 170 00e6 D31A     		subs	r3, r2, r3
 171 00e8 642B     		cmp	r3, #100
 172 00ea 01D9     		bls	.L10
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 173              		.loc 1 277 0
 174 00ec 0323     		movs	r3, #3
 175 00ee 15E0     		b	.L3
 176              	.L10:
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
ARM GAS  /tmp/ccW1V1Y1.s 			page 9


 177              		.loc 1 273 0
 178 00f0 0C4B     		ldr	r3, .L12
 179 00f2 1B68     		ldr	r3, [r3]
 180 00f4 03F40033 		and	r3, r3, #131072
 181 00f8 002B     		cmp	r3, #0
 182 00fa F0D1     		bne	.L11
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 183              		.loc 1 282 0
 184 00fc 094A     		ldr	r2, .L12
 185 00fe 094B     		ldr	r3, .L12
 186 0100 1B68     		ldr	r3, [r3]
 187 0102 23F48023 		bic	r3, r3, #262144
 188 0106 1360     		str	r3, [r2]
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLL2_SUPPORT)
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Clear PLL2ON bit */
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL2 is disabled */
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLL2_SUPPORT */
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLLI2S_SUPPORT)
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Clear PLL3ON bit */
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL3 is disabled */
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLLI2S_SUPPORT */
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR2 register */
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR2);
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1 */
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccW1V1Y1.s 			page 10


 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset all CSR flags */
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 189              		.loc 1 324 0
 190 0108 064A     		ldr	r2, .L12
 191 010a 064B     		ldr	r3, .L12
 192 010c 5B6A     		ldr	r3, [r3, #36]
 193 010e 43F08073 		orr	r3, r3, #16777216
 194 0112 5362     		str	r3, [r2, #36]
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Disable all interrupts */
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR);
 195              		.loc 1 327 0
 196 0114 034B     		ldr	r3, .L12
 197 0116 0022     		movs	r2, #0
 198 0118 9A60     		str	r2, [r3, #8]
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 199              		.loc 1 329 0
 200 011a 0023     		movs	r3, #0
 201              	.L3:
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 202              		.loc 1 330 0
 203 011c 1846     		mov	r0, r3
 204 011e 0837     		adds	r7, r7, #8
 205              	.LCFI3:
 206              		.cfi_def_cfa_offset 8
 207 0120 BD46     		mov	sp, r7
 208              	.LCFI4:
 209              		.cfi_def_cfa_register 13
 210              		@ sp needed
 211 0122 80BD     		pop	{r7, pc}
 212              	.L13:
 213              		.align	2
 214              	.L12:
 215 0124 00100240 		.word	1073876992
 216 0128 00000000 		.word	SystemCoreClock
 217 012c 00127A00 		.word	8000000
 218 0130 00000000 		.word	uwTickPrio
 219              		.cfi_endproc
 220              	.LFE65:
 222              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 223              		.align	1
 224              		.global	HAL_RCC_OscConfig
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu softvfp
 230              	HAL_RCC_OscConfig:
 231              	.LFB66:
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB 
ARM GAS  /tmp/ccW1V1Y1.s 			page 11


 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to LSE Off
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to HSE Off
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 232              		.loc 1 348 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 24
 235              		@ frame_needed = 1, uses_anonymous_args = 0
 236 0000 80B5     		push	{r7, lr}
 237              	.LCFI5:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 7, -8
 240              		.cfi_offset 14, -4
 241 0002 86B0     		sub	sp, sp, #24
 242              	.LCFI6:
 243              		.cfi_def_cfa_offset 32
 244 0004 00AF     		add	r7, sp, #0
 245              	.LCFI7:
 246              		.cfi_def_cfa_register 7
 247 0006 7860     		str	r0, [r7, #4]
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t pll_config;
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check Null pointer */
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (RCC_OscInitStruct == NULL)
 248              		.loc 1 353 0
 249 0008 7B68     		ldr	r3, [r7, #4]
 250 000a 002B     		cmp	r3, #0
 251 000c 01D1     		bne	.L15
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 252              		.loc 1 355 0
 253 000e 0123     		movs	r3, #1
 254 0010 6CE2     		b	.L16
 255              	.L15:
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 256              		.loc 1 362 0
 257 0012 7B68     		ldr	r3, [r7, #4]
 258 0014 1B68     		ldr	r3, [r3]
 259 0016 03F00103 		and	r3, r3, #1
 260 001a 002B     		cmp	r3, #0
 261 001c 00F08780 		beq	.L17
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
ARM GAS  /tmp/ccW1V1Y1.s 			page 12


 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 262              		.loc 1 368 0
 263 0020 924B     		ldr	r3, .L73
 264 0022 5B68     		ldr	r3, [r3, #4]
 265 0024 03F00C03 		and	r3, r3, #12
 266 0028 042B     		cmp	r3, #4
 267 002a 0CD0     		beq	.L18
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL
 268              		.loc 1 369 0
 269 002c 8F4B     		ldr	r3, .L73
 270 002e 5B68     		ldr	r3, [r3, #4]
 271 0030 03F00C03 		and	r3, r3, #12
 272 0034 082B     		cmp	r3, #8
 273 0036 12D1     		bne	.L19
 274              		.loc 1 369 0 is_stmt 0 discriminator 1
 275 0038 8C4B     		ldr	r3, .L73
 276 003a 5B68     		ldr	r3, [r3, #4]
 277 003c 03F48033 		and	r3, r3, #65536
 278 0040 B3F5803F 		cmp	r3, #65536
 279 0044 0BD1     		bne	.L19
 280              	.L18:
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE
 281              		.loc 1 371 0 is_stmt 1
 282 0046 894B     		ldr	r3, .L73
 283 0048 1B68     		ldr	r3, [r3]
 284 004a 03F40033 		and	r3, r3, #131072
 285 004e 002B     		cmp	r3, #0
 286 0050 6CD0     		beq	.L72
 287              		.loc 1 371 0 is_stmt 0 discriminator 1
 288 0052 7B68     		ldr	r3, [r7, #4]
 289 0054 5B68     		ldr	r3, [r3, #4]
 290 0056 002B     		cmp	r3, #0
 291 0058 68D1     		bne	.L72
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 292              		.loc 1 373 0 is_stmt 1
 293 005a 0123     		movs	r3, #1
 294 005c 46E2     		b	.L16
 295              	.L19:
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 296              		.loc 1 379 0
 297 005e 7B68     		ldr	r3, [r7, #4]
 298 0060 5B68     		ldr	r3, [r3, #4]
 299 0062 B3F5803F 		cmp	r3, #65536
 300 0066 06D1     		bne	.L21
 301              		.loc 1 379 0 is_stmt 0 discriminator 1
 302 0068 804A     		ldr	r2, .L73
 303 006a 804B     		ldr	r3, .L73
 304 006c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccW1V1Y1.s 			page 13


 305 006e 43F48033 		orr	r3, r3, #65536
 306 0072 1360     		str	r3, [r2]
 307 0074 2EE0     		b	.L22
 308              	.L21:
 309              		.loc 1 379 0 discriminator 2
 310 0076 7B68     		ldr	r3, [r7, #4]
 311 0078 5B68     		ldr	r3, [r3, #4]
 312 007a 002B     		cmp	r3, #0
 313 007c 0CD1     		bne	.L23
 314              		.loc 1 379 0 discriminator 3
 315 007e 7B4A     		ldr	r2, .L73
 316 0080 7A4B     		ldr	r3, .L73
 317 0082 1B68     		ldr	r3, [r3]
 318 0084 23F48033 		bic	r3, r3, #65536
 319 0088 1360     		str	r3, [r2]
 320 008a 784A     		ldr	r2, .L73
 321 008c 774B     		ldr	r3, .L73
 322 008e 1B68     		ldr	r3, [r3]
 323 0090 23F48023 		bic	r3, r3, #262144
 324 0094 1360     		str	r3, [r2]
 325 0096 1DE0     		b	.L22
 326              	.L23:
 327              		.loc 1 379 0 discriminator 4
 328 0098 7B68     		ldr	r3, [r7, #4]
 329 009a 5B68     		ldr	r3, [r3, #4]
 330 009c B3F5A02F 		cmp	r3, #327680
 331 00a0 0CD1     		bne	.L24
 332              		.loc 1 379 0 discriminator 5
 333 00a2 724A     		ldr	r2, .L73
 334 00a4 714B     		ldr	r3, .L73
 335 00a6 1B68     		ldr	r3, [r3]
 336 00a8 43F48023 		orr	r3, r3, #262144
 337 00ac 1360     		str	r3, [r2]
 338 00ae 6F4A     		ldr	r2, .L73
 339 00b0 6E4B     		ldr	r3, .L73
 340 00b2 1B68     		ldr	r3, [r3]
 341 00b4 43F48033 		orr	r3, r3, #65536
 342 00b8 1360     		str	r3, [r2]
 343 00ba 0BE0     		b	.L22
 344              	.L24:
 345              		.loc 1 379 0 discriminator 6
 346 00bc 6B4A     		ldr	r2, .L73
 347 00be 6B4B     		ldr	r3, .L73
 348 00c0 1B68     		ldr	r3, [r3]
 349 00c2 23F48033 		bic	r3, r3, #65536
 350 00c6 1360     		str	r3, [r2]
 351 00c8 684A     		ldr	r2, .L73
 352 00ca 684B     		ldr	r3, .L73
 353 00cc 1B68     		ldr	r3, [r3]
 354 00ce 23F48023 		bic	r3, r3, #262144
 355 00d2 1360     		str	r3, [r2]
 356              	.L22:
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSE State */
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 357              		.loc 1 383 0 is_stmt 1
ARM GAS  /tmp/ccW1V1Y1.s 			page 14


 358 00d4 7B68     		ldr	r3, [r7, #4]
 359 00d6 5B68     		ldr	r3, [r3, #4]
 360 00d8 002B     		cmp	r3, #0
 361 00da 13D0     		beq	.L25
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 362              		.loc 1 386 0
 363 00dc FFF7FEFF 		bl	HAL_GetTick
 364 00e0 3861     		str	r0, [r7, #16]
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is ready */
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 365              		.loc 1 389 0
 366 00e2 08E0     		b	.L26
 367              	.L27:
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 368              		.loc 1 391 0
 369 00e4 FFF7FEFF 		bl	HAL_GetTick
 370 00e8 0246     		mov	r2, r0
 371 00ea 3B69     		ldr	r3, [r7, #16]
 372 00ec D31A     		subs	r3, r2, r3
 373 00ee 642B     		cmp	r3, #100
 374 00f0 01D9     		bls	.L26
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 375              		.loc 1 393 0
 376 00f2 0323     		movs	r3, #3
 377 00f4 FAE1     		b	.L16
 378              	.L26:
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 379              		.loc 1 389 0
 380 00f6 5D4B     		ldr	r3, .L73
 381 00f8 1B68     		ldr	r3, [r3]
 382 00fa 03F40033 		and	r3, r3, #131072
 383 00fe 002B     		cmp	r3, #0
 384 0100 F0D0     		beq	.L27
 385 0102 14E0     		b	.L17
 386              	.L25:
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 387              		.loc 1 400 0
 388 0104 FFF7FEFF 		bl	HAL_GetTick
 389 0108 3861     		str	r0, [r7, #16]
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is disabled */
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 390              		.loc 1 403 0
 391 010a 08E0     		b	.L28
 392              	.L29:
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
ARM GAS  /tmp/ccW1V1Y1.s 			page 15


 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 393              		.loc 1 405 0
 394 010c FFF7FEFF 		bl	HAL_GetTick
 395 0110 0246     		mov	r2, r0
 396 0112 3B69     		ldr	r3, [r7, #16]
 397 0114 D31A     		subs	r3, r2, r3
 398 0116 642B     		cmp	r3, #100
 399 0118 01D9     		bls	.L28
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 400              		.loc 1 407 0
 401 011a 0323     		movs	r3, #3
 402 011c E6E1     		b	.L16
 403              	.L28:
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 404              		.loc 1 403 0
 405 011e 534B     		ldr	r3, .L73
 406 0120 1B68     		ldr	r3, [r3]
 407 0122 03F40033 		and	r3, r3, #131072
 408 0126 002B     		cmp	r3, #0
 409 0128 F0D1     		bne	.L29
 410 012a 00E0     		b	.L17
 411              	.L72:
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 412              		.loc 1 371 0
 413 012c 00BF     		nop
 414              	.L17:
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 415              		.loc 1 414 0
 416 012e 7B68     		ldr	r3, [r7, #4]
 417 0130 1B68     		ldr	r3, [r3]
 418 0132 03F00203 		and	r3, r3, #2
 419 0136 002B     		cmp	r3, #0
 420 0138 63D0     		beq	.L30
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 421              		.loc 1 421 0
 422 013a 4C4B     		ldr	r3, .L73
 423 013c 5B68     		ldr	r3, [r3, #4]
 424 013e 03F00C03 		and	r3, r3, #12
 425 0142 002B     		cmp	r3, #0
 426 0144 0BD0     		beq	.L31
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL
 427              		.loc 1 422 0
 428 0146 494B     		ldr	r3, .L73
 429 0148 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccW1V1Y1.s 			page 16


 430 014a 03F00C03 		and	r3, r3, #12
 431 014e 082B     		cmp	r3, #8
 432 0150 1CD1     		bne	.L32
 433              		.loc 1 422 0 is_stmt 0 discriminator 1
 434 0152 464B     		ldr	r3, .L73
 435 0154 5B68     		ldr	r3, [r3, #4]
 436 0156 03F48033 		and	r3, r3, #65536
 437 015a 002B     		cmp	r3, #0
 438 015c 16D1     		bne	.L32
 439              	.L31:
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI
 440              		.loc 1 425 0 is_stmt 1
 441 015e 434B     		ldr	r3, .L73
 442 0160 1B68     		ldr	r3, [r3]
 443 0162 03F00203 		and	r3, r3, #2
 444 0166 002B     		cmp	r3, #0
 445 0168 05D0     		beq	.L33
 446              		.loc 1 425 0 is_stmt 0 discriminator 1
 447 016a 7B68     		ldr	r3, [r7, #4]
 448 016c 1B69     		ldr	r3, [r3, #16]
 449 016e 012B     		cmp	r3, #1
 450 0170 01D0     		beq	.L33
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 451              		.loc 1 427 0 is_stmt 1
 452 0172 0123     		movs	r3, #1
 453 0174 BAE1     		b	.L16
 454              	.L33:
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 455              		.loc 1 433 0
 456 0176 3D49     		ldr	r1, .L73
 457 0178 3C4B     		ldr	r3, .L73
 458 017a 1B68     		ldr	r3, [r3]
 459 017c 23F0F802 		bic	r2, r3, #248
 460 0180 7B68     		ldr	r3, [r7, #4]
 461 0182 5B69     		ldr	r3, [r3, #20]
 462 0184 DB00     		lsls	r3, r3, #3
 463 0186 1343     		orrs	r3, r3, r2
 464 0188 0B60     		str	r3, [r1]
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 465              		.loc 1 425 0
 466 018a 3AE0     		b	.L30
 467              	.L32:
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSI State */
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 468              		.loc 1 439 0
ARM GAS  /tmp/ccW1V1Y1.s 			page 17


 469 018c 7B68     		ldr	r3, [r7, #4]
 470 018e 1B69     		ldr	r3, [r3, #16]
 471 0190 002B     		cmp	r3, #0
 472 0192 20D0     		beq	.L34
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 473              		.loc 1 442 0
 474 0194 364B     		ldr	r3, .L73+4
 475 0196 0122     		movs	r2, #1
 476 0198 1A60     		str	r2, [r3]
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 477              		.loc 1 445 0
 478 019a FFF7FEFF 		bl	HAL_GetTick
 479 019e 3861     		str	r0, [r7, #16]
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is ready */
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 480              		.loc 1 448 0
 481 01a0 08E0     		b	.L35
 482              	.L36:
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 483              		.loc 1 450 0
 484 01a2 FFF7FEFF 		bl	HAL_GetTick
 485 01a6 0246     		mov	r2, r0
 486 01a8 3B69     		ldr	r3, [r7, #16]
 487 01aa D31A     		subs	r3, r2, r3
 488 01ac 022B     		cmp	r3, #2
 489 01ae 01D9     		bls	.L35
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 490              		.loc 1 452 0
 491 01b0 0323     		movs	r3, #3
 492 01b2 9BE1     		b	.L16
 493              	.L35:
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 494              		.loc 1 448 0
 495 01b4 2D4B     		ldr	r3, .L73
 496 01b6 1B68     		ldr	r3, [r3]
 497 01b8 03F00203 		and	r3, r3, #2
 498 01bc 002B     		cmp	r3, #0
 499 01be F0D0     		beq	.L36
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 500              		.loc 1 457 0
 501 01c0 2A49     		ldr	r1, .L73
 502 01c2 2A4B     		ldr	r3, .L73
 503 01c4 1B68     		ldr	r3, [r3]
 504 01c6 23F0F802 		bic	r2, r3, #248
 505 01ca 7B68     		ldr	r3, [r7, #4]
 506 01cc 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccW1V1Y1.s 			page 18


 507 01ce DB00     		lsls	r3, r3, #3
 508 01d0 1343     		orrs	r3, r3, r2
 509 01d2 0B60     		str	r3, [r1]
 510 01d4 15E0     		b	.L30
 511              	.L34:
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 512              		.loc 1 462 0
 513 01d6 264B     		ldr	r3, .L73+4
 514 01d8 0022     		movs	r2, #0
 515 01da 1A60     		str	r2, [r3]
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 516              		.loc 1 465 0
 517 01dc FFF7FEFF 		bl	HAL_GetTick
 518 01e0 3861     		str	r0, [r7, #16]
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is disabled */
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 519              		.loc 1 468 0
 520 01e2 08E0     		b	.L37
 521              	.L38:
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 522              		.loc 1 470 0
 523 01e4 FFF7FEFF 		bl	HAL_GetTick
 524 01e8 0246     		mov	r2, r0
 525 01ea 3B69     		ldr	r3, [r7, #16]
 526 01ec D31A     		subs	r3, r2, r3
 527 01ee 022B     		cmp	r3, #2
 528 01f0 01D9     		bls	.L37
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 529              		.loc 1 472 0
 530 01f2 0323     		movs	r3, #3
 531 01f4 7AE1     		b	.L16
 532              	.L37:
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 533              		.loc 1 468 0
 534 01f6 1D4B     		ldr	r3, .L73
 535 01f8 1B68     		ldr	r3, [r3]
 536 01fa 03F00203 		and	r3, r3, #2
 537 01fe 002B     		cmp	r3, #0
 538 0200 F0D1     		bne	.L38
 539              	.L30:
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 540              		.loc 1 479 0
ARM GAS  /tmp/ccW1V1Y1.s 			page 19


 541 0202 7B68     		ldr	r3, [r7, #4]
 542 0204 1B68     		ldr	r3, [r3]
 543 0206 03F00803 		and	r3, r3, #8
 544 020a 002B     		cmp	r3, #0
 545 020c 3AD0     		beq	.L39
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the LSI State */
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 546              		.loc 1 485 0
 547 020e 7B68     		ldr	r3, [r7, #4]
 548 0210 9B69     		ldr	r3, [r3, #24]
 549 0212 002B     		cmp	r3, #0
 550 0214 19D0     		beq	.L40
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 551              		.loc 1 488 0
 552 0216 174B     		ldr	r3, .L73+8
 553 0218 0122     		movs	r2, #1
 554 021a 1A60     		str	r2, [r3]
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 555              		.loc 1 491 0
 556 021c FFF7FEFF 		bl	HAL_GetTick
 557 0220 3861     		str	r0, [r7, #16]
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is ready */
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 558              		.loc 1 494 0
 559 0222 08E0     		b	.L41
 560              	.L42:
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 561              		.loc 1 496 0
 562 0224 FFF7FEFF 		bl	HAL_GetTick
 563 0228 0246     		mov	r2, r0
 564 022a 3B69     		ldr	r3, [r7, #16]
 565 022c D31A     		subs	r3, r2, r3
 566 022e 022B     		cmp	r3, #2
 567 0230 01D9     		bls	.L41
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 568              		.loc 1 498 0
 569 0232 0323     		movs	r3, #3
 570 0234 5AE1     		b	.L16
 571              	.L41:
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 572              		.loc 1 494 0
 573 0236 0D4B     		ldr	r3, .L73
 574 0238 5B6A     		ldr	r3, [r3, #36]
 575 023a 03F00203 		and	r3, r3, #2
 576 023e 002B     		cmp	r3, #0
 577 0240 F0D0     		beq	.L42
ARM GAS  /tmp/ccW1V1Y1.s 			page 20


 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           should be added.*/
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       RCC_Delay(1);
 578              		.loc 1 503 0
 579 0242 0120     		movs	r0, #1
 580 0244 FFF7FEFF 		bl	RCC_Delay
 581 0248 1CE0     		b	.L39
 582              	.L40:
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 583              		.loc 1 508 0
 584 024a 0A4B     		ldr	r3, .L73+8
 585 024c 0022     		movs	r2, #0
 586 024e 1A60     		str	r2, [r3]
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 587              		.loc 1 511 0
 588 0250 FFF7FEFF 		bl	HAL_GetTick
 589 0254 3861     		str	r0, [r7, #16]
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is disabled */
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 590              		.loc 1 514 0
 591 0256 0FE0     		b	.L43
 592              	.L44:
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 593              		.loc 1 516 0
 594 0258 FFF7FEFF 		bl	HAL_GetTick
 595 025c 0246     		mov	r2, r0
 596 025e 3B69     		ldr	r3, [r7, #16]
 597 0260 D31A     		subs	r3, r2, r3
 598 0262 022B     		cmp	r3, #2
 599 0264 08D9     		bls	.L43
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 600              		.loc 1 518 0
 601 0266 0323     		movs	r3, #3
 602 0268 40E1     		b	.L16
 603              	.L74:
 604 026a 00BF     		.align	2
 605              	.L73:
 606 026c 00100240 		.word	1073876992
 607 0270 00004242 		.word	1111621632
 608 0274 80044242 		.word	1111622784
 609              	.L43:
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 610              		.loc 1 514 0
 611 0278 9E4B     		ldr	r3, .L75
 612 027a 5B6A     		ldr	r3, [r3, #36]
 613 027c 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/ccW1V1Y1.s 			page 21


 614 0280 002B     		cmp	r3, #0
 615 0282 E9D1     		bne	.L44
 616              	.L39:
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 617              		.loc 1 524 0
 618 0284 7B68     		ldr	r3, [r7, #4]
 619 0286 1B68     		ldr	r3, [r3]
 620 0288 03F00403 		and	r3, r3, #4
 621 028c 002B     		cmp	r3, #0
 622 028e 00F0A680 		beq	.L45
 623              	.LBB2:
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 624              		.loc 1 526 0
 625 0292 0023     		movs	r3, #0
 626 0294 FB75     		strb	r3, [r7, #23]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 627              		.loc 1 533 0
 628 0296 974B     		ldr	r3, .L75
 629 0298 DB69     		ldr	r3, [r3, #28]
 630 029a 03F08053 		and	r3, r3, #268435456
 631 029e 002B     		cmp	r3, #0
 632 02a0 0DD1     		bne	.L46
 633              	.LBB3:
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 634              		.loc 1 535 0
 635 02a2 944A     		ldr	r2, .L75
 636 02a4 934B     		ldr	r3, .L75
 637 02a6 DB69     		ldr	r3, [r3, #28]
 638 02a8 43F08053 		orr	r3, r3, #268435456
 639 02ac D361     		str	r3, [r2, #28]
 640 02ae 914B     		ldr	r3, .L75
 641 02b0 DB69     		ldr	r3, [r3, #28]
 642 02b2 03F08053 		and	r3, r3, #268435456
 643 02b6 BB60     		str	r3, [r7, #8]
 644 02b8 BB68     		ldr	r3, [r7, #8]
 645              	.LBE3:
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       pwrclkchanged = SET;
 646              		.loc 1 536 0
 647 02ba 0123     		movs	r3, #1
 648 02bc FB75     		strb	r3, [r7, #23]
 649              	.L46:
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
ARM GAS  /tmp/ccW1V1Y1.s 			page 22


 650              		.loc 1 539 0
 651 02be 8E4B     		ldr	r3, .L75+4
 652 02c0 1B68     		ldr	r3, [r3]
 653 02c2 03F48073 		and	r3, r3, #256
 654 02c6 002B     		cmp	r3, #0
 655 02c8 18D1     		bne	.L47
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 656              		.loc 1 542 0
 657 02ca 8B4A     		ldr	r2, .L75+4
 658 02cc 8A4B     		ldr	r3, .L75+4
 659 02ce 1B68     		ldr	r3, [r3]
 660 02d0 43F48073 		orr	r3, r3, #256
 661 02d4 1360     		str	r3, [r2]
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 662              		.loc 1 545 0
 663 02d6 FFF7FEFF 		bl	HAL_GetTick
 664 02da 3861     		str	r0, [r7, #16]
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 665              		.loc 1 547 0
 666 02dc 08E0     		b	.L48
 667              	.L49:
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 668              		.loc 1 549 0
 669 02de FFF7FEFF 		bl	HAL_GetTick
 670 02e2 0246     		mov	r2, r0
 671 02e4 3B69     		ldr	r3, [r7, #16]
 672 02e6 D31A     		subs	r3, r2, r3
 673 02e8 642B     		cmp	r3, #100
 674 02ea 01D9     		bls	.L48
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 675              		.loc 1 551 0
 676 02ec 0323     		movs	r3, #3
 677 02ee FDE0     		b	.L16
 678              	.L48:
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 679              		.loc 1 547 0
 680 02f0 814B     		ldr	r3, .L75+4
 681 02f2 1B68     		ldr	r3, [r3]
 682 02f4 03F48073 		and	r3, r3, #256
 683 02f8 002B     		cmp	r3, #0
 684 02fa F0D0     		beq	.L49
 685              	.L47:
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 686              		.loc 1 557 0
 687 02fc 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccW1V1Y1.s 			page 23


 688 02fe DB68     		ldr	r3, [r3, #12]
 689 0300 012B     		cmp	r3, #1
 690 0302 06D1     		bne	.L50
 691              		.loc 1 557 0 is_stmt 0 discriminator 1
 692 0304 7B4A     		ldr	r2, .L75
 693 0306 7B4B     		ldr	r3, .L75
 694 0308 1B6A     		ldr	r3, [r3, #32]
 695 030a 43F00103 		orr	r3, r3, #1
 696 030e 1362     		str	r3, [r2, #32]
 697 0310 2DE0     		b	.L51
 698              	.L50:
 699              		.loc 1 557 0 discriminator 2
 700 0312 7B68     		ldr	r3, [r7, #4]
 701 0314 DB68     		ldr	r3, [r3, #12]
 702 0316 002B     		cmp	r3, #0
 703 0318 0CD1     		bne	.L52
 704              		.loc 1 557 0 discriminator 3
 705 031a 764A     		ldr	r2, .L75
 706 031c 754B     		ldr	r3, .L75
 707 031e 1B6A     		ldr	r3, [r3, #32]
 708 0320 23F00103 		bic	r3, r3, #1
 709 0324 1362     		str	r3, [r2, #32]
 710 0326 734A     		ldr	r2, .L75
 711 0328 724B     		ldr	r3, .L75
 712 032a 1B6A     		ldr	r3, [r3, #32]
 713 032c 23F00403 		bic	r3, r3, #4
 714 0330 1362     		str	r3, [r2, #32]
 715 0332 1CE0     		b	.L51
 716              	.L52:
 717              		.loc 1 557 0 discriminator 4
 718 0334 7B68     		ldr	r3, [r7, #4]
 719 0336 DB68     		ldr	r3, [r3, #12]
 720 0338 052B     		cmp	r3, #5
 721 033a 0CD1     		bne	.L53
 722              		.loc 1 557 0 discriminator 5
 723 033c 6D4A     		ldr	r2, .L75
 724 033e 6D4B     		ldr	r3, .L75
 725 0340 1B6A     		ldr	r3, [r3, #32]
 726 0342 43F00403 		orr	r3, r3, #4
 727 0346 1362     		str	r3, [r2, #32]
 728 0348 6A4A     		ldr	r2, .L75
 729 034a 6A4B     		ldr	r3, .L75
 730 034c 1B6A     		ldr	r3, [r3, #32]
 731 034e 43F00103 		orr	r3, r3, #1
 732 0352 1362     		str	r3, [r2, #32]
 733 0354 0BE0     		b	.L51
 734              	.L53:
 735              		.loc 1 557 0 discriminator 6
 736 0356 674A     		ldr	r2, .L75
 737 0358 664B     		ldr	r3, .L75
 738 035a 1B6A     		ldr	r3, [r3, #32]
 739 035c 23F00103 		bic	r3, r3, #1
 740 0360 1362     		str	r3, [r2, #32]
 741 0362 644A     		ldr	r2, .L75
 742 0364 634B     		ldr	r3, .L75
 743 0366 1B6A     		ldr	r3, [r3, #32]
 744 0368 23F00403 		bic	r3, r3, #4
ARM GAS  /tmp/ccW1V1Y1.s 			page 24


 745 036c 1362     		str	r3, [r2, #32]
 746              	.L51:
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 747              		.loc 1 559 0 is_stmt 1
 748 036e 7B68     		ldr	r3, [r7, #4]
 749 0370 DB68     		ldr	r3, [r3, #12]
 750 0372 002B     		cmp	r3, #0
 751 0374 15D0     		beq	.L54
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 752              		.loc 1 562 0
 753 0376 FFF7FEFF 		bl	HAL_GetTick
 754 037a 3861     		str	r0, [r7, #16]
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is ready */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 755              		.loc 1 565 0
 756 037c 0AE0     		b	.L55
 757              	.L56:
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 758              		.loc 1 567 0
 759 037e FFF7FEFF 		bl	HAL_GetTick
 760 0382 0246     		mov	r2, r0
 761 0384 3B69     		ldr	r3, [r7, #16]
 762 0386 D31A     		subs	r3, r2, r3
 763 0388 41F28832 		movw	r2, #5000
 764 038c 9342     		cmp	r3, r2
 765 038e 01D9     		bls	.L55
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 766              		.loc 1 569 0
 767 0390 0323     		movs	r3, #3
 768 0392 ABE0     		b	.L16
 769              	.L55:
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 770              		.loc 1 565 0
 771 0394 574B     		ldr	r3, .L75
 772 0396 1B6A     		ldr	r3, [r3, #32]
 773 0398 03F00203 		and	r3, r3, #2
 774 039c 002B     		cmp	r3, #0
 775 039e EED0     		beq	.L56
 776 03a0 14E0     		b	.L57
 777              	.L54:
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 778              		.loc 1 576 0
 779 03a2 FFF7FEFF 		bl	HAL_GetTick
 780 03a6 3861     		str	r0, [r7, #16]
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccW1V1Y1.s 			page 25


 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is disabled */
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 781              		.loc 1 579 0
 782 03a8 0AE0     		b	.L58
 783              	.L59:
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 784              		.loc 1 581 0
 785 03aa FFF7FEFF 		bl	HAL_GetTick
 786 03ae 0246     		mov	r2, r0
 787 03b0 3B69     		ldr	r3, [r7, #16]
 788 03b2 D31A     		subs	r3, r2, r3
 789 03b4 41F28832 		movw	r2, #5000
 790 03b8 9342     		cmp	r3, r2
 791 03ba 01D9     		bls	.L58
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 792              		.loc 1 583 0
 793 03bc 0323     		movs	r3, #3
 794 03be 95E0     		b	.L16
 795              	.L58:
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 796              		.loc 1 579 0
 797 03c0 4C4B     		ldr	r3, .L75
 798 03c2 1B6A     		ldr	r3, [r3, #32]
 799 03c4 03F00203 		and	r3, r3, #2
 800 03c8 002B     		cmp	r3, #0
 801 03ca EED1     		bne	.L59
 802              	.L57:
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Require to disable power clock if necessary */
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (pwrclkchanged == SET)
 803              		.loc 1 589 0
 804 03cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 805 03ce 012B     		cmp	r3, #1
 806 03d0 05D1     		bne	.L45
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 807              		.loc 1 591 0
 808 03d2 484A     		ldr	r2, .L75
 809 03d4 474B     		ldr	r3, .L75
 810 03d6 DB69     		ldr	r3, [r3, #28]
 811 03d8 23F08053 		bic	r3, r3, #268435456
 812 03dc D361     		str	r3, [r2, #28]
 813              	.L45:
 814              	.LBE2:
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL2 Configuration -----------------------*/
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
ARM GAS  /tmp/ccW1V1Y1.s 			page 26


 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* This bit can not be cleared if the PLL2 clock is used indirectly as system
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       clock (i.e. it is used as PLL clock entry that is used as system clock). */
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Prediv2 can be written only when the PLLI2S is disabled. */
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Return an error only if new value is different from the programmed value */
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_ERROR;
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv2 factor --------------------------------*/
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL2 multiplication factors. */
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL2. */
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_ENABLE();
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is ready */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
ARM GAS  /tmp/ccW1V1Y1.s 			page 27


 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Set PREDIV1 source to HSE */
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 815              		.loc 1 688 0
 816 03de 7B68     		ldr	r3, [r7, #4]
 817 03e0 DB69     		ldr	r3, [r3, #28]
 818 03e2 002B     		cmp	r3, #0
 819 03e4 00F08180 		beq	.L60
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 820              		.loc 1 691 0
 821 03e8 424B     		ldr	r3, .L75
 822 03ea 5B68     		ldr	r3, [r3, #4]
 823 03ec 03F00C03 		and	r3, r3, #12
 824 03f0 082B     		cmp	r3, #8
 825 03f2 61D0     		beq	.L61
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 826              		.loc 1 693 0
 827 03f4 7B68     		ldr	r3, [r7, #4]
 828 03f6 DB69     		ldr	r3, [r3, #28]
 829 03f8 022B     		cmp	r3, #2
 830 03fa 46D1     		bne	.L62
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
ARM GAS  /tmp/ccW1V1Y1.s 			page 28


 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 831              		.loc 1 700 0
 832 03fc 3F4B     		ldr	r3, .L75+8
 833 03fe 0022     		movs	r2, #0
 834 0400 1A60     		str	r2, [r3]
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 835              		.loc 1 703 0
 836 0402 FFF7FEFF 		bl	HAL_GetTick
 837 0406 3861     		str	r0, [r7, #16]
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 838              		.loc 1 706 0
 839 0408 08E0     		b	.L63
 840              	.L64:
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 841              		.loc 1 708 0
 842 040a FFF7FEFF 		bl	HAL_GetTick
 843 040e 0246     		mov	r2, r0
 844 0410 3B69     		ldr	r3, [r7, #16]
 845 0412 D31A     		subs	r3, r2, r3
 846 0414 022B     		cmp	r3, #2
 847 0416 01D9     		bls	.L63
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 848              		.loc 1 710 0
 849 0418 0323     		movs	r3, #3
 850 041a 67E0     		b	.L16
 851              	.L63:
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 852              		.loc 1 706 0
 853 041c 354B     		ldr	r3, .L75
 854 041e 1B68     		ldr	r3, [r3]
 855 0420 03F00073 		and	r3, r3, #33554432
 856 0424 002B     		cmp	r3, #0
 857 0426 F0D1     		bne	.L64
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv factor --------------------------------*/
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* It can be written only when the PLL is disabled. Not used in PLL source is different tha
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 858              		.loc 1 716 0
 859 0428 7B68     		ldr	r3, [r7, #4]
 860 042a 1B6A     		ldr	r3, [r3, #32]
 861 042c B3F5803F 		cmp	r3, #65536
 862 0430 08D1     		bne	.L65
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Check the parameter */
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
ARM GAS  /tmp/ccW1V1Y1.s 			page 29


 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 source */
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 Value */
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 863              		.loc 1 728 0
 864 0432 3049     		ldr	r1, .L75
 865 0434 2F4B     		ldr	r3, .L75
 866 0436 5B68     		ldr	r3, [r3, #4]
 867 0438 23F40032 		bic	r2, r3, #131072
 868 043c 7B68     		ldr	r3, [r7, #4]
 869 043e 9B68     		ldr	r3, [r3, #8]
 870 0440 1343     		orrs	r3, r3, r2
 871 0442 4B60     		str	r3, [r1, #4]
 872              	.L65:
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL clock source and multiplication factors. */
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 873              		.loc 1 732 0
 874 0444 2B48     		ldr	r0, .L75
 875 0446 2B4B     		ldr	r3, .L75
 876 0448 5B68     		ldr	r3, [r3, #4]
 877 044a 23F47412 		bic	r2, r3, #3997696
 878 044e 7B68     		ldr	r3, [r7, #4]
 879 0450 196A     		ldr	r1, [r3, #32]
 880 0452 7B68     		ldr	r3, [r7, #4]
 881 0454 5B6A     		ldr	r3, [r3, #36]
 882 0456 0B43     		orrs	r3, r3, r1
 883 0458 1343     		orrs	r3, r3, r2
 884 045a 4360     		str	r3, [r0, #4]
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL. */
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 885              		.loc 1 735 0
 886 045c 274B     		ldr	r3, .L75+8
 887 045e 0122     		movs	r2, #1
 888 0460 1A60     		str	r2, [r3]
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 889              		.loc 1 738 0
 890 0462 FFF7FEFF 		bl	HAL_GetTick
 891 0466 3861     		str	r0, [r7, #16]
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is ready */
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 892              		.loc 1 741 0
 893 0468 08E0     		b	.L66
 894              	.L67:
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 895              		.loc 1 743 0
 896 046a FFF7FEFF 		bl	HAL_GetTick
 897 046e 0246     		mov	r2, r0
ARM GAS  /tmp/ccW1V1Y1.s 			page 30


 898 0470 3B69     		ldr	r3, [r7, #16]
 899 0472 D31A     		subs	r3, r2, r3
 900 0474 022B     		cmp	r3, #2
 901 0476 01D9     		bls	.L66
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 902              		.loc 1 745 0
 903 0478 0323     		movs	r3, #3
 904 047a 37E0     		b	.L16
 905              	.L66:
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 906              		.loc 1 741 0
 907 047c 1D4B     		ldr	r3, .L75
 908 047e 1B68     		ldr	r3, [r3]
 909 0480 03F00073 		and	r3, r3, #33554432
 910 0484 002B     		cmp	r3, #0
 911 0486 F0D0     		beq	.L67
 912 0488 2FE0     		b	.L60
 913              	.L62:
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 914              		.loc 1 752 0
 915 048a 1C4B     		ldr	r3, .L75+8
 916 048c 0022     		movs	r2, #0
 917 048e 1A60     		str	r2, [r3]
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 918              		.loc 1 755 0
 919 0490 FFF7FEFF 		bl	HAL_GetTick
 920 0494 3861     		str	r0, [r7, #16]
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 921              		.loc 1 758 0
 922 0496 08E0     		b	.L68
 923              	.L69:
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 924              		.loc 1 760 0
 925 0498 FFF7FEFF 		bl	HAL_GetTick
 926 049c 0246     		mov	r2, r0
 927 049e 3B69     		ldr	r3, [r7, #16]
 928 04a0 D31A     		subs	r3, r2, r3
 929 04a2 022B     		cmp	r3, #2
 930 04a4 01D9     		bls	.L68
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 931              		.loc 1 762 0
 932 04a6 0323     		movs	r3, #3
 933 04a8 20E0     		b	.L16
 934              	.L68:
ARM GAS  /tmp/ccW1V1Y1.s 			page 31


 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 935              		.loc 1 758 0
 936 04aa 124B     		ldr	r3, .L75
 937 04ac 1B68     		ldr	r3, [r3]
 938 04ae 03F00073 		and	r3, r3, #33554432
 939 04b2 002B     		cmp	r3, #0
 940 04b4 F0D1     		bne	.L69
 941 04b6 18E0     		b	.L60
 942              	.L61:
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check if there is a request to disable the PLL used as System clock source */
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 943              		.loc 1 770 0
 944 04b8 7B68     		ldr	r3, [r7, #4]
 945 04ba DB69     		ldr	r3, [r3, #28]
 946 04bc 012B     		cmp	r3, #1
 947 04be 01D1     		bne	.L70
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 948              		.loc 1 772 0
 949 04c0 0123     		movs	r3, #1
 950 04c2 13E0     		b	.L16
 951              	.L70:
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Do not return HAL_ERROR if request repeats the current configuration */
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pll_config = RCC->CFGR;
 952              		.loc 1 777 0
 953 04c4 0B4B     		ldr	r3, .L75
 954 04c6 5B68     		ldr	r3, [r3, #4]
 955 04c8 FB60     		str	r3, [r7, #12]
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 956              		.loc 1 778 0
 957 04ca FB68     		ldr	r3, [r7, #12]
 958 04cc 03F48032 		and	r2, r3, #65536
 959 04d0 7B68     		ldr	r3, [r7, #4]
 960 04d2 1B6A     		ldr	r3, [r3, #32]
 961 04d4 9A42     		cmp	r2, r3
 962 04d6 06D1     		bne	.L71
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 963              		.loc 1 779 0 discriminator 1
 964 04d8 FB68     		ldr	r3, [r7, #12]
 965 04da 03F47012 		and	r2, r3, #3932160
 966 04de 7B68     		ldr	r3, [r7, #4]
 967 04e0 5B6A     		ldr	r3, [r3, #36]
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 968              		.loc 1 778 0 discriminator 1
 969 04e2 9A42     		cmp	r2, r3
 970 04e4 01D0     		beq	.L60
 971              	.L71:
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
ARM GAS  /tmp/ccW1V1Y1.s 			page 32


 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_ERROR;
 972              		.loc 1 781 0
 973 04e6 0123     		movs	r3, #1
 974 04e8 00E0     		b	.L16
 975              	.L60:
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 976              		.loc 1 787 0
 977 04ea 0023     		movs	r3, #0
 978              	.L16:
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 979              		.loc 1 788 0
 980 04ec 1846     		mov	r0, r3
 981 04ee 1837     		adds	r7, r7, #24
 982              	.LCFI8:
 983              		.cfi_def_cfa_offset 8
 984 04f0 BD46     		mov	sp, r7
 985              	.LCFI9:
 986              		.cfi_def_cfa_register 13
 987              		@ sp needed
 988 04f2 80BD     		pop	{r7, pc}
 989              	.L76:
 990              		.align	2
 991              	.L75:
 992 04f4 00100240 		.word	1073876992
 993 04f8 00700040 		.word	1073770496
 994 04fc 60004242 		.word	1111621728
 995              		.cfi_endproc
 996              	.LFE66:
 998              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 999              		.align	1
 1000              		.global	HAL_RCC_ClockConfig
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu softvfp
 1006              	HAL_RCC_ClockConfig:
 1007              	.LFB67:
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  FLatency FLASH Latency
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          The value of this parameter depend on device used within the same series
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
ARM GAS  /tmp/ccW1V1Y1.s 			page 33


 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked).
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         occur when the clock source will be ready.
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         currently used as system clock source.
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1008              		.loc 1 814 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 16
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012 0000 80B5     		push	{r7, lr}
 1013              	.LCFI10:
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 7, -8
 1016              		.cfi_offset 14, -4
 1017 0002 84B0     		sub	sp, sp, #16
 1018              	.LCFI11:
 1019              		.cfi_def_cfa_offset 24
 1020 0004 00AF     		add	r7, sp, #0
 1021              	.LCFI12:
 1022              		.cfi_def_cfa_register 7
 1023 0006 7860     		str	r0, [r7, #4]
 1024 0008 3960     		str	r1, [r7]
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check Null pointer */
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (RCC_ClkInitStruct == NULL)
 1025              		.loc 1 818 0
 1026 000a 7B68     		ldr	r3, [r7, #4]
 1027 000c 002B     		cmp	r3, #0
 1028 000e 01D1     		bne	.L78
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 1029              		.loc 1 820 0
 1030 0010 0123     		movs	r3, #1
 1031 0012 D0E0     		b	.L79
 1032              	.L78:
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   must be correctly programmed according to the frequency of the CPU clock
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     (HCLK) of the device. */
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (FLatency > __HAL_FLASH_GET_LATENCY())
 1033              		.loc 1 833 0
 1034 0014 6A4B     		ldr	r3, .L93
ARM GAS  /tmp/ccW1V1Y1.s 			page 34


 1035 0016 1B68     		ldr	r3, [r3]
 1036 0018 03F00702 		and	r2, r3, #7
 1037 001c 3B68     		ldr	r3, [r7]
 1038 001e 9A42     		cmp	r2, r3
 1039 0020 10D2     		bcs	.L80
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1040              		.loc 1 836 0
 1041 0022 6749     		ldr	r1, .L93
 1042 0024 664B     		ldr	r3, .L93
 1043 0026 1B68     		ldr	r3, [r3]
 1044 0028 23F00702 		bic	r2, r3, #7
 1045 002c 3B68     		ldr	r3, [r7]
 1046 002e 1343     		orrs	r3, r3, r2
 1047 0030 0B60     		str	r3, [r1]
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (__HAL_FLASH_GET_LATENCY() != FLatency)
 1048              		.loc 1 840 0
 1049 0032 634B     		ldr	r3, .L93
 1050 0034 1B68     		ldr	r3, [r3]
 1051 0036 03F00702 		and	r2, r3, #7
 1052 003a 3B68     		ldr	r3, [r7]
 1053 003c 9A42     		cmp	r2, r3
 1054 003e 01D0     		beq	.L80
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 1055              		.loc 1 842 0
 1056 0040 0123     		movs	r3, #1
 1057 0042 B8E0     		b	.L79
 1058              	.L80:
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /*-------------------------- HCLK Configuration --------------------------*/
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1059              		.loc 1 848 0
 1060 0044 7B68     		ldr	r3, [r7, #4]
 1061 0046 1B68     		ldr	r3, [r3]
 1062 0048 03F00203 		and	r3, r3, #2
 1063 004c 002B     		cmp	r3, #0
 1064 004e 20D0     		beq	.L81
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Set the highest APBx dividers in order to ensure that we do not go through
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     a non-spec phase whatever we decrease or increase HCLK. */
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1065              		.loc 1 852 0
 1066 0050 7B68     		ldr	r3, [r7, #4]
 1067 0052 1B68     		ldr	r3, [r3]
 1068 0054 03F00403 		and	r3, r3, #4
 1069 0058 002B     		cmp	r3, #0
 1070 005a 05D0     		beq	.L82
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
ARM GAS  /tmp/ccW1V1Y1.s 			page 35


 1071              		.loc 1 854 0
 1072 005c 594A     		ldr	r2, .L93+4
 1073 005e 594B     		ldr	r3, .L93+4
 1074 0060 5B68     		ldr	r3, [r3, #4]
 1075 0062 43F4E063 		orr	r3, r3, #1792
 1076 0066 5360     		str	r3, [r2, #4]
 1077              	.L82:
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1078              		.loc 1 857 0
 1079 0068 7B68     		ldr	r3, [r7, #4]
 1080 006a 1B68     		ldr	r3, [r3]
 1081 006c 03F00803 		and	r3, r3, #8
 1082 0070 002B     		cmp	r3, #0
 1083 0072 05D0     		beq	.L83
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 1084              		.loc 1 859 0
 1085 0074 534A     		ldr	r2, .L93+4
 1086 0076 534B     		ldr	r3, .L93+4
 1087 0078 5B68     		ldr	r3, [r3, #4]
 1088 007a 43F46053 		orr	r3, r3, #14336
 1089 007e 5360     		str	r3, [r2, #4]
 1090              	.L83:
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Set the new HCLK clock divider */
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1091              		.loc 1 864 0
 1092 0080 5049     		ldr	r1, .L93+4
 1093 0082 504B     		ldr	r3, .L93+4
 1094 0084 5B68     		ldr	r3, [r3, #4]
 1095 0086 23F0F002 		bic	r2, r3, #240
 1096 008a 7B68     		ldr	r3, [r7, #4]
 1097 008c 9B68     		ldr	r3, [r3, #8]
 1098 008e 1343     		orrs	r3, r3, r2
 1099 0090 4B60     		str	r3, [r1, #4]
 1100              	.L81:
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1101              		.loc 1 868 0
 1102 0092 7B68     		ldr	r3, [r7, #4]
 1103 0094 1B68     		ldr	r3, [r3]
 1104 0096 03F00103 		and	r3, r3, #1
 1105 009a 002B     		cmp	r3, #0
 1106 009c 40D0     		beq	.L84
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1107              		.loc 1 873 0
 1108 009e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccW1V1Y1.s 			page 36


 1109 00a0 5B68     		ldr	r3, [r3, #4]
 1110 00a2 012B     		cmp	r3, #1
 1111 00a4 07D1     		bne	.L85
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSE ready flag */
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1112              		.loc 1 876 0
 1113 00a6 474B     		ldr	r3, .L93+4
 1114 00a8 1B68     		ldr	r3, [r3]
 1115 00aa 03F40033 		and	r3, r3, #131072
 1116 00ae 002B     		cmp	r3, #0
 1117 00b0 15D1     		bne	.L86
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1118              		.loc 1 878 0
 1119 00b2 0123     		movs	r3, #1
 1120 00b4 7FE0     		b	.L79
 1121              	.L85:
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1122              		.loc 1 882 0
 1123 00b6 7B68     		ldr	r3, [r7, #4]
 1124 00b8 5B68     		ldr	r3, [r3, #4]
 1125 00ba 022B     		cmp	r3, #2
 1126 00bc 07D1     		bne	.L87
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the PLL ready flag */
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1127              		.loc 1 885 0
 1128 00be 414B     		ldr	r3, .L93+4
 1129 00c0 1B68     		ldr	r3, [r3]
 1130 00c2 03F00073 		and	r3, r3, #33554432
 1131 00c6 002B     		cmp	r3, #0
 1132 00c8 09D1     		bne	.L86
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1133              		.loc 1 887 0
 1134 00ca 0123     		movs	r3, #1
 1135 00cc 73E0     		b	.L79
 1136              	.L87:
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSI ready flag */
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1137              		.loc 1 894 0
 1138 00ce 3D4B     		ldr	r3, .L93+4
 1139 00d0 1B68     		ldr	r3, [r3]
 1140 00d2 03F00203 		and	r3, r3, #2
 1141 00d6 002B     		cmp	r3, #0
 1142 00d8 01D1     		bne	.L86
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
ARM GAS  /tmp/ccW1V1Y1.s 			page 37


 1143              		.loc 1 896 0
 1144 00da 0123     		movs	r3, #1
 1145 00dc 6BE0     		b	.L79
 1146              	.L86:
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 1147              		.loc 1 899 0
 1148 00de 3949     		ldr	r1, .L93+4
 1149 00e0 384B     		ldr	r3, .L93+4
 1150 00e2 5B68     		ldr	r3, [r3, #4]
 1151 00e4 23F00302 		bic	r2, r3, #3
 1152 00e8 7B68     		ldr	r3, [r7, #4]
 1153 00ea 5B68     		ldr	r3, [r3, #4]
 1154 00ec 1343     		orrs	r3, r3, r2
 1155 00ee 4B60     		str	r3, [r1, #4]
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Get Start Tick */
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 1156              		.loc 1 902 0
 1157 00f0 FFF7FEFF 		bl	HAL_GetTick
 1158 00f4 F860     		str	r0, [r7, #12]
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 1159              		.loc 1 904 0
 1160 00f6 0AE0     		b	.L88
 1161              	.L89:
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1162              		.loc 1 906 0
 1163 00f8 FFF7FEFF 		bl	HAL_GetTick
 1164 00fc 0246     		mov	r2, r0
 1165 00fe FB68     		ldr	r3, [r7, #12]
 1166 0100 D31A     		subs	r3, r2, r3
 1167 0102 41F28832 		movw	r2, #5000
 1168 0106 9342     		cmp	r3, r2
 1169 0108 01D9     		bls	.L88
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_TIMEOUT;
 1170              		.loc 1 908 0
 1171 010a 0323     		movs	r3, #3
 1172 010c 53E0     		b	.L79
 1173              	.L88:
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 1174              		.loc 1 904 0
 1175 010e 2D4B     		ldr	r3, .L93+4
 1176 0110 5B68     		ldr	r3, [r3, #4]
 1177 0112 03F00C02 		and	r2, r3, #12
 1178 0116 7B68     		ldr	r3, [r7, #4]
 1179 0118 5B68     		ldr	r3, [r3, #4]
 1180 011a 9B00     		lsls	r3, r3, #2
 1181 011c 9A42     		cmp	r2, r3
 1182 011e EBD1     		bne	.L89
 1183              	.L84:
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
ARM GAS  /tmp/ccW1V1Y1.s 			page 38


 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (FLatency < __HAL_FLASH_GET_LATENCY())
 1184              		.loc 1 915 0
 1185 0120 274B     		ldr	r3, .L93
 1186 0122 1B68     		ldr	r3, [r3]
 1187 0124 03F00702 		and	r2, r3, #7
 1188 0128 3B68     		ldr	r3, [r7]
 1189 012a 9A42     		cmp	r2, r3
 1190 012c 10D9     		bls	.L90
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1191              		.loc 1 918 0
 1192 012e 2449     		ldr	r1, .L93
 1193 0130 234B     		ldr	r3, .L93
 1194 0132 1B68     		ldr	r3, [r3]
 1195 0134 23F00702 		bic	r2, r3, #7
 1196 0138 3B68     		ldr	r3, [r7]
 1197 013a 1343     		orrs	r3, r3, r2
 1198 013c 0B60     		str	r3, [r1]
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if (__HAL_FLASH_GET_LATENCY() != FLatency)
 1199              		.loc 1 922 0
 1200 013e 204B     		ldr	r3, .L93
 1201 0140 1B68     		ldr	r3, [r3]
 1202 0142 03F00702 		and	r2, r3, #7
 1203 0146 3B68     		ldr	r3, [r7]
 1204 0148 9A42     		cmp	r2, r3
 1205 014a 01D0     		beq	.L90
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 1206              		.loc 1 924 0
 1207 014c 0123     		movs	r3, #1
 1208 014e 32E0     		b	.L79
 1209              	.L90:
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /*-------------------------- PCLK1 Configuration ---------------------------*/
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1210              		.loc 1 930 0
 1211 0150 7B68     		ldr	r3, [r7, #4]
 1212 0152 1B68     		ldr	r3, [r3]
 1213 0154 03F00403 		and	r3, r3, #4
 1214 0158 002B     		cmp	r3, #0
 1215 015a 08D0     		beq	.L91
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1216              		.loc 1 933 0
 1217 015c 1949     		ldr	r1, .L93+4
 1218 015e 194B     		ldr	r3, .L93+4
ARM GAS  /tmp/ccW1V1Y1.s 			page 39


 1219 0160 5B68     		ldr	r3, [r3, #4]
 1220 0162 23F4E062 		bic	r2, r3, #1792
 1221 0166 7B68     		ldr	r3, [r7, #4]
 1222 0168 DB68     		ldr	r3, [r3, #12]
 1223 016a 1343     		orrs	r3, r3, r2
 1224 016c 4B60     		str	r3, [r1, #4]
 1225              	.L91:
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1226              		.loc 1 937 0
 1227 016e 7B68     		ldr	r3, [r7, #4]
 1228 0170 1B68     		ldr	r3, [r3]
 1229 0172 03F00803 		and	r3, r3, #8
 1230 0176 002B     		cmp	r3, #0
 1231 0178 09D0     		beq	.L92
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1232              		.loc 1 940 0
 1233 017a 1249     		ldr	r1, .L93+4
 1234 017c 114B     		ldr	r3, .L93+4
 1235 017e 5B68     		ldr	r3, [r3, #4]
 1236 0180 23F46052 		bic	r2, r3, #14336
 1237 0184 7B68     		ldr	r3, [r7, #4]
 1238 0186 1B69     		ldr	r3, [r3, #16]
 1239 0188 DB00     		lsls	r3, r3, #3
 1240 018a 1343     		orrs	r3, r3, r2
 1241 018c 4B60     		str	r3, [r1, #4]
 1242              	.L92:
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_C
 1243              		.loc 1 944 0
 1244 018e FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1245 0192 0146     		mov	r1, r0
 1246 0194 0B4B     		ldr	r3, .L93+4
 1247 0196 5B68     		ldr	r3, [r3, #4]
 1248 0198 1B09     		lsrs	r3, r3, #4
 1249 019a 03F00F03 		and	r3, r3, #15
 1250 019e 0A4A     		ldr	r2, .L93+8
 1251 01a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1252 01a2 21FA03F3 		lsr	r3, r1, r3
 1253 01a6 094A     		ldr	r2, .L93+12
 1254 01a8 1360     		str	r3, [r2]
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   HAL_InitTick(uwTickPrio);
 1255              		.loc 1 947 0
 1256 01aa 094B     		ldr	r3, .L93+16
 1257 01ac 1B68     		ldr	r3, [r3]
 1258 01ae 1846     		mov	r0, r3
 1259 01b0 FFF7FEFF 		bl	HAL_InitTick
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
ARM GAS  /tmp/ccW1V1Y1.s 			page 40


 1260              		.loc 1 949 0
 1261 01b4 0023     		movs	r3, #0
 1262              	.L79:
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1263              		.loc 1 950 0
 1264 01b6 1846     		mov	r0, r3
 1265 01b8 1037     		adds	r7, r7, #16
 1266              	.LCFI13:
 1267              		.cfi_def_cfa_offset 8
 1268 01ba BD46     		mov	sp, r7
 1269              	.LCFI14:
 1270              		.cfi_def_cfa_register 13
 1271              		@ sp needed
 1272 01bc 80BD     		pop	{r7, pc}
 1273              	.L94:
 1274 01be 00BF     		.align	2
 1275              	.L93:
 1276 01c0 00200240 		.word	1073881088
 1277 01c4 00100240 		.word	1073876992
 1278 01c8 00000000 		.word	AHBPrescTable
 1279 01cc 00000000 		.word	SystemCoreClock
 1280 01d0 00000000 		.word	uwTickPrio
 1281              		.cfi_endproc
 1282              	.LFE67:
 1284              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1285              		.align	1
 1286              		.global	HAL_RCC_MCOConfig
 1287              		.syntax unified
 1288              		.thumb
 1289              		.thumb_func
 1290              		.fpu softvfp
 1292              	HAL_RCC_MCOConfig:
 1293              	.LFB68:
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *  @brief   RCC clocks control functions
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     frequencies.
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   MCO pin should be configured in alternate function mode.
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
ARM GAS  /tmp/ccW1V1Y1.s 			page 41


 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected as MCO clock
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System clock selected as MCO clock
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @if STM32F105xC
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE      XT1 external 3-25 MHz oscillator clock selecte
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endif
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @if STM32F107xC
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE XT1  external 3-25 MHz oscillator clock selected as
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endif
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCO DIV.
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1294              		.loc 1 1003 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 40
 1297              		@ frame_needed = 1, uses_anonymous_args = 0
 1298 0000 80B5     		push	{r7, lr}
 1299              	.LCFI15:
 1300              		.cfi_def_cfa_offset 8
 1301              		.cfi_offset 7, -8
 1302              		.cfi_offset 14, -4
 1303 0002 8AB0     		sub	sp, sp, #40
 1304              	.LCFI16:
 1305              		.cfi_def_cfa_offset 48
 1306 0004 00AF     		add	r7, sp, #0
 1307              	.LCFI17:
 1308              		.cfi_def_cfa_register 7
 1309 0006 F860     		str	r0, [r7, #12]
 1310 0008 B960     		str	r1, [r7, #8]
 1311 000a 7A60     		str	r2, [r7, #4]
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 1312              		.loc 1 1004 0
 1313 000c 07F11803 		add	r3, r7, #24
 1314 0010 0022     		movs	r2, #0
 1315 0012 1A60     		str	r2, [r3]
 1316 0014 5A60     		str	r2, [r3, #4]
 1317 0016 9A60     		str	r2, [r3, #8]
 1318 0018 DA60     		str	r2, [r3, #12]
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccW1V1Y1.s 			page 42


1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Prevent unused argument(s) compilation warning */
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCOx);
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCODiv);
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO1 pin in alternate function mode */
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Mode      = GPIO_MODE_AF_PP;
 1319              		.loc 1 1016 0
 1320 001a 0223     		movs	r3, #2
 1321 001c FB61     		str	r3, [r7, #28]
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 1322              		.loc 1 1017 0
 1323 001e 0323     		movs	r3, #3
 1324 0020 7B62     		str	r3, [r7, #36]
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
 1325              		.loc 1 1018 0
 1326 0022 0023     		movs	r3, #0
 1327 0024 3B62     		str	r3, [r7, #32]
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Pin       = MCO1_PIN;
 1328              		.loc 1 1019 0
 1329 0026 4FF48073 		mov	r3, #256
 1330 002a BB61     		str	r3, [r7, #24]
 1331              	.LBB4:
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* MCO1 Clock Enable */
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   MCO1_CLK_ENABLE();
 1332              		.loc 1 1022 0
 1333 002c 0E4A     		ldr	r2, .L96
 1334 002e 0E4B     		ldr	r3, .L96
 1335 0030 9B69     		ldr	r3, [r3, #24]
 1336 0032 43F00403 		orr	r3, r3, #4
 1337 0036 9361     		str	r3, [r2, #24]
 1338 0038 0B4B     		ldr	r3, .L96
 1339 003a 9B69     		ldr	r3, [r3, #24]
 1340 003c 03F00403 		and	r3, r3, #4
 1341 0040 7B61     		str	r3, [r7, #20]
 1342 0042 7B69     		ldr	r3, [r7, #20]
 1343              	.LBE4:
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 1344              		.loc 1 1024 0
 1345 0044 07F11803 		add	r3, r7, #24
 1346 0048 1946     		mov	r1, r3
 1347 004a 0848     		ldr	r0, .L96+4
 1348 004c FFF7FEFF 		bl	HAL_GPIO_Init
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO clock source */
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 1349              		.loc 1 1027 0
 1350 0050 0549     		ldr	r1, .L96
 1351 0052 054B     		ldr	r3, .L96
 1352 0054 5B68     		ldr	r3, [r3, #4]
 1353 0056 23F0E062 		bic	r2, r3, #117440512
 1354 005a BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccW1V1Y1.s 			page 43


 1355 005c 1343     		orrs	r3, r3, r2
 1356 005e 4B60     		str	r3, [r1, #4]
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1357              		.loc 1 1028 0
 1358 0060 00BF     		nop
 1359 0062 2837     		adds	r7, r7, #40
 1360              	.LCFI18:
 1361              		.cfi_def_cfa_offset 8
 1362 0064 BD46     		mov	sp, r7
 1363              	.LCFI19:
 1364              		.cfi_def_cfa_register 13
 1365              		@ sp needed
 1366 0066 80BD     		pop	{r7, pc}
 1367              	.L97:
 1368              		.align	2
 1369              	.L96:
 1370 0068 00100240 		.word	1073876992
 1371 006c 00080140 		.word	1073809408
 1372              		.cfi_endproc
 1373              	.LFE68:
 1375              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1376              		.align	1
 1377              		.global	HAL_RCC_EnableCSS
 1378              		.syntax unified
 1379              		.thumb
 1380              		.thumb_func
 1381              		.fpu softvfp
 1383              	HAL_RCC_EnableCSS:
 1384              	.LFB69:
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1385              		.loc 1 1040 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389              		@ link register save eliminated.
 1390 0000 80B4     		push	{r7}
 1391              	.LCFI20:
 1392              		.cfi_def_cfa_offset 4
 1393              		.cfi_offset 7, -4
 1394 0002 00AF     		add	r7, sp, #0
 1395              	.LCFI21:
 1396              		.cfi_def_cfa_register 7
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 1397              		.loc 1 1041 0
 1398 0004 034B     		ldr	r3, .L99
 1399 0006 0122     		movs	r2, #1
ARM GAS  /tmp/ccW1V1Y1.s 			page 44


 1400 0008 1A60     		str	r2, [r3]
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1401              		.loc 1 1042 0
 1402 000a 00BF     		nop
 1403 000c BD46     		mov	sp, r7
 1404              	.LCFI22:
 1405              		.cfi_def_cfa_register 13
 1406              		@ sp needed
 1407 000e 80BC     		pop	{r7}
 1408              	.LCFI23:
 1409              		.cfi_restore 7
 1410              		.cfi_def_cfa_offset 0
 1411 0010 7047     		bx	lr
 1412              	.L100:
 1413 0012 00BF     		.align	2
 1414              	.L99:
 1415 0014 4C004242 		.word	1111621708
 1416              		.cfi_endproc
 1417              	.LFE69:
 1419              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1420              		.align	1
 1421              		.global	HAL_RCC_DisableCSS
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1425              		.fpu softvfp
 1427              	HAL_RCC_DisableCSS:
 1428              	.LFB70:
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1429              		.loc 1 1049 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 0
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433              		@ link register save eliminated.
 1434 0000 80B4     		push	{r7}
 1435              	.LCFI24:
 1436              		.cfi_def_cfa_offset 4
 1437              		.cfi_offset 7, -4
 1438 0002 00AF     		add	r7, sp, #0
 1439              	.LCFI25:
 1440              		.cfi_def_cfa_register 7
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 1441              		.loc 1 1050 0
 1442 0004 034B     		ldr	r3, .L102
 1443 0006 0022     		movs	r2, #0
 1444 0008 1A60     		str	r2, [r3]
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1445              		.loc 1 1051 0
 1446 000a 00BF     		nop
 1447 000c BD46     		mov	sp, r7
 1448              	.LCFI26:
ARM GAS  /tmp/ccW1V1Y1.s 			page 45


 1449              		.cfi_def_cfa_register 13
 1450              		@ sp needed
 1451 000e 80BC     		pop	{r7}
 1452              	.LCFI27:
 1453              		.cfi_restore 7
 1454              		.cfi_def_cfa_offset 0
 1455 0010 7047     		bx	lr
 1456              	.L103:
 1457 0012 00BF     		.align	2
 1458              	.L102:
 1459 0014 4C004242 		.word	1111621708
 1460              		.cfi_endproc
 1461              	.LFE70:
 1463              		.section	.rodata
 1464              		.align	2
 1465              	.LC0:
 1466 0000 02       		.byte	2
 1467 0001 03       		.byte	3
 1468 0002 04       		.byte	4
 1469 0003 05       		.byte	5
 1470 0004 06       		.byte	6
 1471 0005 07       		.byte	7
 1472 0006 08       		.byte	8
 1473 0007 09       		.byte	9
 1474 0008 0A       		.byte	10
 1475 0009 0B       		.byte	11
 1476 000a 0C       		.byte	12
 1477 000b 0D       		.byte	13
 1478 000c 0E       		.byte	14
 1479 000d 0F       		.byte	15
 1480 000e 10       		.byte	16
 1481 000f 10       		.byte	16
 1482              		.align	2
 1483              	.LC1:
 1484 0010 01       		.byte	1
 1485 0011 02       		.byte	2
 1486              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1487              		.align	1
 1488              		.global	HAL_RCC_GetSysClockFreq
 1489              		.syntax unified
 1490              		.thumb
 1491              		.thumb_func
 1492              		.fpu softvfp
 1494              	HAL_RCC_GetSysClockFreq:
 1495              	.LFB71:
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         constant and the selected clock source:
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns a value based on HSE_VALUE
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**)
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns a value based on HSE_VALUE
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**) or HSI_VALUE(*) multiplied by the PLL factor.
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
ARM GAS  /tmp/ccW1V1Y1.s 			page 46


1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *               in voltage and temperature.
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                have wrong result.
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         value for HSE crystal.
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         baud-rate for the communication peripherals or configure other parameters.
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval SYSCLK frequency
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1496              		.loc 1 1083 0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 40
 1499              		@ frame_needed = 1, uses_anonymous_args = 0
 1500              		@ link register save eliminated.
 1501 0000 90B4     		push	{r4, r7}
 1502              	.LCFI28:
 1503              		.cfi_def_cfa_offset 8
 1504              		.cfi_offset 4, -8
 1505              		.cfi_offset 7, -4
 1506 0002 8AB0     		sub	sp, sp, #40
 1507              	.LCFI29:
 1508              		.cfi_def_cfa_offset 48
 1509 0004 00AF     		add	r7, sp, #0
 1510              	.LCFI30:
 1511              		.cfi_def_cfa_register 7
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 1512              		.loc 1 1088 0
 1513 0006 2A4B     		ldr	r3, .L113
 1514 0008 3C1D     		adds	r4, r7, #4
 1515 000a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1516 000c 84E80F00 		stm	r4, {r0, r1, r2, r3}
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[2] = {1, 2};
 1517              		.loc 1 1092 0
 1518 0010 284B     		ldr	r3, .L113+4
 1519 0012 1B88     		ldrh	r3, [r3]	@ movhi
 1520 0014 3B80     		strh	r3, [r7]	@ movhi
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif
ARM GAS  /tmp/ccW1V1Y1.s 			page 47


1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 1521              		.loc 1 1096 0
 1522 0016 0023     		movs	r3, #0
 1523 0018 FB61     		str	r3, [r7, #28]
 1524 001a 0023     		movs	r3, #0
 1525 001c BB61     		str	r3, [r7, #24]
 1526 001e 0023     		movs	r3, #0
 1527 0020 7B62     		str	r3, [r7, #36]
 1528 0022 0023     		movs	r3, #0
 1529 0024 7B61     		str	r3, [r7, #20]
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 1530              		.loc 1 1097 0
 1531 0026 0023     		movs	r3, #0
 1532 0028 3B62     		str	r3, [r7, #32]
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t prediv2 = 0U, pll2mul = 0U;
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tmpreg = RCC->CFGR;
 1533              		.loc 1 1102 0
 1534 002a 234B     		ldr	r3, .L113+8
 1535 002c 5B68     		ldr	r3, [r3, #4]
 1536 002e FB61     		str	r3, [r7, #28]
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   switch (tmpreg & RCC_CFGR_SWS)
 1537              		.loc 1 1105 0
 1538 0030 FB69     		ldr	r3, [r7, #28]
 1539 0032 03F00C03 		and	r3, r3, #12
 1540 0036 042B     		cmp	r3, #4
 1541 0038 02D0     		beq	.L106
 1542 003a 082B     		cmp	r3, #8
 1543 003c 03D0     		beq	.L107
 1544 003e 2DE0     		b	.L112
 1545              	.L106:
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1546              		.loc 1 1109 0
 1547 0040 1E4B     		ldr	r3, .L113+12
 1548 0042 3B62     		str	r3, [r7, #32]
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1549              		.loc 1 1110 0
 1550 0044 2DE0     		b	.L108
 1551              	.L107:
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 1552              		.loc 1 1114 0
 1553 0046 FB69     		ldr	r3, [r7, #28]
 1554 0048 9B0C     		lsrs	r3, r3, #18
 1555 004a 03F00F03 		and	r3, r3, #15
 1556 004e 07F12802 		add	r2, r7, #40
 1557 0052 1344     		add	r3, r3, r2
 1558 0054 13F8243C 		ldrb	r3, [r3, #-36]	@ zero_extendqisi2
ARM GAS  /tmp/ccW1V1Y1.s 			page 48


 1559 0058 7B61     		str	r3, [r7, #20]
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 1560              		.loc 1 1115 0
 1561 005a FB69     		ldr	r3, [r7, #28]
 1562 005c 03F48033 		and	r3, r3, #65536
 1563 0060 002B     		cmp	r3, #0
 1564 0062 13D0     		beq	.L109
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_
 1565              		.loc 1 1120 0
 1566 0064 144B     		ldr	r3, .L113+8
 1567 0066 5B68     		ldr	r3, [r3, #4]
 1568 0068 5B0C     		lsrs	r3, r3, #17
 1569 006a 03F00103 		and	r3, r3, #1
 1570 006e 07F12802 		add	r2, r7, #40
 1571 0072 1344     		add	r3, r3, r2
 1572 0074 13F8283C 		ldrb	r3, [r3, #-40]	@ zero_extendqisi2
 1573 0078 BB61     		str	r3, [r7, #24]
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* PLL2 selected as Prediv1 source */
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         else
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using floa
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* In this case need to divide pllclk by 2 */
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = pllclk / 2;
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 1574              		.loc 1 1146 0
 1575 007a 7B69     		ldr	r3, [r7, #20]
 1576 007c 0F4A     		ldr	r2, .L113+12
 1577 007e 02FB03F2 		mul	r2, r2, r3
 1578 0082 BB69     		ldr	r3, [r7, #24]
 1579 0084 B2FBF3F3 		udiv	r3, r2, r3
 1580 0088 7B62     		str	r3, [r7, #36]
 1581 008a 04E0     		b	.L110
 1582              	.L109:
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
ARM GAS  /tmp/ccW1V1Y1.s 			page 49


1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 1583              		.loc 1 1152 0
 1584 008c 7B69     		ldr	r3, [r7, #20]
 1585 008e 0C4A     		ldr	r2, .L113+16
 1586 0090 02FB03F3 		mul	r3, r2, r3
 1587 0094 7B62     		str	r3, [r7, #36]
 1588              	.L110:
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = pllclk;
 1589              		.loc 1 1154 0
 1590 0096 7B6A     		ldr	r3, [r7, #36]
 1591 0098 3B62     		str	r3, [r7, #32]
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1592              		.loc 1 1155 0
 1593 009a 02E0     		b	.L108
 1594              	.L112:
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     default: /* HSI used as system clock */
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1595              		.loc 1 1160 0
 1596 009c 074B     		ldr	r3, .L113+12
 1597 009e 3B62     		str	r3, [r7, #32]
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1598              		.loc 1 1161 0
 1599 00a0 00BF     		nop
 1600              	.L108:
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return sysclockfreq;
 1601              		.loc 1 1164 0
 1602 00a2 3B6A     		ldr	r3, [r7, #32]
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1603              		.loc 1 1165 0
 1604 00a4 1846     		mov	r0, r3
 1605 00a6 2837     		adds	r7, r7, #40
 1606              	.LCFI31:
 1607              		.cfi_def_cfa_offset 8
 1608 00a8 BD46     		mov	sp, r7
 1609              	.LCFI32:
 1610              		.cfi_def_cfa_register 13
 1611              		@ sp needed
 1612 00aa 90BC     		pop	{r4, r7}
 1613              	.LCFI33:
 1614              		.cfi_restore 7
 1615              		.cfi_restore 4
 1616              		.cfi_def_cfa_offset 0
 1617 00ac 7047     		bx	lr
 1618              	.L114:
 1619 00ae 00BF     		.align	2
 1620              	.L113:
 1621 00b0 00000000 		.word	.LC0
ARM GAS  /tmp/ccW1V1Y1.s 			page 50


 1622 00b4 10000000 		.word	.LC1
 1623 00b8 00100240 		.word	1073876992
 1624 00bc 00127A00 		.word	8000000
 1625 00c0 00093D00 		.word	4000000
 1626              		.cfi_endproc
 1627              	.LFE71:
 1629              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1630              		.align	1
 1631              		.global	HAL_RCC_GetHCLKFreq
 1632              		.syntax unified
 1633              		.thumb
 1634              		.thumb_func
 1635              		.fpu softvfp
 1637              	HAL_RCC_GetHCLKFreq:
 1638              	.LFB72:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         and updated within this function
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HCLK frequency
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1639              		.loc 1 1177 0
 1640              		.cfi_startproc
 1641              		@ args = 0, pretend = 0, frame = 0
 1642              		@ frame_needed = 1, uses_anonymous_args = 0
 1643              		@ link register save eliminated.
 1644 0000 80B4     		push	{r7}
 1645              	.LCFI34:
 1646              		.cfi_def_cfa_offset 4
 1647              		.cfi_offset 7, -4
 1648 0002 00AF     		add	r7, sp, #0
 1649              	.LCFI35:
 1650              		.cfi_def_cfa_register 7
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return SystemCoreClock;
 1651              		.loc 1 1178 0
 1652 0004 024B     		ldr	r3, .L117
 1653 0006 1B68     		ldr	r3, [r3]
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1654              		.loc 1 1179 0
 1655 0008 1846     		mov	r0, r3
 1656 000a BD46     		mov	sp, r7
 1657              	.LCFI36:
 1658              		.cfi_def_cfa_register 13
 1659              		@ sp needed
 1660 000c 80BC     		pop	{r7}
 1661              	.LCFI37:
 1662              		.cfi_restore 7
 1663              		.cfi_def_cfa_offset 0
 1664 000e 7047     		bx	lr
 1665              	.L118:
 1666              		.align	2
ARM GAS  /tmp/ccW1V1Y1.s 			page 51


 1667              	.L117:
 1668 0010 00000000 		.word	SystemCoreClock
 1669              		.cfi_endproc
 1670              	.LFE72:
 1672              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1673              		.align	1
 1674              		.global	HAL_RCC_GetPCLK1Freq
 1675              		.syntax unified
 1676              		.thumb
 1677              		.thumb_func
 1678              		.fpu softvfp
 1680              	HAL_RCC_GetPCLK1Freq:
 1681              	.LFB73:
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval PCLK1 frequency
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1682              		.loc 1 1188 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 1, uses_anonymous_args = 0
 1686 0000 80B5     		push	{r7, lr}
 1687              	.LCFI38:
 1688              		.cfi_def_cfa_offset 8
 1689              		.cfi_offset 7, -8
 1690              		.cfi_offset 14, -4
 1691 0002 00AF     		add	r7, sp, #0
 1692              	.LCFI39:
 1693              		.cfi_def_cfa_register 7
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos
 1694              		.loc 1 1190 0
 1695 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1696 0008 0146     		mov	r1, r0
 1697 000a 054B     		ldr	r3, .L121
 1698 000c 5B68     		ldr	r3, [r3, #4]
 1699 000e 1B0A     		lsrs	r3, r3, #8
 1700 0010 03F00703 		and	r3, r3, #7
 1701 0014 034A     		ldr	r2, .L121+4
 1702 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1703 0018 21FA03F3 		lsr	r3, r1, r3
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1704              		.loc 1 1191 0
 1705 001c 1846     		mov	r0, r3
 1706 001e 80BD     		pop	{r7, pc}
 1707              	.L122:
 1708              		.align	2
 1709              	.L121:
 1710 0020 00100240 		.word	1073876992
 1711 0024 00000000 		.word	APBPrescTable
 1712              		.cfi_endproc
 1713              	.LFE73:
ARM GAS  /tmp/ccW1V1Y1.s 			page 52


 1715              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1716              		.align	1
 1717              		.global	HAL_RCC_GetPCLK2Freq
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1721              		.fpu softvfp
 1723              	HAL_RCC_GetPCLK2Freq:
 1724              	.LFB74:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval PCLK2 frequency
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1725              		.loc 1 1200 0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 0
 1728              		@ frame_needed = 1, uses_anonymous_args = 0
 1729 0000 80B5     		push	{r7, lr}
 1730              	.LCFI40:
 1731              		.cfi_def_cfa_offset 8
 1732              		.cfi_offset 7, -8
 1733              		.cfi_offset 14, -4
 1734 0002 00AF     		add	r7, sp, #0
 1735              	.LCFI41:
 1736              		.cfi_def_cfa_register 7
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos
 1737              		.loc 1 1202 0
 1738 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1739 0008 0146     		mov	r1, r0
 1740 000a 054B     		ldr	r3, .L125
 1741 000c 5B68     		ldr	r3, [r3, #4]
 1742 000e DB0A     		lsrs	r3, r3, #11
 1743 0010 03F00703 		and	r3, r3, #7
 1744 0014 034A     		ldr	r2, .L125+4
 1745 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1746 0018 21FA03F3 		lsr	r3, r1, r3
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1747              		.loc 1 1203 0
 1748 001c 1846     		mov	r0, r3
 1749 001e 80BD     		pop	{r7, pc}
 1750              	.L126:
 1751              		.align	2
 1752              	.L125:
 1753 0020 00100240 		.word	1073876992
 1754 0024 00000000 		.word	APBPrescTable
 1755              		.cfi_endproc
 1756              	.LFE74:
 1758              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1759              		.align	1
 1760              		.global	HAL_RCC_GetOscConfig
 1761              		.syntax unified
ARM GAS  /tmp/ccW1V1Y1.s 			page 53


 1762              		.thumb
 1763              		.thumb_func
 1764              		.fpu softvfp
 1766              	HAL_RCC_GetOscConfig:
 1767              	.LFB75:
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * will be configured.
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1768              		.loc 1 1213 0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 8
 1771              		@ frame_needed = 1, uses_anonymous_args = 0
 1772              		@ link register save eliminated.
 1773 0000 80B4     		push	{r7}
 1774              	.LCFI42:
 1775              		.cfi_def_cfa_offset 4
 1776              		.cfi_offset 7, -4
 1777 0002 83B0     		sub	sp, sp, #12
 1778              	.LCFI43:
 1779              		.cfi_def_cfa_offset 16
 1780 0004 00AF     		add	r7, sp, #0
 1781              	.LCFI44:
 1782              		.cfi_def_cfa_register 7
 1783 0006 7860     		str	r0, [r7, #4]
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 1784              		.loc 1 1218 0
 1785 0008 7B68     		ldr	r3, [r7, #4]
 1786 000a 0F22     		movs	r2, #15
 1787 000c 1A60     		str	r2, [r3]
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                                       | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the Prediv1 source --------------------------------------------------*/
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1788              		.loc 1 1227 0
 1789 000e 3C4B     		ldr	r3, .L140
 1790 0010 1B68     		ldr	r3, [r3]
 1791 0012 03F48023 		and	r3, r3, #262144
 1792 0016 B3F5802F 		cmp	r3, #262144
 1793 001a 04D1     		bne	.L128
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
ARM GAS  /tmp/ccW1V1Y1.s 			page 54


 1794              		.loc 1 1229 0
 1795 001c 7B68     		ldr	r3, [r7, #4]
 1796 001e 4FF4A022 		mov	r2, #327680
 1797 0022 5A60     		str	r2, [r3, #4]
 1798 0024 0EE0     		b	.L129
 1799              	.L128:
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 1800              		.loc 1 1231 0
 1801 0026 364B     		ldr	r3, .L140
 1802 0028 1B68     		ldr	r3, [r3]
 1803 002a 03F48033 		and	r3, r3, #65536
 1804 002e B3F5803F 		cmp	r3, #65536
 1805 0032 04D1     		bne	.L130
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1806              		.loc 1 1233 0
 1807 0034 7B68     		ldr	r3, [r7, #4]
 1808 0036 4FF48032 		mov	r2, #65536
 1809 003a 5A60     		str	r2, [r3, #4]
 1810 003c 02E0     		b	.L129
 1811              	.L130:
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1812              		.loc 1 1237 0
 1813 003e 7B68     		ldr	r3, [r7, #4]
 1814 0040 0022     		movs	r2, #0
 1815 0042 5A60     		str	r2, [r3, #4]
 1816              	.L129:
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 1817              		.loc 1 1239 0
 1818 0044 2E4B     		ldr	r3, .L140
 1819 0046 5B68     		ldr	r3, [r3, #4]
 1820 0048 03F40032 		and	r2, r3, #131072
 1821 004c 7B68     		ldr	r3, [r7, #4]
 1822 004e 9A60     		str	r2, [r3, #8]
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 1823              		.loc 1 1242 0
 1824 0050 2B4B     		ldr	r3, .L140
 1825 0052 1B68     		ldr	r3, [r3]
 1826 0054 03F00103 		and	r3, r3, #1
 1827 0058 012B     		cmp	r3, #1
 1828 005a 03D1     		bne	.L131
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1829              		.loc 1 1244 0
 1830 005c 7B68     		ldr	r3, [r7, #4]
 1831 005e 0122     		movs	r2, #1
 1832 0060 1A61     		str	r2, [r3, #16]
 1833 0062 02E0     		b	.L132
 1834              	.L131:
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
ARM GAS  /tmp/ccW1V1Y1.s 			page 55


1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1835              		.loc 1 1248 0
 1836 0064 7B68     		ldr	r3, [r7, #4]
 1837 0066 0022     		movs	r2, #0
 1838 0068 1A61     		str	r2, [r3, #16]
 1839              	.L132:
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_
 1840              		.loc 1 1251 0
 1841 006a 254B     		ldr	r3, .L140
 1842 006c 1B68     		ldr	r3, [r3]
 1843 006e DB08     		lsrs	r3, r3, #3
 1844 0070 03F01F02 		and	r2, r3, #31
 1845 0074 7B68     		ldr	r3, [r7, #4]
 1846 0076 5A61     		str	r2, [r3, #20]
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1847              		.loc 1 1254 0
 1848 0078 214B     		ldr	r3, .L140
 1849 007a 1B6A     		ldr	r3, [r3, #32]
 1850 007c 03F00403 		and	r3, r3, #4
 1851 0080 042B     		cmp	r3, #4
 1852 0082 03D1     		bne	.L133
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1853              		.loc 1 1256 0
 1854 0084 7B68     		ldr	r3, [r7, #4]
 1855 0086 0522     		movs	r2, #5
 1856 0088 DA60     		str	r2, [r3, #12]
 1857 008a 0CE0     		b	.L134
 1858              	.L133:
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 1859              		.loc 1 1258 0
 1860 008c 1C4B     		ldr	r3, .L140
 1861 008e 1B6A     		ldr	r3, [r3, #32]
 1862 0090 03F00103 		and	r3, r3, #1
 1863 0094 012B     		cmp	r3, #1
 1864 0096 03D1     		bne	.L135
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 1865              		.loc 1 1260 0
 1866 0098 7B68     		ldr	r3, [r7, #4]
 1867 009a 0122     		movs	r2, #1
 1868 009c DA60     		str	r2, [r3, #12]
 1869 009e 02E0     		b	.L134
 1870              	.L135:
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 1871              		.loc 1 1264 0
 1872 00a0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccW1V1Y1.s 			page 56


 1873 00a2 0022     		movs	r2, #0
 1874 00a4 DA60     		str	r2, [r3, #12]
 1875              	.L134:
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 1876              		.loc 1 1268 0
 1877 00a6 164B     		ldr	r3, .L140
 1878 00a8 5B6A     		ldr	r3, [r3, #36]
 1879 00aa 03F00103 		and	r3, r3, #1
 1880 00ae 012B     		cmp	r3, #1
 1881 00b0 03D1     		bne	.L136
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1882              		.loc 1 1270 0
 1883 00b2 7B68     		ldr	r3, [r7, #4]
 1884 00b4 0122     		movs	r2, #1
 1885 00b6 9A61     		str	r2, [r3, #24]
 1886 00b8 02E0     		b	.L137
 1887              	.L136:
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 1888              		.loc 1 1274 0
 1889 00ba 7B68     		ldr	r3, [r7, #4]
 1890 00bc 0022     		movs	r2, #0
 1891 00be 9A61     		str	r2, [r3, #24]
 1892              	.L137:
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 1893              		.loc 1 1279 0
 1894 00c0 0F4B     		ldr	r3, .L140
 1895 00c2 1B68     		ldr	r3, [r3]
 1896 00c4 03F08073 		and	r3, r3, #16777216
 1897 00c8 B3F1807F 		cmp	r3, #16777216
 1898 00cc 03D1     		bne	.L138
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 1899              		.loc 1 1281 0
 1900 00ce 7B68     		ldr	r3, [r7, #4]
 1901 00d0 0222     		movs	r2, #2
 1902 00d2 DA61     		str	r2, [r3, #28]
 1903 00d4 02E0     		b	.L139
 1904              	.L138:
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1905              		.loc 1 1285 0
 1906 00d6 7B68     		ldr	r3, [r7, #4]
 1907 00d8 0122     		movs	r2, #1
 1908 00da DA61     		str	r2, [r3, #28]
ARM GAS  /tmp/ccW1V1Y1.s 			page 57


 1909              	.L139:
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 1910              		.loc 1 1287 0
 1911 00dc 084B     		ldr	r3, .L140
 1912 00de 5B68     		ldr	r3, [r3, #4]
 1913 00e0 03F48032 		and	r2, r3, #65536
 1914 00e4 7B68     		ldr	r3, [r7, #4]
 1915 00e6 1A62     		str	r2, [r3, #32]
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 1916              		.loc 1 1288 0
 1917 00e8 054B     		ldr	r3, .L140
 1918 00ea 5B68     		ldr	r3, [r3, #4]
 1919 00ec 03F47012 		and	r2, r3, #3932160
 1920 00f0 7B68     		ldr	r3, [r7, #4]
 1921 00f2 5A62     		str	r2, [r3, #36]
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the PLL2 configuration -----------------------------------------------*/
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC->CR & RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1922              		.loc 1 1302 0
 1923 00f4 00BF     		nop
 1924 00f6 0C37     		adds	r7, r7, #12
 1925              	.LCFI45:
 1926              		.cfi_def_cfa_offset 4
 1927 00f8 BD46     		mov	sp, r7
 1928              	.LCFI46:
 1929              		.cfi_def_cfa_register 13
 1930              		@ sp needed
 1931 00fa 80BC     		pop	{r7}
 1932              	.LCFI47:
 1933              		.cfi_restore 7
 1934              		.cfi_def_cfa_offset 0
 1935 00fc 7047     		bx	lr
 1936              	.L141:
 1937 00fe 00BF     		.align	2
 1938              	.L140:
 1939 0100 00100240 		.word	1073876992
 1940              		.cfi_endproc
 1941              	.LFE75:
 1943              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 1944              		.align	1
 1945              		.global	HAL_RCC_GetClockConfig
 1946              		.syntax unified
 1947              		.thumb
 1948              		.thumb_func
 1949              		.fpu softvfp
ARM GAS  /tmp/ccW1V1Y1.s 			page 58


 1951              	HAL_RCC_GetClockConfig:
 1952              	.LFB76:
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Get the RCC_ClkInitStruct according to the internal
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * contains the current clock configuration.
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1953              		.loc 1 1313 0
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 8
 1956              		@ frame_needed = 1, uses_anonymous_args = 0
 1957              		@ link register save eliminated.
 1958 0000 80B4     		push	{r7}
 1959              	.LCFI48:
 1960              		.cfi_def_cfa_offset 4
 1961              		.cfi_offset 7, -4
 1962 0002 83B0     		sub	sp, sp, #12
 1963              	.LCFI49:
 1964              		.cfi_def_cfa_offset 16
 1965 0004 00AF     		add	r7, sp, #0
 1966              	.LCFI50:
 1967              		.cfi_def_cfa_register 7
 1968 0006 7860     		str	r0, [r7, #4]
 1969 0008 3960     		str	r1, [r7]
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 1970              		.loc 1 1319 0
 1971 000a 7B68     		ldr	r3, [r7, #4]
 1972 000c 0F22     		movs	r2, #15
 1973 000e 1A60     		str	r2, [r3]
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 1974              		.loc 1 1322 0
 1975 0010 114B     		ldr	r3, .L143
 1976 0012 5B68     		ldr	r3, [r3, #4]
 1977 0014 03F00302 		and	r2, r3, #3
 1978 0018 7B68     		ldr	r3, [r7, #4]
 1979 001a 5A60     		str	r2, [r3, #4]
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 1980              		.loc 1 1325 0
 1981 001c 0E4B     		ldr	r3, .L143
 1982 001e 5B68     		ldr	r3, [r3, #4]
 1983 0020 03F0F002 		and	r2, r3, #240
 1984 0024 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccW1V1Y1.s 			page 59


 1985 0026 9A60     		str	r2, [r3, #8]
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 1986              		.loc 1 1328 0
 1987 0028 0B4B     		ldr	r3, .L143
 1988 002a 5B68     		ldr	r3, [r3, #4]
 1989 002c 03F4E062 		and	r2, r3, #1792
 1990 0030 7B68     		ldr	r3, [r7, #4]
 1991 0032 DA60     		str	r2, [r3, #12]
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 1992              		.loc 1 1331 0
 1993 0034 084B     		ldr	r3, .L143
 1994 0036 5B68     		ldr	r3, [r3, #4]
 1995 0038 DB08     		lsrs	r3, r3, #3
 1996 003a 03F4E062 		and	r2, r3, #1792
 1997 003e 7B68     		ldr	r3, [r7, #4]
 1998 0040 1A61     		str	r2, [r3, #16]
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if   defined(FLASH_ACR_LATENCY)
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 1999              		.loc 1 1335 0
 2000 0042 064B     		ldr	r3, .L143+4
 2001 0044 1B68     		ldr	r3, [r3]
 2002 0046 03F00702 		and	r2, r3, #7
 2003 004a 3B68     		ldr	r3, [r7]
 2004 004c 1A60     		str	r2, [r3]
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* For VALUE lines devices, only LATENCY_0 can be set*/
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)FLASH_LATENCY_0;
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2005              		.loc 1 1340 0
 2006 004e 00BF     		nop
 2007 0050 0C37     		adds	r7, r7, #12
 2008              	.LCFI51:
 2009              		.cfi_def_cfa_offset 4
 2010 0052 BD46     		mov	sp, r7
 2011              	.LCFI52:
 2012              		.cfi_def_cfa_register 13
 2013              		@ sp needed
 2014 0054 80BC     		pop	{r7}
 2015              	.LCFI53:
 2016              		.cfi_restore 7
 2017              		.cfi_def_cfa_offset 0
 2018 0056 7047     		bx	lr
 2019              	.L144:
 2020              		.align	2
 2021              	.L143:
 2022 0058 00100240 		.word	1073876992
 2023 005c 00200240 		.word	1073881088
 2024              		.cfi_endproc
 2025              	.LFE76:
 2027              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccW1V1Y1.s 			page 60


 2028              		.align	1
 2029              		.global	HAL_RCC_NMI_IRQHandler
 2030              		.syntax unified
 2031              		.thumb
 2032              		.thumb_func
 2033              		.fpu softvfp
 2035              	HAL_RCC_NMI_IRQHandler:
 2036              	.LFB77:
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2037              		.loc 1 1348 0
 2038              		.cfi_startproc
 2039              		@ args = 0, pretend = 0, frame = 0
 2040              		@ frame_needed = 1, uses_anonymous_args = 0
 2041 0000 80B5     		push	{r7, lr}
 2042              	.LCFI54:
 2043              		.cfi_def_cfa_offset 8
 2044              		.cfi_offset 7, -8
 2045              		.cfi_offset 14, -4
 2046 0002 00AF     		add	r7, sp, #0
 2047              	.LCFI55:
 2048              		.cfi_def_cfa_register 7
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 2049              		.loc 1 1350 0
 2050 0004 064B     		ldr	r3, .L148
 2051 0006 9B68     		ldr	r3, [r3, #8]
 2052 0008 03F08003 		and	r3, r3, #128
 2053 000c 802B     		cmp	r3, #128
 2054 000e 04D1     		bne	.L147
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2055              		.loc 1 1353 0
 2056 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2057              		.loc 1 1356 0
 2058 0014 034B     		ldr	r3, .L148+4
 2059 0016 8022     		movs	r2, #128
 2060 0018 1A70     		strb	r2, [r3]
 2061              	.L147:
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2062              		.loc 1 1358 0
 2063 001a 00BF     		nop
 2064 001c 80BD     		pop	{r7, pc}
 2065              	.L149:
 2066 001e 00BF     		.align	2
 2067              	.L148:
ARM GAS  /tmp/ccW1V1Y1.s 			page 61


 2068 0020 00100240 		.word	1073876992
 2069 0024 0A100240 		.word	1073877002
 2070              		.cfi_endproc
 2071              	.LFE77:
 2073              		.section	.text.RCC_Delay,"ax",%progbits
 2074              		.align	1
 2075              		.syntax unified
 2076              		.thumb
 2077              		.thumb_func
 2078              		.fpu softvfp
 2080              	RCC_Delay:
 2081              	.LFB78:
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  mdelay: specifies the delay time length, in milliseconds.
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay)
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2082              		.loc 1 1366 0
 2083              		.cfi_startproc
 2084              		@ args = 0, pretend = 0, frame = 16
 2085              		@ frame_needed = 1, uses_anonymous_args = 0
 2086              		@ link register save eliminated.
 2087 0000 80B4     		push	{r7}
 2088              	.LCFI56:
 2089              		.cfi_def_cfa_offset 4
 2090              		.cfi_offset 7, -4
 2091 0002 85B0     		sub	sp, sp, #20
 2092              	.LCFI57:
 2093              		.cfi_def_cfa_offset 24
 2094 0004 00AF     		add	r7, sp, #0
 2095              	.LCFI58:
 2096              		.cfi_def_cfa_register 7
 2097 0006 7860     		str	r0, [r7, #4]
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 2098              		.loc 1 1367 0
 2099 0008 0A4B     		ldr	r3, .L152
 2100 000a 1B68     		ldr	r3, [r3]
 2101 000c 0A4A     		ldr	r2, .L152+4
 2102 000e A2FB0323 		umull	r2, r3, r2, r3
 2103 0012 5B0A     		lsrs	r3, r3, #9
 2104 0014 7A68     		ldr	r2, [r7, #4]
 2105 0016 02FB03F3 		mul	r3, r2, r3
 2106 001a FB60     		str	r3, [r7, #12]
 2107              	.L151:
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   do
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __NOP();
 2108              		.loc 1 1370 0 discriminator 1
 2109              		.syntax unified
 2110              	@ 1370 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c" 1
 2111 001c 00BF     		nop
 2112              	@ 0 "" 2
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (Delay --);
ARM GAS  /tmp/ccW1V1Y1.s 			page 62


 2113              		.loc 1 1372 0 discriminator 1
 2114              		.thumb
 2115              		.syntax unified
 2116 001e FB68     		ldr	r3, [r7, #12]
 2117 0020 5A1E     		subs	r2, r3, #1
 2118 0022 FA60     		str	r2, [r7, #12]
 2119 0024 002B     		cmp	r3, #0
 2120 0026 F9D1     		bne	.L151
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2121              		.loc 1 1373 0
 2122 0028 00BF     		nop
 2123 002a 1437     		adds	r7, r7, #20
 2124              	.LCFI59:
 2125              		.cfi_def_cfa_offset 4
 2126 002c BD46     		mov	sp, r7
 2127              	.LCFI60:
 2128              		.cfi_def_cfa_register 13
 2129              		@ sp needed
 2130 002e 80BC     		pop	{r7}
 2131              	.LCFI61:
 2132              		.cfi_restore 7
 2133              		.cfi_def_cfa_offset 0
 2134 0030 7047     		bx	lr
 2135              	.L153:
 2136 0032 00BF     		.align	2
 2137              	.L152:
 2138 0034 00000000 		.word	SystemCoreClock
 2139 0038 D34D6210 		.word	274877907
 2140              		.cfi_endproc
 2141              	.LFE78:
 2143              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2144              		.align	1
 2145              		.weak	HAL_RCC_CSSCallback
 2146              		.syntax unified
 2147              		.thumb
 2148              		.thumb_func
 2149              		.fpu softvfp
 2151              	HAL_RCC_CSSCallback:
 2152              	.LFB79:
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval none
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2153              		.loc 1 1380 0
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 0
 2156              		@ frame_needed = 1, uses_anonymous_args = 0
 2157              		@ link register save eliminated.
 2158 0000 80B4     		push	{r7}
 2159              	.LCFI62:
 2160              		.cfi_def_cfa_offset 4
 2161              		.cfi_offset 7, -4
 2162 0002 00AF     		add	r7, sp, #0
 2163              	.LCFI63:
ARM GAS  /tmp/ccW1V1Y1.s 			page 63


 2164              		.cfi_def_cfa_register 7
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     the HAL_RCC_CSSCallback could be implemented in the user file
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     */
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2165              		.loc 1 1384 0
 2166 0004 00BF     		nop
 2167 0006 BD46     		mov	sp, r7
 2168              	.LCFI64:
 2169              		.cfi_def_cfa_register 13
 2170              		@ sp needed
 2171 0008 80BC     		pop	{r7}
 2172              	.LCFI65:
 2173              		.cfi_restore 7
 2174              		.cfi_def_cfa_offset 0
 2175 000a 7047     		bx	lr
 2176              		.cfi_endproc
 2177              	.LFE79:
 2179              		.text
 2180              	.Letext0:
 2181              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2182              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2183              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 2184              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2185              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2186              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2187              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2188              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2189              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2190              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2191              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccW1V1Y1.s 			page 64


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_rcc.c
     /tmp/ccW1V1Y1.s:16     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccW1V1Y1.s:23     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccW1V1Y1.s:215    .text.HAL_RCC_DeInit:0000000000000124 $d
     /tmp/ccW1V1Y1.s:223    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccW1V1Y1.s:230    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccW1V1Y1.s:2080   .text.RCC_Delay:0000000000000000 RCC_Delay
     /tmp/ccW1V1Y1.s:606    .text.HAL_RCC_OscConfig:000000000000026c $d
     /tmp/ccW1V1Y1.s:611    .text.HAL_RCC_OscConfig:0000000000000278 $t
     /tmp/ccW1V1Y1.s:992    .text.HAL_RCC_OscConfig:00000000000004f4 $d
     /tmp/ccW1V1Y1.s:999    .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1006   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccW1V1Y1.s:1494   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccW1V1Y1.s:1276   .text.HAL_RCC_ClockConfig:00000000000001c0 $d
     /tmp/ccW1V1Y1.s:1285   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1292   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccW1V1Y1.s:1370   .text.HAL_RCC_MCOConfig:0000000000000068 $d
     /tmp/ccW1V1Y1.s:1376   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1383   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccW1V1Y1.s:1415   .text.HAL_RCC_EnableCSS:0000000000000014 $d
     /tmp/ccW1V1Y1.s:1420   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1427   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccW1V1Y1.s:1459   .text.HAL_RCC_DisableCSS:0000000000000014 $d
     /tmp/ccW1V1Y1.s:1464   .rodata:0000000000000000 $d
     /tmp/ccW1V1Y1.s:1487   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1621   .text.HAL_RCC_GetSysClockFreq:00000000000000b0 $d
     /tmp/ccW1V1Y1.s:1630   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1637   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccW1V1Y1.s:1668   .text.HAL_RCC_GetHCLKFreq:0000000000000010 $d
     /tmp/ccW1V1Y1.s:1673   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1680   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccW1V1Y1.s:1710   .text.HAL_RCC_GetPCLK1Freq:0000000000000020 $d
     /tmp/ccW1V1Y1.s:1716   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1723   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccW1V1Y1.s:1753   .text.HAL_RCC_GetPCLK2Freq:0000000000000020 $d
     /tmp/ccW1V1Y1.s:1759   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1766   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccW1V1Y1.s:1939   .text.HAL_RCC_GetOscConfig:0000000000000100 $d
     /tmp/ccW1V1Y1.s:1944   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccW1V1Y1.s:1951   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccW1V1Y1.s:2022   .text.HAL_RCC_GetClockConfig:0000000000000058 $d
     /tmp/ccW1V1Y1.s:2028   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccW1V1Y1.s:2035   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccW1V1Y1.s:2151   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccW1V1Y1.s:2068   .text.HAL_RCC_NMI_IRQHandler:0000000000000020 $d
     /tmp/ccW1V1Y1.s:2074   .text.RCC_Delay:0000000000000000 $t
     /tmp/ccW1V1Y1.s:2138   .text.RCC_Delay:0000000000000034 $d
     /tmp/ccW1V1Y1.s:2144   .text.HAL_RCC_CSSCallback:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
uwTickPrio
AHBPrescTable
ARM GAS  /tmp/ccW1V1Y1.s 			page 65


HAL_GPIO_Init
APBPrescTable
